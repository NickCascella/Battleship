(()=>{"use strict";var e={299:(e,t,r)=>{r.d(t,{Z:()=>h});var n=r(537),a=r.n(n),s=r(645),i=r.n(s),o=r(667),u=r.n(o),l=new URL(r(270),r.b),c=new URL(r(473),r.b),p=new URL(r(192),r.b),d=i()(a());d.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap);"]);var A=u()(l),m=u()(c),y=u()(p);d.push([e.id,"html {\r\n  background-image: url("+A+');\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  font-family: "Roboto Mono", monospace;\r\n}\r\n\r\n#player_creation {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#player_info {\r\n  height: 400px;\r\n  width: 600px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: url('+m+");\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n#text_div {\r\n  margin-top: 70px;\r\n  width: 550px;\r\n  height: 150px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  color: greenyellow;\r\n}\r\n\r\n#button_div {\r\n  padding-top: 50px;\r\n  width: 400px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n.playBtns {\r\n  width: 100px;\r\n  border: none;\r\n  background: none;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: greenyellow;\r\n}\r\n\r\n.playBtns:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n#playing_field {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n}\r\n\r\n#player_side {\r\n  margin-right: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#name_display {\r\n  font-size: 30px;\r\n  color: rgb(47, 179, 255);\r\n}\r\n\r\n#name_enter {\r\n  text-align: center;\r\n  background-color: black;\r\n  color: greenyellow;\r\n}\r\n\r\n#enemy_display {\r\n  font-size: 30px;\r\n  color: rgb(255, 165, 47);\r\n}\r\n\r\n#game_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url("+y+");\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n#enemy_side {\r\n  margin-left: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#enemy_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url("+y+');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.squares {\r\n  height: 50px;\r\n  width: 50px;\r\n  border: 1px solid black;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  font-size: 40px;\r\n  padding: 0px;\r\n  color: white;\r\n}\r\n\r\n.squares:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n/* .img {\r\n  background-image: url("./images/carrier.jpg");\r\n  background-attachment: fixed;\r\n  background-size: 50px 200px;\r\n  background-repeat: no-repeat;\r\n} */\r\n\r\n#text_display {\r\n  height: 34px;\r\n  margin: 0;\r\n  width: 550px;\r\n  color: rgb(4, 189, 4);\r\n  font-size: 20px;\r\n}\r\n\r\n/* NOT MY ANIMATION */\r\n.text_display {\r\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\r\n  border-right: 0.15em solid orange; /* The typwriter cursor */\r\n  white-space: nowrap; /* Keeps the content on a single line */\r\n  letter-spacing: 0.15em; /* Adjust as needed */\r\n  animation: typing 1s steps(40, end), blink-caret 0.75s step-end infinite;\r\n}\r\n\r\n.text_display2 {\r\n  height: 15px;\r\n  width: 0px;\r\n}\r\n\r\n/* The typing effect */\r\n@keyframes typing {\r\n  from {\r\n    width: 0%;\r\n  }\r\n  to {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n/* The typewriter cursor effect */\r\n@keyframes blink-caret {\r\n  from,\r\n  to {\r\n    border-color: transparent;\r\n  }\r\n  50% {\r\n    border-color: orange;\r\n  }\r\n}\r\n',"",{version:3,sources:["webpack://./src/battleship.css"],names:[],mappings:"AAEA;EACE,yDAAgD;EAChD,eAAe;EACf,gBAAgB;EAChB,qCAAqC;AACvC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,oCAAoC;EACpC,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,yDAAqD;EACrD,4BAA4B;EAC5B,sBAAsB;EACtB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,YAAY;EACZ,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,eAAe;EACf,wBAAwB;AAC1B;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,wBAAwB;AAC1B;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,yDAA8C;EAC9C,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,yDAA8C;EAC9C,4BAA4B;EAC5B,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;EACvB,sBAAsB;EACtB,kBAAkB;EAClB,eAAe;EACf,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;;;;;GAKG;;AAEH;EACE,YAAY;EACZ,SAAS;EACT,YAAY;EACZ,qBAAqB;EACrB,eAAe;AACjB;;AAEA,qBAAqB;AACrB;EACE,gBAAgB,EAAE,4DAA4D;EAC9E,iCAAiC,EAAE,yBAAyB;EAC5D,mBAAmB,EAAE,uCAAuC;EAC5D,sBAAsB,EAAE,qBAAqB;EAC7C,wEAAwE;AAC1E;;AAEA;EACE,YAAY;EACZ,UAAU;AACZ;;AAEA,sBAAsB;AACtB;EACE;IACE,SAAS;EACX;EACA;IACE,WAAW;EACb;AACF;;AAEA,iCAAiC;AACjC;EACE;;IAEE,yBAAyB;EAC3B;EACA;IACE,oBAAoB;EACtB;AACF",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap");\r\n\r\nhtml {\r\n  background-image: url(/src/images/metal_bkg.jpg);\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  font-family: "Roboto Mono", monospace;\r\n}\r\n\r\n#player_creation {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#player_info {\r\n  height: 400px;\r\n  width: 600px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: url(/src/images/battleship_bkg.jpg);\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n#text_div {\r\n  margin-top: 70px;\r\n  width: 550px;\r\n  height: 150px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  color: greenyellow;\r\n}\r\n\r\n#button_div {\r\n  padding-top: 50px;\r\n  width: 400px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n.playBtns {\r\n  width: 100px;\r\n  border: none;\r\n  background: none;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: greenyellow;\r\n}\r\n\r\n.playBtns:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n#playing_field {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n}\r\n\r\n#player_side {\r\n  margin-right: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#name_display {\r\n  font-size: 30px;\r\n  color: rgb(47, 179, 255);\r\n}\r\n\r\n#name_enter {\r\n  text-align: center;\r\n  background-color: black;\r\n  color: greenyellow;\r\n}\r\n\r\n#enemy_display {\r\n  font-size: 30px;\r\n  color: rgb(255, 165, 47);\r\n}\r\n\r\n#game_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url(/src/images/sea_bkg.jpg);\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n#enemy_side {\r\n  margin-left: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#enemy_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url(/src/images/sea_bkg.jpg);\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.squares {\r\n  height: 50px;\r\n  width: 50px;\r\n  border: 1px solid black;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  font-size: 40px;\r\n  padding: 0px;\r\n  color: white;\r\n}\r\n\r\n.squares:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n/* .img {\r\n  background-image: url("./images/carrier.jpg");\r\n  background-attachment: fixed;\r\n  background-size: 50px 200px;\r\n  background-repeat: no-repeat;\r\n} */\r\n\r\n#text_display {\r\n  height: 34px;\r\n  margin: 0;\r\n  width: 550px;\r\n  color: rgb(4, 189, 4);\r\n  font-size: 20px;\r\n}\r\n\r\n/* NOT MY ANIMATION */\r\n.text_display {\r\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\r\n  border-right: 0.15em solid orange; /* The typwriter cursor */\r\n  white-space: nowrap; /* Keeps the content on a single line */\r\n  letter-spacing: 0.15em; /* Adjust as needed */\r\n  animation: typing 1s steps(40, end), blink-caret 0.75s step-end infinite;\r\n}\r\n\r\n.text_display2 {\r\n  height: 15px;\r\n  width: 0px;\r\n}\r\n\r\n/* The typing effect */\r\n@keyframes typing {\r\n  from {\r\n    width: 0%;\r\n  }\r\n  to {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n/* The typewriter cursor effect */\r\n@keyframes blink-caret {\r\n  from,\r\n  to {\r\n    border-color: transparent;\r\n  }\r\n  50% {\r\n    border-color: orange;\r\n  }\r\n}\r\n'],sourceRoot:""}]);const h=d},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,a,s){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var o=0;o<this.length;o++){var u=this[o][0];null!=u&&(i[u]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);n&&i[c[0]]||(void 0!==s&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=s),r&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=r):c[2]=r),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(a," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var s={},i=[],o=0;o<e.length;o++){var u=e[o],l=n.base?u[0]+n.base:u[0],c=s[l]||0,p="".concat(l," ").concat(c);s[l]=c+1;var d=r(p),A={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(A);else{var m=a(A,n);n.byIndex=o,t.splice(o,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function a(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,a){var s=n(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<s.length;i++){var o=r(s[i]);t[o].references--}for(var u=n(e,a),l=0;l<s.length;l++){var c=r(s[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}s=u}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,a&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var s=r.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},473:(e,t,r)=>{e.exports=r.p+"a4543c6f1253d78ceab6.jpg"},270:(e,t,r)=>{e.exports=r.p+"0e2ef141a708e1bffb31.jpg"},192:(e,t,r)=>{e.exports=r.p+"e7039b1b15e4e94404f5.jpg"}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var s=t[n]={id:n,exports:{}};return e[n](s,s.exports,r),s.exports}r.m=e,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.b=document.baseURI||self.location.href;var n={};(()=>{r.d(n,{G:()=>j,c:()=>P});let e=()=>{5===y.enemyShipsSunk?(y.readyAim=!1,y.readyFire=!1,y.enemyTurn=!1,o(`Congratulations ${y.playerName}, you have sank all enemy ships!`,"Play again?")):5===y.playerShipsSunk&&(y.readyAim=!1,y.readyFire=!1,y.enemyTurn=!1,o(`Congratulations ${y.playerName}, you lost spectacularly!`,"Play again?"))};function t(e,t){setTimeout((()=>{e.textContent="X",e.style.color="black",y.playerSuccessfulShots.push(e),e.style.backgroundColor=t}),2500)}document.getElementById("restart").addEventListener("click",(()=>{location.reload()}));let a=e=>{let r=e.target;!0!==y.readyAim||!0!==y.readyFire||y.missedShots.includes(r)||y.playerSuccessfulShots.includes(r)||!y.enemy_taken_squares.includes(r)?!0!==y.readyAim||!0!==y.readyFire||y.playerSuccessfulShots.includes(r)||y.missedShots.includes(r)||(y.readyAim=!1,y.readyFire=!1,y.missedShots.push(r),setTimeout((function(){r.textContent="X"}),2500),o("Checking.....","We missed!"),y.enemyTurn=!0,setTimeout(s,6400)):(y.readyAim=!1,y.readyFire=!1,y.enemyCarrier.position.includes(r)?(t(r,"orange"),y.enemyCarrier.ship.hit()):y.enemyBattleship.position.includes(r)?(t(r,"rgb(45, 192, 250)"),y.enemyBattleship.ship.hit()):y.enemyCruiser.position.includes(r)?(t(r,"rgb(34, 250, 106)"),y.enemyCruiser.ship.hit()):y.enemySubmarine.position.includes(r)?(t(r,"rgb(182, 34, 250)"),y.enemySubmarine.ship.hit()):y.enemyPatrolboat.position.includes(r)&&(t(r,"rgb(250, 34, 196)"),y.enemyPatrolboat.ship.hit()))},s=()=>{const e=(()=>{let e=Math.floor(Math.random()*y.availibleSquares.length),t=y.availibleSquares[e];return y.availibleSquares.splice(e,1),t})();let t=document.getElementById(`square_${e}`);!y.taken_sqaures.includes(t)||y.enemySuccessfulShots.includes(t)||y.missedShots.includes(t)?y.enemySuccessfulShots.includes(t)||y.missedShots.includes(t)?s():(o("Waiting on the enemy.....","They missed! Fire away!"),setTimeout((function(){y.missedShots.push(t),t.textContent="X",y.readyAim=!0,y.readyFire=!0,y.enemyTurn=!1}),1900)):(setTimeout((function(){t.textContent="X",t.style.color="black",y.readyAim=!0,y.readyFire=!0,y.enemySuccessfulShots.push(t)}),4e3),y.playerCarrier.position.includes(t)?y.playerCarrier.ship.hit():y.playerBattleship.position.includes(t)?y.playerBattleship.ship.hit():y.playerCruiser.position.includes(t)?y.playerCruiser.ship.hit():y.playerSubmarine.position.includes(t)?y.playerSubmarine.ship.hit():y.playerPatrolboat.position.includes(t)&&y.playerPatrolboat.ship.hit())},i=e=>{!0!==y.readyAim||y.playerSuccessfulShots.includes(e.target)||y.missedShots.includes(e.target)||(!0!==y.clearPassedSquare||y.playerSuccessfulShots.includes(y.passedSquare)||(y.passedSquare.style.backgroundColor=""),y.passedSquare=e.target,e.target.style.backgroundColor="orange",y.clearPassedSquare=!0)},o=(e,t)=>{y.textDisplay.textContent="",y.textDisplay.classList.remove("text_display"),y.textDisplay.classList.add("text_display2"),setTimeout((()=>{y.textDisplay.classList.remove("text_display2"),y.textDisplay.textContent=e,y.textDisplay.classList.add("text_display"),setTimeout((()=>{y.textDisplay.textContent="",y.textDisplay.classList.remove("text_display"),y.textDisplay.classList.add("text_display2"),setTimeout((()=>{y.textDisplay.textContent=t,y.textDisplay.classList.remove("text_display2"),y.textDisplay.classList.add("text_display")}),1e3)}),1600)}),500)},u=()=>{y.enemyBoard.addEventListener("click",a);for(let e=0;e<100;e++){let t=document.createElement("div");e<10?(t.setAttribute("XX",e),t.setAttribute("YY",9)):e<20?(t.setAttribute("XX",e-10),t.setAttribute("YY",8)):e<30?(t.setAttribute("XX",e-20),t.setAttribute("Y",7)):e<40?(t.setAttribute("XX",e-30),t.setAttribute("YY",6)):e<50?(t.setAttribute("XX",e-40),t.setAttribute("YY",5)):e<60?(t.setAttribute("XX",e-50),t.setAttribute("YY",4)):e<70?(t.setAttribute("XX",e-60),t.setAttribute("YY",3)):e<80?(t.setAttribute("XX",e-70),t.setAttribute("YY",2)):e<90?(t.setAttribute("XX",e-80),t.setAttribute("YY",1)):e<100&&(t.setAttribute("XX",e-90),t.setAttribute("YY",0)),t.id=`enemySquare_${e}`,t.addEventListener("mouseover",i),t.classList="squares",y.enemyBoard.appendChild(t),99===e&&(o("Ready for battle!","Commence attack!"),setTimeout(l,3e3))}},l=()=>{let e=new h("Carrier",5,5),t=new h("Battleship",4,4),r=new h("Cruiser",3,3),n=new h("Submarine",3,3),a=new h("Patrol Boat",2,2);y.enemyCarrier.ship=e,y.enemyBattleship.ship=t,y.enemyCruiser.ship=r,y.enemySubmarine.ship=n,y.enemyPatrolboat.ship=a,c(),p(),d(),A(),m(),y.readyAim=!0,y.readyFire=!0};function c(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=document.getElementById(`enemySquare_${e+3}`),s=document.getElementById(`enemySquare_${e+4}`),i=[];if(i.push(t,r,n,a,s),i.includes(null)||g(y.enemy_taken_squares,i)||t.getAttribute("YY")!==s.getAttribute("YY"))c();else{let e=t,o=r,u=n,l=a,c=s,p=[];p.push(e,o,u,l,c);for(let e=0;e<i.length;e++)y.enemyCarrier.position.push(p[e]),y.enemy_taken_squares.push(p[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=document.getElementById("enemySquare_"+(e-30)),s=document.getElementById("enemySquare_"+(e-40)),i=[];if(i.push(t,r,n,a,s),i.includes(null)||g(y.enemy_taken_squares,i))c();else{let e=t,o=r,u=n,l=a,c=s,p=[];p.push(e,o,u,l,c);for(let e=0;e<i.length;e++)y.enemyCarrier.position.push(p[e]),y.enemy_taken_squares.push(p[e])}}}function p(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=document.getElementById(`enemySquare_${e+3}`),s=[];if(s.push(t,r,n,a),s.includes(null)||g(y.enemy_taken_squares,s)||t.getAttribute("YY")!==a.getAttribute("YY"))p();else{let e=t,i=r,o=n,u=a,l=[];l.push(e,i,o,u);for(let e=0;e<s.length;e++)y.enemyBattleship.position.push(l[e]),y.enemy_taken_squares.push(l[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=document.getElementById("enemySquare_"+(e-30)),s=[];if(s.push(t,r,n,a),s.includes(null)||g(y.enemy_taken_squares,s))p();else{let e=t,i=r,o=n,u=a,l=[];l.push(e,i,o,u);for(let e=0;e<s.length;e++)y.enemyBattleship.position.push(l[e]),y.enemy_taken_squares.push(l[e])}}}function d(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=[];if(a.push(t,r,n),a.includes(null)||g(y.enemy_taken_squares,a)||t.getAttribute("YY")!==n.getAttribute("YY"))d();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)y.enemyCruiser.position.push(o[e]),y.enemy_taken_squares.push(o[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=[];if(a.push(t,r,n),a.includes(null)||g(y.enemy_taken_squares,a))d();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)y.enemyCruiser.position.push(o[e]),y.enemy_taken_squares.push(o[e])}}}function A(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=[];if(a.push(t,r,n),a.includes(null)||g(y.enemy_taken_squares,a)||t.getAttribute("YY")!==n.getAttribute("YY"))A();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)y.enemySubmarine.position.push(o[e]),y.enemy_taken_squares.push(o[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=[];if(a.push(t,r,n),a.includes(null)||g(y.enemy_taken_squares,a))A();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)y.enemySubmarine.position.push(o[e]),y.enemy_taken_squares.push(o[e])}}}function m(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=[];if(n.push(t,r),n.includes(null)||g(y.enemy_taken_squares,n)||t.getAttribute("YY")!==r.getAttribute("YY"))m();else{let e=t,a=r,s=[];s.push(e,a);for(let e=0;e<n.length;e++)y.enemyPatrolboat.position.push(s[e]),y.enemy_taken_squares.push(s[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=[];if(n.push(t,r),n.includes(null)||g(y.enemy_taken_squares,n))m();else{let e=t,a=r,s=[];s.push(e,a);for(let e=0;e<n.length;e++)y.enemyPatrolboat.position.push(s[e]),y.enemy_taken_squares.push(s[e])}}}let y={board:document.getElementById("game_board"),textDisplay:document.getElementById("text_display"),currentFunction:"This is filler",hoizontal_placement:!0,availibleSquares:[],taken_sqaures:[],checkArray:!1,hoverArray:[],readyAim:!1,passedSquare:"This is filler",clearPassedSquare:!1,readyFire:!1,enemyTurn:!1,playerSuccessfulShots:[],enemySuccessfulShots:[],missedShots:[],playerShipsSunk:0,enemyShipsSunk:0,playerCarrier:{spawnCarrier:!0,ship:{},position:[]},playerBattleship:{spawnBattleship:!1,ship:{},position:[]},playerCruiser:{spawnCruiser:!1,ship:{},position:[]},playerSubmarine:{spawnSubmarine:!1,ship:{},position:[]},playerPatrolboat:{spawnPatrolboat:!1,ship:{},position:[]},enemyBoard:document.getElementById("enemy_board"),enemy_taken_squares:[],enemyCarrier:{ship:{},position:[]},enemyBattleship:{ship:{},position:[]},enemyCruiser:{ship:{},position:[]},enemySubmarine:{ship:{},position:[]},enemyPatrolboat:{ship:{},position:[]},playerName:""};class h{constructor(e,t,r){this.name=e,this.hit_points=t,this.length=r}hit(){this.hit_points-=1,0!==this.hit_points&&!1===y.enemyTurn?(o("Checking.....","It's a hit!"),setTimeout((function(){y.enemyTurn=!0,s()}),5500)):0!==this.hit_points&&!0===y.enemyTurn?(o("Waiting for enemy fire.....",`Our ${this.name}'s been hit! Fire back!`),y.enemyTurn=!1,setTimeout((function(){y.readyFire=!0,y.readyAim=!0}),3300)):0===this.hit_points&&!1===y.enemyTurn?(o("Checking.....",`Nice shot! you sunk their ${this.name}!`),setTimeout((function(){y.enemyShipsSunk++,5===y.playerShipsSunk||5===y.enemyShipsSunk?e():(y.enemyTurn=!0,s())}),5500)):0===this.hit_points&&!0===y.enemyTurn&&(o("Waiting for enemy fire.....",`Damn! they sunk our ${this.name}!!`),y.enemyTurn=!1,setTimeout((function(){y.playerShipsSunk++,5===y.playerShipsSunk||5===y.enemyShipsSunk?e():(y.readyFire=!0,y.readyAim=!0)}),3300))}}let g=(e,t)=>e.map((e=>e.id)).some((e=>t.map((e=>e.id)).includes(e))),b=e=>{for(let t=0;t<100;t++)if(!0===y.playerCarrier.spawnCarrier&&!0===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null!==e&&(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`),a=document.getElementById(`square_${t+3}`),s=document.getElementById(`square_${t+4}`);y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n,a,s),e.getAttribute("X")<6&&e.getAttribute("Y")===s.getAttribute("Y")&&!y.hoverArray.includes(null)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==y.hoverArray[0].getAttribute("Y")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===y.playerCarrier.spawnCarrier&&!1===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null!==e&&(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10)),n=document.getElementById("square_"+(t-20)),a=document.getElementById("square_"+(t-30)),s=document.getElementById("square_"+(t-40));y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n,a,s),e.getAttribute("Y")<6&&e.getAttribute("X")===s.getAttribute("X")&&!y.hoverArray.includes(null)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==y.hoverArray[0].getAttribute("X")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===y.playerBattleship.spawnBattleship&&!0===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`),a=document.getElementById(`square_${t+3}`);y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n,a),e.getAttribute("X")<7&&e.getAttribute("Y")===a.getAttribute("Y")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==y.hoverArray[0].getAttribute("Y")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===y.playerBattleship.spawnBattleship&&!1===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10)),n=document.getElementById("square_"+(t-20)),a=document.getElementById("square_"+(t-30));y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n,a),e.getAttribute("Y")<7&&e.getAttribute("X")===a.getAttribute("X")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==y.hoverArray[0].getAttribute("X")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0!==y.playerCruiser.spawnCruiser&&!0!==y.playerSubmarine.spawnSubmarine||!0!==y.hoizontal_placement||e.target.id!==`square_${t}`)if(!0!==y.playerCruiser.spawnCruiser&&!0!==y.playerSubmarine.spawnSubmarine||!1!==y.hoizontal_placement||e.target.id!==`square_${t}`){if(!0===y.playerPatrolboat.spawnPatrolboat&&!0===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`);y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r),e.getAttribute("X")<9&&e.getAttribute("Y")===r.getAttribute("Y")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==y.hoverArray[0].getAttribute("Y")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===y.playerPatrolboat.spawnPatrolboat&&!1===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10));y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r),e.getAttribute("Y")<9&&e.getAttribute("X")===r.getAttribute("X")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==y.hoverArray[0].getAttribute("X")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}}else{!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10)),n=document.getElementById("square_"+(t-20));y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n),e.getAttribute("Y")<8&&e.getAttribute("X")===n.getAttribute("X")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==y.hoverArray[0].getAttribute("X")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else{!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`);y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n),e.getAttribute("X")<8&&e.getAttribute("Y")===n.getAttribute("Y")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==y.hoverArray[0].getAttribute("Y")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}};var f=r(379),E=r.n(f),B=r(795),_=r.n(B),C=r(569),k=r.n(C),q=r(565),x=r.n(q),v=r(216),S=r.n(v),w=r(589),I=r.n(w),Y=r(299),$={};$.styleTagTransform=I(),$.setAttributes=x(),$.insert=k().bind(null,"head"),$.domAPI=_(),$.insertStyleElement=S(),E()(Y.Z,$),Y.Z&&Y.Z.locals&&Y.Z.locals;let X=()=>{!0===y.hoizontal_placement?y.hoizontal_placement=!1:y.hoizontal_placement=!0},T=(e,t)=>{y.textDisplay.textContent="",y.textDisplay.classList.remove("text_display"),y.textDisplay.classList.add("text_display2"),y.board.removeEventListener("click",y.currentFunction),setTimeout((()=>{y.textDisplay.classList.remove("text_display2"),y.textDisplay.textContent=e,y.textDisplay.classList.add("text_display"),setTimeout((()=>{y.textDisplay.textContent="",y.textDisplay.classList.remove("text_display"),y.textDisplay.classList.add("text_display2"),setTimeout((()=>{y.textDisplay.textContent=t,y.textDisplay.classList.remove("text_display2"),y.textDisplay.classList.add("text_display"),y.board.addEventListener("click",y.currentFunction)}),1e3)}),1600)}),500)},P=()=>{document.getElementById("change_axis").addEventListener("click",X);let e=new h("Carrier",5,5),t=new h("Battleship",4,4),r=new h("Cruiser",3,3),n=new h("Submarine",3,3),a=new h("Patrol Boat",2,2);y.playerCarrier.ship=e,y.playerBattleship.ship=t,y.playerCruiser.ship=r,y.playerSubmarine.ship=n,y.playerPatrolboat.ship=a},j=e=>{if(!0===y.playerCarrier.spawnCarrier)for(let t=0;t<100;t++){if(e.target.getAttribute("X")>5)return;if(e.target.id===`square_${t}`&&!0===y.hoizontal_placement){let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`),a=document.getElementById(`square_${t+3}`),s=document.getElementById(`square_${t+4}`),i=[];if(i.push(e,r,n,a,s),i.includes(null)||e.getAttribute("Y")!==s.getAttribute("Y"))return;for(let e=0;e<i.length;e++)i[e].style.backgroundColor="orange",y.taken_sqaures.push(i[e]),y.playerCarrier.position.push(i[e]);y.playerCarrier.spawnCarrier=!1,T("Carrier has been set!","Please set down your battleship!"),y.currentFunction=z,setTimeout((()=>{y.playerBattleship.spawnBattleship=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===y.hoizontal_placement){if(e.target.getAttribute("Y")>5)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=document.getElementById("square_"+(t-30)),i=document.getElementById("square_"+(t-40)),o=[];if(o.push(r,n,a,s,i),o.includes(null)||r.getAttribute("X")!==i.getAttribute("X"))return;for(let e=0;e<o.length;e++)o[e].style.backgroundColor="orange",y.taken_sqaures.push(o[e]),y.playerCarrier.position.push(o[e]);y.playerCarrier.spawnCarrier=!1,T("Carrier has been set!","Please set down your battleship!"),y.currentFunction=z,setTimeout((()=>{y.playerBattleship.spawnBattleship=!0}),3e3)}}},z=e=>{if(!0===y.playerBattleship.spawnBattleship)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===y.hoizontal_placement){if(e.target.getAttribute("X")>6)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=document.getElementById(`square_${t+2}`),s=document.getElementById(`square_${t+3}`),i=[];if(i.push(r,n,a,s),r.getAttribute("Y")!==s.getAttribute("Y")||g(i,y.taken_sqaures))return;for(let e=0;e<i.length;e++)i[e].style.backgroundColor="rgb(45, 192, 250)",y.taken_sqaures.push(i[e]),y.playerBattleship.position.push(i[e]);y.playerBattleship.spawnBattleship=!1,T("Battleship has been placed!","Please set up your Cruiser..."),y.currentFunction=M,setTimeout((()=>{y.playerCruiser.spawnCruiser=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===y.hoizontal_placement){if(e.target.getAttribute("Y")>6)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=document.getElementById("square_"+(t-30)),i=[];if(i.push(r,n,a,s),r.getAttribute("X")!==s.getAttribute("X")||g(i,y.taken_sqaures))return;for(let e=0;e<i.length;e++)i[e].style.backgroundColor="rgb(45, 192, 250)",y.taken_sqaures.push(i[e]),y.playerBattleship.position.push(i[e]);y.playerBattleship.spawnBattleship=!1,T("Battleship has been placed!","Please set up your Cruiser..."),y.currentFunction=M,setTimeout((()=>{y.playerCruiser.spawnCruiser=!0}),3e3)}},M=e=>{if(!0===y.playerCruiser.spawnCruiser)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===y.hoizontal_placement){if(e.target.getAttribute("X")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=document.getElementById(`square_${t+2}`),s=[];if(s.push(r,n,a),r.getAttribute("Y")!==a.getAttribute("Y")||g(s,y.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(34, 250, 106)",y.taken_sqaures.push(s[e]),y.playerCruiser.position.push(s[e]);y.playerCruiser.spawnCruiser=!1,T("Cruiser is set!","Please submerge your submarine..."),y.currentFunction=D,setTimeout((()=>{y.playerSubmarine.spawnSubmarine=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===y.hoizontal_placement){if(e.target.getAttribute("Y")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=[];if(s.push(r,n,a),r.getAttribute("X")!==a.getAttribute("X")||g(s,y.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(34, 250, 106)",y.taken_sqaures.push(s[e]),y.playerCruiser.position.push(s[e]);y.playerCruiser.spawnCruiser=!1,T("Cruiser is set!","Please submerge your submarine..."),y.currentFunction=D,setTimeout((()=>{y.playerSubmarine.spawnSubmarine=!0}),3e3)}},D=e=>{if(!0===y.playerSubmarine.spawnSubmarine)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===y.hoizontal_placement){if(e.target.getAttribute("X")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=document.getElementById(`square_${t+2}`),s=[];if(s.push(r,n,a),r.getAttribute("Y")!==a.getAttribute("Y")||g(s,y.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(182, 34, 250)",y.taken_sqaures.push(s[e]),y.playerSubmarine.position.push(s[e]);y.playerSubmarine.spawnSubmarine=!1,T("Submarine is submerged!","Please send out your patrol boat.."),y.currentFunction=L,setTimeout((()=>{y.playerPatrolboat.spawnPatrolboat=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===y.hoizontal_placement){if(e.target.getAttribute("Y")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=[];if(s.push(r,n,a),r.getAttribute("X")!==a.getAttribute("X")||g(s,y.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(182, 34, 250)",y.taken_sqaures.push(s[e]),y.playerSubmarine.position.push(s[e]);y.playerSubmarine.spawnSubmarine=!1,T("Submarine is submerged!","Please send out your patrol boat.."),y.currentFunction=L,setTimeout((()=>{y.playerPatrolboat.spawnPatrolboat=!0}),3e3)}},L=e=>{if(!0===y.playerPatrolboat.spawnPatrolboat)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===y.hoizontal_placement){if(e.target.getAttribute("X")>8)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=[];if(a.push(r,n),r.getAttribute("Y")!==n.getAttribute("Y")||g(a,y.taken_sqaures))return;for(let e=0;e<a.length;e++)a[e].style.backgroundColor="rgb(250, 34, 196)",y.taken_sqaures.push(a[e]),y.playerPatrolboat.position.push(a[e]);y.playerPatrolboat.spawnPatrolboat=!1,T("Patrolboat is submerged!","Prepare to engage enemy fleet..."),y.currentFunction=l,setTimeout((()=>{u()}),5e3)}else if(e.target.id===`square_${t}`&&!1===y.hoizontal_placement){if(e.target.getAttribute("Y")>8)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=[];if(a.push(r,n),r.getAttribute("X")!==n.getAttribute("X")||g(a,y.taken_sqaures))return;for(let e=0;e<a.length;e++)a[e].style.backgroundColor="rgb(250, 34, 196)",y.taken_sqaures.push(a[e]),y.playerPatrolboat.position.push(a[e]);y.playerPatrolboat.spawnPatrolboat=!1,T("Patrolboat is submerged!","Prepare to engage enemy fleet..."),y.currentFunction=l,setTimeout((()=>{u()}),5e3)}};document.getElementById("name_enter").addEventListener("keypress",(e=>{if("Enter"===e.key||e.target===y.enterInfo){let e=document.getElementById("player_creation"),t=document.getElementById("name_enter");y.playerName=t.value,""===y.playerName&&(y.playerName="Player 1"),document.getElementById("name_display").textContent=y.playerName,e.style.display="none",P(),(()=>{y.currentFunction=j,y.board.addEventListener("click",y.currentFunction);for(let e=0;e<100;e++){let t=document.createElement("div");e<10?(t.setAttribute("X",e),t.setAttribute("Y",9)):e<20?(t.setAttribute("X",e-10),t.setAttribute("Y",8)):e<30?(t.setAttribute("X",e-20),t.setAttribute("Y",7)):e<40?(t.setAttribute("X",e-30),t.setAttribute("Y",6)):e<50?(t.setAttribute("X",e-40),t.setAttribute("Y",5)):e<60?(t.setAttribute("X",e-50),t.setAttribute("Y",4)):e<70?(t.setAttribute("X",e-60),t.setAttribute("Y",3)):e<80?(t.setAttribute("X",e-70),t.setAttribute("Y",2)):e<90?(t.setAttribute("X",e-80),t.setAttribute("Y",1)):e<100&&(t.setAttribute("X",e-90),t.setAttribute("Y",0)),t.id=`square_${e}`,t.addEventListener("mouseover",b),t.classList.add("squares"),y.board.appendChild(t),y.availibleSquares.push(e)}})(),o("Welcome to battleship!","Begin by placing down your carrier")}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,