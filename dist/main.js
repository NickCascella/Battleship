(()=>{"use strict";var e={299:(e,t,r)=>{r.d(t,{Z:()=>h});var n=r(537),a=r.n(n),s=r(645),i=r.n(s),o=r(667),u=r.n(o),l=new URL(r(473),r.b),c=new URL(r(270),r.b),d=new URL(r(192),r.b),p=i()(a());p.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap);"]);var A=u()(l),m=u()(c),y=u()(d);p.push([e.id,"html {\r\n  background-image: url("+A+');\r\n  max-width: 100%;\r\n  height: 100vh;\r\n  font-family: "Roboto Mono", monospace;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n#player_creation {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#player_info {\r\n  height: 400px;\r\n  width: 600px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: url('+m+");\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n#text_div {\r\n  margin-top: 70px;\r\n  width: 550px;\r\n  height: 150px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  color: greenyellow;\r\n}\r\n\r\n#button_div {\r\n  padding-top: 50px;\r\n  width: 400px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n.playBtns {\r\n  width: 100px;\r\n  border: none;\r\n  background: none;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: greenyellow;\r\n}\r\n\r\n.playBtns:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n#playing_field {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n}\r\n\r\n#player_side {\r\n  margin-right: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#name_display {\r\n  font-size: 30px;\r\n  color: rgb(47, 179, 255);\r\n}\r\n\r\n#name_enter {\r\n  text-align: center;\r\n  background-color: black;\r\n  color: greenyellow;\r\n  padding: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n#enemy_display {\r\n  font-size: 30px;\r\n  color: rgb(255, 165, 47);\r\n}\r\n\r\n#game_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url("+y+");\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n#enemy_side {\r\n  margin-left: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#enemy_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url("+y+');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.squares {\r\n  height: 50px;\r\n  width: 50px;\r\n  border: 1px solid black;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  font-size: 40px;\r\n  padding: 0px;\r\n  color: white;\r\n}\r\n\r\n.squares:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n/* .img {\r\n  background-image: url("./images/carrier.jpg");\r\n  background-attachment: fixed;\r\n  background-size: 50px 200px;\r\n  background-repeat: no-repeat;\r\n} */\r\n\r\n#text_display {\r\n  height: 34px;\r\n  margin: 0;\r\n  width: 550px;\r\n  color: rgb(4, 189, 4);\r\n  font-size: 20px;\r\n}\r\n\r\n/* NOT MY ANIMATION */\r\n.text_display {\r\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\r\n  border-right: 0.15em solid orange; /* The typwriter cursor */\r\n  white-space: nowrap; /* Keeps the content on a single line */\r\n  letter-spacing: 0.15em; /* Adjust as needed */\r\n  animation: typing 1s steps(40, end), blink-caret 0.75s step-end infinite;\r\n}\r\n\r\n.text_display2 {\r\n  height: 15px;\r\n  width: 0px;\r\n}\r\n\r\n/* The typing effect */\r\n@keyframes typing {\r\n  from {\r\n    width: 0%;\r\n  }\r\n  to {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n/* The typewriter cursor effect */\r\n@keyframes blink-caret {\r\n  from,\r\n  to {\r\n    border-color: transparent;\r\n  }\r\n  50% {\r\n    border-color: orange;\r\n  }\r\n}\r\n',"",{version:3,sources:["webpack://./src/battleship.css"],names:[],mappings:"AAEA;EACE,yDAAqD;EACrD,eAAe;EACf,aAAa;EACb,qCAAqC;EACrC,4BAA4B;EAC5B,sBAAsB;EACtB,UAAU;EACV,SAAS;AACX;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,oCAAoC;EACpC,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,yDAAiD;EACjD,4BAA4B;EAC5B,sBAAsB;EACtB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,YAAY;EACZ,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,eAAe;EACf,wBAAwB;AAC1B;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,kBAAkB;EAClB,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,wBAAwB;AAC1B;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,yDAA8C;EAC9C,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,yDAA8C;EAC9C,4BAA4B;EAC5B,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;EACvB,sBAAsB;EACtB,kBAAkB;EAClB,eAAe;EACf,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;;;;;GAKG;;AAEH;EACE,YAAY;EACZ,SAAS;EACT,YAAY;EACZ,qBAAqB;EACrB,eAAe;AACjB;;AAEA,qBAAqB;AACrB;EACE,gBAAgB,EAAE,4DAA4D;EAC9E,iCAAiC,EAAE,yBAAyB;EAC5D,mBAAmB,EAAE,uCAAuC;EAC5D,sBAAsB,EAAE,qBAAqB;EAC7C,wEAAwE;AAC1E;;AAEA;EACE,YAAY;EACZ,UAAU;AACZ;;AAEA,sBAAsB;AACtB;EACE;IACE,SAAS;EACX;EACA;IACE,WAAW;EACb;AACF;;AAEA,iCAAiC;AACjC;EACE;;IAEE,yBAAyB;EAC3B;EACA;IACE,oBAAoB;EACtB;AACF",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap");\r\n\r\nhtml {\r\n  background-image: url(/src/images/battleship_bkg.jpg);\r\n  max-width: 100%;\r\n  height: 100vh;\r\n  font-family: "Roboto Mono", monospace;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n#player_creation {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#player_info {\r\n  height: 400px;\r\n  width: 600px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: url(/src/images//metal_bkg.jpg);\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n#text_div {\r\n  margin-top: 70px;\r\n  width: 550px;\r\n  height: 150px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  color: greenyellow;\r\n}\r\n\r\n#button_div {\r\n  padding-top: 50px;\r\n  width: 400px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n.playBtns {\r\n  width: 100px;\r\n  border: none;\r\n  background: none;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: greenyellow;\r\n}\r\n\r\n.playBtns:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n#playing_field {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n}\r\n\r\n#player_side {\r\n  margin-right: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#name_display {\r\n  font-size: 30px;\r\n  color: rgb(47, 179, 255);\r\n}\r\n\r\n#name_enter {\r\n  text-align: center;\r\n  background-color: black;\r\n  color: greenyellow;\r\n  padding: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n#enemy_display {\r\n  font-size: 30px;\r\n  color: rgb(255, 165, 47);\r\n}\r\n\r\n#game_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url(/src/images/sea_bkg.jpg);\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n#enemy_side {\r\n  margin-left: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#enemy_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url(/src/images/sea_bkg.jpg);\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.squares {\r\n  height: 50px;\r\n  width: 50px;\r\n  border: 1px solid black;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  font-size: 40px;\r\n  padding: 0px;\r\n  color: white;\r\n}\r\n\r\n.squares:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n/* .img {\r\n  background-image: url("./images/carrier.jpg");\r\n  background-attachment: fixed;\r\n  background-size: 50px 200px;\r\n  background-repeat: no-repeat;\r\n} */\r\n\r\n#text_display {\r\n  height: 34px;\r\n  margin: 0;\r\n  width: 550px;\r\n  color: rgb(4, 189, 4);\r\n  font-size: 20px;\r\n}\r\n\r\n/* NOT MY ANIMATION */\r\n.text_display {\r\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\r\n  border-right: 0.15em solid orange; /* The typwriter cursor */\r\n  white-space: nowrap; /* Keeps the content on a single line */\r\n  letter-spacing: 0.15em; /* Adjust as needed */\r\n  animation: typing 1s steps(40, end), blink-caret 0.75s step-end infinite;\r\n}\r\n\r\n.text_display2 {\r\n  height: 15px;\r\n  width: 0px;\r\n}\r\n\r\n/* The typing effect */\r\n@keyframes typing {\r\n  from {\r\n    width: 0%;\r\n  }\r\n  to {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n/* The typewriter cursor effect */\r\n@keyframes blink-caret {\r\n  from,\r\n  to {\r\n    border-color: transparent;\r\n  }\r\n  50% {\r\n    border-color: orange;\r\n  }\r\n}\r\n'],sourceRoot:""}]);const h=p},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,a,s){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var o=0;o<this.length;o++){var u=this[o][0];null!=u&&(i[u]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);n&&i[c[0]]||(void 0!==s&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=s),r&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=r):c[2]=r),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(a," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var s={},i=[],o=0;o<e.length;o++){var u=e[o],l=n.base?u[0]+n.base:u[0],c=s[l]||0,d="".concat(l," ").concat(c);s[l]=c+1;var p=r(d),A={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=a(A,n);n.byIndex=o,t.splice(o,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function a(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,a){var s=n(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<s.length;i++){var o=r(s[i]);t[o].references--}for(var u=n(e,a),l=0;l<s.length;l++){var c=r(s[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}s=u}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,a&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var s=r.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},473:(e,t,r)=>{e.exports=r.p+"76cfbf26dd1c45144a95.jpg"},270:(e,t,r)=>{e.exports=r.p+"0e2ef141a708e1bffb31.jpg"},192:(e,t,r)=>{e.exports=r.p+"e7039b1b15e4e94404f5.jpg"}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var s=t[n]={id:n,exports:{}};return e[n](s,s.exports,r),s.exports}r.m=e,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.b=document.baseURI||self.location.href;var n={};(()=>{r.d(n,{G:()=>z,c:()=>P});let e=()=>{5===y.enemyShipsSunk?(y.readyAim=!1,y.readyFire=!1,y.enemyTurn=!1,o(`Congratulations ${y.playerName}, you have sank all enemy ships!`,"Play again?")):5===y.playerShipsSunk&&(y.readyAim=!1,y.readyFire=!1,y.enemyTurn=!1,o(`Congratulations ${y.playerName}, you lost spectacularly!`,"Play again?"))};function t(e,t){setTimeout((()=>{e.textContent="X",e.style.color="black",y.playerSuccessfulShots.push(e),e.style.backgroundColor=t}),2500)}document.getElementById("restart").addEventListener("click",(()=>{location.reload()}));let a=e=>{let r=e.target;!0!==y.readyAim||!0!==y.readyFire||y.missedShots.includes(r)||y.playerSuccessfulShots.includes(r)||!y.enemy_taken_squares.includes(r)?!0!==y.readyAim||!0!==y.readyFire||y.playerSuccessfulShots.includes(r)||y.missedShots.includes(r)||(y.readyAim=!1,y.readyFire=!1,y.missedShots.push(r),setTimeout((function(){r.textContent="X"}),2500),o("Checking.....","We missed!"),y.enemyTurn=!0,setTimeout(s,6400)):(y.readyAim=!1,y.readyFire=!1,y.enemyCarrier.position.includes(r)?(t(r,"orange"),y.enemyCarrier.ship.hit()):y.enemyBattleship.position.includes(r)?(t(r,"rgb(45, 192, 250)"),y.enemyBattleship.ship.hit()):y.enemyCruiser.position.includes(r)?(t(r,"rgb(34, 250, 106)"),y.enemyCruiser.ship.hit()):y.enemySubmarine.position.includes(r)?(t(r,"rgb(182, 34, 250)"),y.enemySubmarine.ship.hit()):y.enemyPatrolboat.position.includes(r)&&(t(r,"rgb(250, 34, 196)"),y.enemyPatrolboat.ship.hit()))},s=()=>{const e=(()=>{let e=Math.floor(Math.random()*y.availibleSquares.length),t=y.availibleSquares[e];return y.availibleSquares.splice(e,1),t})();let t=document.getElementById(`square_${e}`);!y.taken_sqaures.includes(t)||y.enemySuccessfulShots.includes(t)||y.missedShots.includes(t)?y.enemySuccessfulShots.includes(t)||y.missedShots.includes(t)?s():(o("Waiting on the enemy.....","They missed! Fire away!"),setTimeout((function(){y.missedShots.push(t),t.textContent="X",y.readyAim=!0,y.readyFire=!0,y.enemyTurn=!1}),1900)):(setTimeout((function(){t.textContent="X",t.style.color="black",y.readyAim=!0,y.readyFire=!0,y.enemySuccessfulShots.push(t)}),4e3),y.playerCarrier.position.includes(t)?y.playerCarrier.ship.hit():y.playerBattleship.position.includes(t)?y.playerBattleship.ship.hit():y.playerCruiser.position.includes(t)?y.playerCruiser.ship.hit():y.playerSubmarine.position.includes(t)?y.playerSubmarine.ship.hit():y.playerPatrolboat.position.includes(t)&&y.playerPatrolboat.ship.hit())},i=e=>{!0!==y.readyAim||y.playerSuccessfulShots.includes(e.target)||y.missedShots.includes(e.target)||(!0!==y.clearPassedSquare||y.playerSuccessfulShots.includes(y.passedSquare)||(y.passedSquare.style.backgroundColor=""),y.passedSquare=e.target,e.target.style.backgroundColor="orange",y.clearPassedSquare=!0)},o=(e,t)=>{y.textDisplay.textContent="",y.textDisplay.classList.remove("text_display"),y.textDisplay.classList.add("text_display2"),setTimeout((()=>{y.textDisplay.classList.remove("text_display2"),y.textDisplay.textContent=e,y.textDisplay.classList.add("text_display"),setTimeout((()=>{y.textDisplay.textContent="",y.textDisplay.classList.remove("text_display"),y.textDisplay.classList.add("text_display2"),setTimeout((()=>{y.textDisplay.textContent=t,y.textDisplay.classList.remove("text_display2"),y.textDisplay.classList.add("text_display")}),1e3)}),1600)}),500)},u=()=>{y.enemyBoard.addEventListener("click",a);for(let e=0;e<100;e++){let t=document.createElement("div");e<10?(t.setAttribute("XX",e),t.setAttribute("YY",9)):e<20?(t.setAttribute("XX",e-10),t.setAttribute("YY",8)):e<30?(t.setAttribute("XX",e-20),t.setAttribute("Y",7)):e<40?(t.setAttribute("XX",e-30),t.setAttribute("YY",6)):e<50?(t.setAttribute("XX",e-40),t.setAttribute("YY",5)):e<60?(t.setAttribute("XX",e-50),t.setAttribute("YY",4)):e<70?(t.setAttribute("XX",e-60),t.setAttribute("YY",3)):e<80?(t.setAttribute("XX",e-70),t.setAttribute("YY",2)):e<90?(t.setAttribute("XX",e-80),t.setAttribute("YY",1)):e<100&&(t.setAttribute("XX",e-90),t.setAttribute("YY",0)),t.id=`enemySquare_${e}`,t.addEventListener("mouseover",i),t.classList="squares",y.enemyBoard.appendChild(t),99===e&&(o("Ready for battle!","Commence attack!"),setTimeout(l,3e3))}},l=()=>{let e=new h("Carrier",5,5),t=new h("Battleship",4,4),r=new h("Cruiser",3,3),n=new h("Submarine",3,3),a=new h("Patrol Boat",2,2);y.enemyCarrier.ship=e,y.enemyBattleship.ship=t,y.enemyCruiser.ship=r,y.enemySubmarine.ship=n,y.enemyPatrolboat.ship=a,c(),d(),p(),A(),m(),y.readyAim=!0,y.readyFire=!0};function c(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=document.getElementById(`enemySquare_${e+3}`),s=document.getElementById(`enemySquare_${e+4}`),i=[];if(i.push(t,r,n,a,s),i.includes(null)||g(y.enemy_taken_squares,i)||t.getAttribute("YY")!==s.getAttribute("YY"))c();else{let e=t,o=r,u=n,l=a,c=s,d=[];d.push(e,o,u,l,c);for(let e=0;e<i.length;e++)y.enemyCarrier.position.push(d[e]),y.enemy_taken_squares.push(d[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=document.getElementById("enemySquare_"+(e-30)),s=document.getElementById("enemySquare_"+(e-40)),i=[];if(i.push(t,r,n,a,s),i.includes(null)||g(y.enemy_taken_squares,i))c();else{let e=t,o=r,u=n,l=a,c=s,d=[];d.push(e,o,u,l,c);for(let e=0;e<i.length;e++)y.enemyCarrier.position.push(d[e]),y.enemy_taken_squares.push(d[e])}}}function d(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=document.getElementById(`enemySquare_${e+3}`),s=[];if(s.push(t,r,n,a),s.includes(null)||g(y.enemy_taken_squares,s)||t.getAttribute("YY")!==a.getAttribute("YY"))d();else{let e=t,i=r,o=n,u=a,l=[];l.push(e,i,o,u);for(let e=0;e<s.length;e++)y.enemyBattleship.position.push(l[e]),y.enemy_taken_squares.push(l[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=document.getElementById("enemySquare_"+(e-30)),s=[];if(s.push(t,r,n,a),s.includes(null)||g(y.enemy_taken_squares,s))d();else{let e=t,i=r,o=n,u=a,l=[];l.push(e,i,o,u);for(let e=0;e<s.length;e++)y.enemyBattleship.position.push(l[e]),y.enemy_taken_squares.push(l[e])}}}function p(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=[];if(a.push(t,r,n),a.includes(null)||g(y.enemy_taken_squares,a)||t.getAttribute("YY")!==n.getAttribute("YY"))p();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)y.enemyCruiser.position.push(o[e]),y.enemy_taken_squares.push(o[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=[];if(a.push(t,r,n),a.includes(null)||g(y.enemy_taken_squares,a))p();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)y.enemyCruiser.position.push(o[e]),y.enemy_taken_squares.push(o[e])}}}function A(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=[];if(a.push(t,r,n),a.includes(null)||g(y.enemy_taken_squares,a)||t.getAttribute("YY")!==n.getAttribute("YY"))A();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)y.enemySubmarine.position.push(o[e]),y.enemy_taken_squares.push(o[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=[];if(a.push(t,r,n),a.includes(null)||g(y.enemy_taken_squares,a))A();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)y.enemySubmarine.position.push(o[e]),y.enemy_taken_squares.push(o[e])}}}function m(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=[];if(n.push(t,r),n.includes(null)||g(y.enemy_taken_squares,n)||t.getAttribute("YY")!==r.getAttribute("YY"))m();else{let e=t,a=r,s=[];s.push(e,a);for(let e=0;e<n.length;e++)y.enemyPatrolboat.position.push(s[e]),y.enemy_taken_squares.push(s[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=[];if(n.push(t,r),n.includes(null)||g(y.enemy_taken_squares,n))m();else{let e=t,a=r,s=[];s.push(e,a);for(let e=0;e<n.length;e++)y.enemyPatrolboat.position.push(s[e]),y.enemy_taken_squares.push(s[e])}}}let y={board:document.getElementById("game_board"),textDisplay:document.getElementById("text_display"),currentFunction:"This is filler",hoizontal_placement:!0,availibleSquares:[],taken_sqaures:[],checkArray:!1,hoverArray:[],readyAim:!1,passedSquare:"This is filler",clearPassedSquare:!1,readyFire:!1,enemyTurn:!1,playerSuccessfulShots:[],enemySuccessfulShots:[],missedShots:[],playerShipsSunk:0,enemyShipsSunk:0,playerCarrier:{spawnCarrier:!0,ship:{},position:[]},playerBattleship:{spawnBattleship:!1,ship:{},position:[]},playerCruiser:{spawnCruiser:!1,ship:{},position:[]},playerSubmarine:{spawnSubmarine:!1,ship:{},position:[]},playerPatrolboat:{spawnPatrolboat:!1,ship:{},position:[]},enemyBoard:document.getElementById("enemy_board"),enemy_taken_squares:[],enemyCarrier:{ship:{},position:[]},enemyBattleship:{ship:{},position:[]},enemyCruiser:{ship:{},position:[]},enemySubmarine:{ship:{},position:[]},enemyPatrolboat:{ship:{},position:[]},playerName:""};class h{constructor(e,t,r){this.name=e,this.hit_points=t,this.length=r}hit(){this.hit_points-=1,0!==this.hit_points&&!1===y.enemyTurn?(o("Checking.....","It's a hit!"),setTimeout((function(){y.enemyTurn=!0,s()}),5500)):0!==this.hit_points&&!0===y.enemyTurn?(o("Waiting for enemy fire.....",`Our ${this.name}'s been hit! Fire back!`),y.enemyTurn=!1,setTimeout((function(){y.readyFire=!0,y.readyAim=!0}),3300)):0===this.hit_points&&!1===y.enemyTurn?(o("Checking.....",`Nice shot! you sunk their ${this.name}!`),setTimeout((function(){y.enemyShipsSunk++,5===y.playerShipsSunk||5===y.enemyShipsSunk?e():(y.enemyTurn=!0,s())}),5500)):0===this.hit_points&&!0===y.enemyTurn&&(o("Waiting for enemy fire.....",`Damn! they sunk our ${this.name}!!`),y.enemyTurn=!1,setTimeout((function(){y.playerShipsSunk++,5===y.playerShipsSunk||5===y.enemyShipsSunk?e():(y.readyFire=!0,y.readyAim=!0)}),3300))}}let g=(e,t)=>e.map((e=>e.id)).some((e=>t.map((e=>e.id)).includes(e))),b=e=>{for(let t=0;t<100;t++)if(!0===y.playerCarrier.spawnCarrier&&!0===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null!==e&&(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`),a=document.getElementById(`square_${t+3}`),s=document.getElementById(`square_${t+4}`);y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n,a,s),e.getAttribute("X")<6&&e.getAttribute("Y")===s.getAttribute("Y")&&!y.hoverArray.includes(null)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==y.hoverArray[0].getAttribute("Y")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===y.playerCarrier.spawnCarrier&&!1===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null!==e&&(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10)),n=document.getElementById("square_"+(t-20)),a=document.getElementById("square_"+(t-30)),s=document.getElementById("square_"+(t-40));y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n,a,s),e.getAttribute("Y")<6&&e.getAttribute("X")===s.getAttribute("X")&&!y.hoverArray.includes(null)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==y.hoverArray[0].getAttribute("X")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===y.playerBattleship.spawnBattleship&&!0===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`),a=document.getElementById(`square_${t+3}`);y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n,a),e.getAttribute("X")<7&&e.getAttribute("Y")===a.getAttribute("Y")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==y.hoverArray[0].getAttribute("Y")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===y.playerBattleship.spawnBattleship&&!1===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10)),n=document.getElementById("square_"+(t-20)),a=document.getElementById("square_"+(t-30));y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n,a),e.getAttribute("Y")<7&&e.getAttribute("X")===a.getAttribute("X")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==y.hoverArray[0].getAttribute("X")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0!==y.playerCruiser.spawnCruiser&&!0!==y.playerSubmarine.spawnSubmarine||!0!==y.hoizontal_placement||e.target.id!==`square_${t}`)if(!0!==y.playerCruiser.spawnCruiser&&!0!==y.playerSubmarine.spawnSubmarine||!1!==y.hoizontal_placement||e.target.id!==`square_${t}`){if(!0===y.playerPatrolboat.spawnPatrolboat&&!0===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`);y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r),e.getAttribute("X")<9&&e.getAttribute("Y")===r.getAttribute("Y")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==y.hoverArray[0].getAttribute("Y")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===y.playerPatrolboat.spawnPatrolboat&&!1===y.hoizontal_placement&&e.target.id===`square_${t}`){!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10));y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r),e.getAttribute("Y")<9&&e.getAttribute("X")===r.getAttribute("X")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==y.hoverArray[0].getAttribute("X")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}}else{!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10)),n=document.getElementById("square_"+(t-20));y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n),e.getAttribute("Y")<8&&e.getAttribute("X")===n.getAttribute("X")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==y.hoverArray[0].getAttribute("X")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else{!0===y.checkArray&&y.hoverArray.forEach((e=>{null===e||y.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`);y.hoverArray=[],y.checkArray=!0,y.hoverArray.push(e,r,n),e.getAttribute("X")<8&&e.getAttribute("Y")===n.getAttribute("Y")&&!g(y.taken_sqaures,y.hoverArray)?y.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):y.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==y.hoverArray[0].getAttribute("Y")||y.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}};var f=r(379),E=r.n(f),B=r(795),C=r.n(B),_=r(569),k=r.n(_),q=r(565),x=r.n(q),v=r(216),S=r.n(v),w=r(589),I=r.n(w),Y=r(299),$={};$.styleTagTransform=I(),$.setAttributes=x(),$.insert=k().bind(null,"head"),$.domAPI=C(),$.insertStyleElement=S(),E()(Y.Z,$),Y.Z&&Y.Z.locals&&Y.Z.locals;let X=()=>{!0===y.hoizontal_placement?y.hoizontal_placement=!1:y.hoizontal_placement=!0},T=(e,t)=>{y.textDisplay.textContent="",y.textDisplay.classList.remove("text_display"),y.textDisplay.classList.add("text_display2"),y.board.removeEventListener("click",y.currentFunction),setTimeout((()=>{y.textDisplay.classList.remove("text_display2"),y.textDisplay.textContent=e,y.textDisplay.classList.add("text_display"),setTimeout((()=>{y.textDisplay.textContent="",y.textDisplay.classList.remove("text_display"),y.textDisplay.classList.add("text_display2"),setTimeout((()=>{y.textDisplay.textContent=t,y.textDisplay.classList.remove("text_display2"),y.textDisplay.classList.add("text_display"),y.board.addEventListener("click",y.currentFunction)}),1e3)}),1600)}),500)},P=()=>{document.getElementById("change_axis").addEventListener("click",X);let e=new h("Carrier",5,5),t=new h("Battleship",4,4),r=new h("Cruiser",3,3),n=new h("Submarine",3,3),a=new h("Patrol Boat",2,2);y.playerCarrier.ship=e,y.playerBattleship.ship=t,y.playerCruiser.ship=r,y.playerSubmarine.ship=n,y.playerPatrolboat.ship=a},z=e=>{if(!0===y.playerCarrier.spawnCarrier)for(let t=0;t<100;t++){if(e.target.getAttribute("X")>5)return;if(e.target.id===`square_${t}`&&!0===y.hoizontal_placement){let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`),a=document.getElementById(`square_${t+3}`),s=document.getElementById(`square_${t+4}`),i=[];if(i.push(e,r,n,a,s),i.includes(null)||e.getAttribute("Y")!==s.getAttribute("Y"))return;for(let e=0;e<i.length;e++)i[e].style.backgroundColor="orange",y.taken_sqaures.push(i[e]),y.playerCarrier.position.push(i[e]);y.playerCarrier.spawnCarrier=!1,T("Carrier has been set!","Please set down your battleship!"),y.currentFunction=j,setTimeout((()=>{y.playerBattleship.spawnBattleship=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===y.hoizontal_placement){if(e.target.getAttribute("Y")>5)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=document.getElementById("square_"+(t-30)),i=document.getElementById("square_"+(t-40)),o=[];if(o.push(r,n,a,s,i),o.includes(null)||r.getAttribute("X")!==i.getAttribute("X"))return;for(let e=0;e<o.length;e++)o[e].style.backgroundColor="orange",y.taken_sqaures.push(o[e]),y.playerCarrier.position.push(o[e]);y.playerCarrier.spawnCarrier=!1,T("Carrier has been set!","Please set down your battleship!"),y.currentFunction=j,setTimeout((()=>{y.playerBattleship.spawnBattleship=!0}),3e3)}}},j=e=>{if(!0===y.playerBattleship.spawnBattleship)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===y.hoizontal_placement){if(e.target.getAttribute("X")>6)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=document.getElementById(`square_${t+2}`),s=document.getElementById(`square_${t+3}`),i=[];if(i.push(r,n,a,s),r.getAttribute("Y")!==s.getAttribute("Y")||g(i,y.taken_sqaures))return;for(let e=0;e<i.length;e++)i[e].style.backgroundColor="rgb(45, 192, 250)",y.taken_sqaures.push(i[e]),y.playerBattleship.position.push(i[e]);y.playerBattleship.spawnBattleship=!1,T("Battleship has been placed!","Please set up your Cruiser..."),y.currentFunction=M,setTimeout((()=>{y.playerCruiser.spawnCruiser=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===y.hoizontal_placement){if(e.target.getAttribute("Y")>6)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=document.getElementById("square_"+(t-30)),i=[];if(i.push(r,n,a,s),r.getAttribute("X")!==s.getAttribute("X")||g(i,y.taken_sqaures))return;for(let e=0;e<i.length;e++)i[e].style.backgroundColor="rgb(45, 192, 250)",y.taken_sqaures.push(i[e]),y.playerBattleship.position.push(i[e]);y.playerBattleship.spawnBattleship=!1,T("Battleship has been placed!","Please set up your Cruiser..."),y.currentFunction=M,setTimeout((()=>{y.playerCruiser.spawnCruiser=!0}),3e3)}},M=e=>{if(!0===y.playerCruiser.spawnCruiser)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===y.hoizontal_placement){if(e.target.getAttribute("X")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=document.getElementById(`square_${t+2}`),s=[];if(s.push(r,n,a),r.getAttribute("Y")!==a.getAttribute("Y")||g(s,y.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(34, 250, 106)",y.taken_sqaures.push(s[e]),y.playerCruiser.position.push(s[e]);y.playerCruiser.spawnCruiser=!1,T("Cruiser is set!","Please submerge your submarine..."),y.currentFunction=D,setTimeout((()=>{y.playerSubmarine.spawnSubmarine=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===y.hoizontal_placement){if(e.target.getAttribute("Y")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=[];if(s.push(r,n,a),r.getAttribute("X")!==a.getAttribute("X")||g(s,y.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(34, 250, 106)",y.taken_sqaures.push(s[e]),y.playerCruiser.position.push(s[e]);y.playerCruiser.spawnCruiser=!1,T("Cruiser is set!","Please submerge your submarine..."),y.currentFunction=D,setTimeout((()=>{y.playerSubmarine.spawnSubmarine=!0}),3e3)}},D=e=>{if(!0===y.playerSubmarine.spawnSubmarine)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===y.hoizontal_placement){if(e.target.getAttribute("X")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=document.getElementById(`square_${t+2}`),s=[];if(s.push(r,n,a),r.getAttribute("Y")!==a.getAttribute("Y")||g(s,y.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(182, 34, 250)",y.taken_sqaures.push(s[e]),y.playerSubmarine.position.push(s[e]);y.playerSubmarine.spawnSubmarine=!1,T("Submarine is submerged!","Please send out your patrol boat.."),y.currentFunction=L,setTimeout((()=>{y.playerPatrolboat.spawnPatrolboat=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===y.hoizontal_placement){if(e.target.getAttribute("Y")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=[];if(s.push(r,n,a),r.getAttribute("X")!==a.getAttribute("X")||g(s,y.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(182, 34, 250)",y.taken_sqaures.push(s[e]),y.playerSubmarine.position.push(s[e]);y.playerSubmarine.spawnSubmarine=!1,T("Submarine is submerged!","Please send out your patrol boat.."),y.currentFunction=L,setTimeout((()=>{y.playerPatrolboat.spawnPatrolboat=!0}),3e3)}},L=e=>{if(!0===y.playerPatrolboat.spawnPatrolboat)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===y.hoizontal_placement){if(e.target.getAttribute("X")>8)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=[];if(a.push(r,n),r.getAttribute("Y")!==n.getAttribute("Y")||g(a,y.taken_sqaures))return;for(let e=0;e<a.length;e++)a[e].style.backgroundColor="rgb(250, 34, 196)",y.taken_sqaures.push(a[e]),y.playerPatrolboat.position.push(a[e]);y.playerPatrolboat.spawnPatrolboat=!1,T("Patrolboat is submerged!","Prepare to engage enemy fleet..."),y.currentFunction=l,setTimeout((()=>{u()}),5e3)}else if(e.target.id===`square_${t}`&&!1===y.hoizontal_placement){if(e.target.getAttribute("Y")>8)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=[];if(a.push(r,n),r.getAttribute("X")!==n.getAttribute("X")||g(a,y.taken_sqaures))return;for(let e=0;e<a.length;e++)a[e].style.backgroundColor="rgb(250, 34, 196)",y.taken_sqaures.push(a[e]),y.playerPatrolboat.position.push(a[e]);y.playerPatrolboat.spawnPatrolboat=!1,T("Patrolboat is submerged!","Prepare to engage enemy fleet..."),y.currentFunction=l,setTimeout((()=>{u()}),5e3)}};document.getElementById("name_enter").addEventListener("keypress",(e=>{if("Enter"===e.key||e.target===y.enterInfo){let e=document.getElementById("player_creation"),t=document.getElementById("name_enter");y.playerName=t.value,""===y.playerName&&(y.playerName="Player 1"),document.getElementById("name_display").textContent=y.playerName,e.style.display="none",P(),(()=>{y.currentFunction=z,y.board.addEventListener("click",y.currentFunction);for(let e=0;e<100;e++){let t=document.createElement("div");e<10?(t.setAttribute("X",e),t.setAttribute("Y",9)):e<20?(t.setAttribute("X",e-10),t.setAttribute("Y",8)):e<30?(t.setAttribute("X",e-20),t.setAttribute("Y",7)):e<40?(t.setAttribute("X",e-30),t.setAttribute("Y",6)):e<50?(t.setAttribute("X",e-40),t.setAttribute("Y",5)):e<60?(t.setAttribute("X",e-50),t.setAttribute("Y",4)):e<70?(t.setAttribute("X",e-60),t.setAttribute("Y",3)):e<80?(t.setAttribute("X",e-70),t.setAttribute("Y",2)):e<90?(t.setAttribute("X",e-80),t.setAttribute("Y",1)):e<100&&(t.setAttribute("X",e-90),t.setAttribute("Y",0)),t.id=`square_${e}`,t.addEventListener("mouseover",b),t.classList.add("squares"),y.board.appendChild(t),y.availibleSquares.push(e)}})(),o("Welcome to battleship!","Begin by placing down your carrier")}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQU94RyxhQUFhLElBQUssSUFDaEJsRixFQUFJLE1BQ2IwTCxFQUFPeEcsYUFBYSxJQUFLbEYsRUFBSSxJQUM3QjBMLEVBQU94RyxhQUFhLElBQUssSUFFM0J3RyxFQUFPMU0sR0FBSyxVQUFVZ0IsSUFDdEIwTCxFQUFPeEMsaUJBQWlCLFlBQWFrRyxHQUNyQzFELEVBQU9KLFVBQVVDLElBQUksV0FDckJyRCxFQUFhaUcsTUFBTXhKLFlBQVkrRyxHQUMvQnhELEVBQWFvQyxpQkFBaUJ4TCxLQUFLa0IsS0dwZ0JuQ3NTLEdBQ0EvSixFQUNFLHlCQUNBLDJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL2JhdHRsZXNoaXAuY3NzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3dlYnBhY2stZGVtby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL3NyYy9lbmRfZ2FtZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvYXR0YWNraW5nX3N5c3RlbS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvZW5lbXlfZmxlZXRfY3JlYXRpb24uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL2JhdHRsZXNoaXBfY3JlYXRpb24uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL2JhdHRsZXNoaXAuY3NzPzVmZDYiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL2JhdHRsZXNoaXAuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL3BsYXllcl9jcmVhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiL3NyYy9pbWFnZXMvYmF0dGxlc2hpcF9ia2cuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSBuZXcgVVJMKFwiL3NyYy9pbWFnZXMvL21ldGFsX2JrZy5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyA9IG5ldyBVUkwoXCIvc3JjL2ltYWdlcy9zZWFfYmtnLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvK01vbm8mZGlzcGxheT1zd2FwKTtcIl0pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCB7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcclxcbiAgbWF4LXdpZHRoOiAxMDAlO1xcclxcbiAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvIE1vbm9cXFwiLCBtb25vc3BhY2U7XFxyXFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcblxcclxcbiNwbGF5ZXJfY3JlYXRpb24ge1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IDA7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOCk7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4jcGxheWVyX2luZm8ge1xcclxcbiAgaGVpZ2h0OiA0MDBweDtcXHJcXG4gIHdpZHRoOiA2MDBweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpO1xcclxcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxyXFxuICBtYXgtd2lkdGg6IDEwMCU7XFxyXFxuICBtYXgtaGVpZ2h0OiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbn1cXHJcXG5cXHJcXG4jdGV4dF9kaXYge1xcclxcbiAgbWFyZ2luLXRvcDogNzBweDtcXHJcXG4gIHdpZHRoOiA1NTBweDtcXHJcXG4gIGhlaWdodDogMTUwcHg7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGNvbG9yOiBncmVlbnllbGxvdztcXHJcXG59XFxyXFxuXFxyXFxuI2J1dHRvbl9kaXYge1xcclxcbiAgcGFkZGluZy10b3A6IDUwcHg7XFxyXFxuICB3aWR0aDogNDAwcHg7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxyXFxufVxcclxcblxcclxcbi5wbGF5QnRucyB7XFxyXFxuICB3aWR0aDogMTAwcHg7XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxuICBiYWNrZ3JvdW5kOiBub25lO1xcclxcbiAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICBjb2xvcjogZ3JlZW55ZWxsb3c7XFxyXFxufVxcclxcblxcclxcbi5wbGF5QnRuczpob3ZlciB7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNwbGF5aW5nX2ZpZWxkIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNwbGF5ZXJfc2lkZSB7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDUwcHg7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIHdpZHRoOiA1MDBweDtcXHJcXG4gIGhlaWdodDogNTUwcHg7XFxyXFxufVxcclxcblxcclxcbiNuYW1lX2Rpc3BsYXkge1xcclxcbiAgZm9udC1zaXplOiAzMHB4O1xcclxcbiAgY29sb3I6IHJnYig0NywgMTc5LCAyNTUpO1xcclxcbn1cXHJcXG5cXHJcXG4jbmFtZV9lbnRlciB7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXHJcXG4gIGNvbG9yOiBncmVlbnllbGxvdztcXHJcXG4gIHBhZGRpbmc6IDRweDtcXHJcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI2VuZW15X2Rpc3BsYXkge1xcclxcbiAgZm9udC1zaXplOiAzMHB4O1xcclxcbiAgY29sb3I6IHJnYigyNTUsIDE2NSwgNDcpO1xcclxcbn1cXHJcXG5cXHJcXG4jZ2FtZV9ib2FyZCB7XFxyXFxuICB3aWR0aDogNTAwcHg7XFxyXFxuICBoZWlnaHQ6IDUwMHB4O1xcclxcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKTtcXHJcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxyXFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbn1cXHJcXG5cXHJcXG4jZW5lbXlfc2lkZSB7XFxyXFxuICBtYXJnaW4tbGVmdDogNTBweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgd2lkdGg6IDUwMHB4O1xcclxcbiAgaGVpZ2h0OiA1NTBweDtcXHJcXG59XFxyXFxuXFxyXFxuI2VuZW15X2JvYXJkIHtcXHJcXG4gIHdpZHRoOiA1MDBweDtcXHJcXG4gIGhlaWdodDogNTAwcHg7XFxyXFxuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fICsgXCIpO1xcclxcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxyXFxufVxcclxcblxcclxcbi5zcXVhcmVzIHtcXHJcXG4gIGhlaWdodDogNTBweDtcXHJcXG4gIHdpZHRoOiA1MHB4O1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxyXFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgZm9udC1zaXplOiA0MHB4O1xcclxcbiAgcGFkZGluZzogMHB4O1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4uc3F1YXJlczpob3ZlciB7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi8qIC5pbWcge1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCIuL2ltYWdlcy9jYXJyaWVyLmpwZ1xcXCIpO1xcclxcbiAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDtcXHJcXG4gIGJhY2tncm91bmQtc2l6ZTogNTBweCAyMDBweDtcXHJcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxufSAqL1xcclxcblxcclxcbiN0ZXh0X2Rpc3BsYXkge1xcclxcbiAgaGVpZ2h0OiAzNHB4O1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgd2lkdGg6IDU1MHB4O1xcclxcbiAgY29sb3I6IHJnYig0LCAxODksIDQpO1xcclxcbiAgZm9udC1zaXplOiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4vKiBOT1QgTVkgQU5JTUFUSU9OICovXFxyXFxuLnRleHRfZGlzcGxheSB7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuOyAvKiBFbnN1cmVzIHRoZSBjb250ZW50IGlzIG5vdCByZXZlYWxlZCB1bnRpbCB0aGUgYW5pbWF0aW9uICovXFxyXFxuICBib3JkZXItcmlnaHQ6IDAuMTVlbSBzb2xpZCBvcmFuZ2U7IC8qIFRoZSB0eXB3cml0ZXIgY3Vyc29yICovXFxyXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwOyAvKiBLZWVwcyB0aGUgY29udGVudCBvbiBhIHNpbmdsZSBsaW5lICovXFxyXFxuICBsZXR0ZXItc3BhY2luZzogMC4xNWVtOyAvKiBBZGp1c3QgYXMgbmVlZGVkICovXFxyXFxuICBhbmltYXRpb246IHR5cGluZyAxcyBzdGVwcyg0MCwgZW5kKSwgYmxpbmstY2FyZXQgMC43NXMgc3RlcC1lbmQgaW5maW5pdGU7XFxyXFxufVxcclxcblxcclxcbi50ZXh0X2Rpc3BsYXkyIHtcXHJcXG4gIGhlaWdodDogMTVweDtcXHJcXG4gIHdpZHRoOiAwcHg7XFxyXFxufVxcclxcblxcclxcbi8qIFRoZSB0eXBpbmcgZWZmZWN0ICovXFxyXFxuQGtleWZyYW1lcyB0eXBpbmcge1xcclxcbiAgZnJvbSB7XFxyXFxuICAgIHdpZHRoOiAwJTtcXHJcXG4gIH1cXHJcXG4gIHRvIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi8qIFRoZSB0eXBld3JpdGVyIGN1cnNvciBlZmZlY3QgKi9cXHJcXG5Aa2V5ZnJhbWVzIGJsaW5rLWNhcmV0IHtcXHJcXG4gIGZyb20sXFxyXFxuICB0byB7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICB9XFxyXFxuICA1MCUge1xcclxcbiAgICBib3JkZXItY29sb3I6IG9yYW5nZTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2JhdHRsZXNoaXAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0UseURBQXFEO0VBQ3JELGVBQWU7RUFDZixhQUFhO0VBQ2IscUNBQXFDO0VBQ3JDLDRCQUE0QjtFQUM1QixzQkFBc0I7RUFDdEIsVUFBVTtFQUNWLFNBQVM7QUFDWDs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLE1BQU07RUFDTixvQ0FBb0M7RUFDcEMsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsWUFBWTtFQUNaLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLHlEQUFpRDtFQUNqRCw0QkFBNEI7RUFDNUIsc0JBQXNCO0VBQ3RCLGVBQWU7RUFDZixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsWUFBWTtFQUNaLGFBQWE7RUFDYixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixzQkFBc0I7RUFDdEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLFlBQVk7RUFDWixhQUFhO0VBQ2IsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0UsWUFBWTtFQUNaLFlBQVk7RUFDWixnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDZCQUE2QjtFQUM3QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLFlBQVk7RUFDWixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxlQUFlO0VBQ2Ysd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLHVCQUF1QjtFQUN2QixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxlQUFlO0VBQ2Ysd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsYUFBYTtFQUNiLGVBQWU7RUFDZix5REFBOEM7RUFDOUMsc0JBQXNCO0VBQ3RCLDRCQUE0QjtBQUM5Qjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsWUFBWTtFQUNaLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFlBQVk7RUFDWixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLGFBQWE7RUFDYixlQUFlO0VBQ2YseURBQThDO0VBQzlDLDRCQUE0QjtFQUM1QixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osV0FBVztFQUNYLHVCQUF1QjtFQUN2QixzQkFBc0I7RUFDdEIsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixZQUFZO0VBQ1osWUFBWTtBQUNkOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTs7Ozs7R0FLRzs7QUFFSDtFQUNFLFlBQVk7RUFDWixTQUFTO0VBQ1QsWUFBWTtFQUNaLHFCQUFxQjtFQUNyQixlQUFlO0FBQ2pCOztBQUVBLHFCQUFxQjtBQUNyQjtFQUNFLGdCQUFnQixFQUFFLDREQUE0RDtFQUM5RSxpQ0FBaUMsRUFBRSx5QkFBeUI7RUFDNUQsbUJBQW1CLEVBQUUsdUNBQXVDO0VBQzVELHNCQUFzQixFQUFFLHFCQUFxQjtFQUM3Qyx3RUFBd0U7QUFDMUU7O0FBRUE7RUFDRSxZQUFZO0VBQ1osVUFBVTtBQUNaOztBQUVBLHNCQUFzQjtBQUN0QjtFQUNFO0lBQ0UsU0FBUztFQUNYO0VBQ0E7SUFDRSxXQUFXO0VBQ2I7QUFDRjs7QUFFQSxpQ0FBaUM7QUFDakM7RUFDRTs7SUFFRSx5QkFBeUI7RUFDM0I7RUFDQTtJQUNFLG9CQUFvQjtFQUN0QjtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90bytNb25vJmRpc3BsYXk9c3dhcFxcXCIpO1xcclxcblxcclxcbmh0bWwge1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9zcmMvaW1hZ2VzL2JhdHRsZXNoaXBfYmtnLmpwZyk7XFxyXFxuICBtYXgtd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDEwMHZoO1xcclxcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG8gTW9ub1xcXCIsIG1vbm9zcGFjZTtcXHJcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuXFxyXFxuI3BsYXllcl9jcmVhdGlvbiB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHRvcDogMDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNwbGF5ZXJfaW5mbyB7XFxyXFxuICBoZWlnaHQ6IDQwMHB4O1xcclxcbiAgd2lkdGg6IDYwMHB4O1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvc3JjL2ltYWdlcy8vbWV0YWxfYmtnLmpwZyk7XFxyXFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXHJcXG4gIG1heC13aWR0aDogMTAwJTtcXHJcXG4gIG1heC1oZWlnaHQ6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcblxcclxcbiN0ZXh0X2RpdiB7XFxyXFxuICBtYXJnaW4tdG9wOiA3MHB4O1xcclxcbiAgd2lkdGg6IDU1MHB4O1xcclxcbiAgaGVpZ2h0OiAxNTBweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgY29sb3I6IGdyZWVueWVsbG93O1xcclxcbn1cXHJcXG5cXHJcXG4jYnV0dG9uX2RpdiB7XFxyXFxuICBwYWRkaW5nLXRvcDogNTBweDtcXHJcXG4gIHdpZHRoOiA0MDBweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXHJcXG59XFxyXFxuXFxyXFxuLnBsYXlCdG5zIHtcXHJcXG4gIHdpZHRoOiAxMDBweDtcXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxyXFxuICBmb250LXNpemU6IDIwcHg7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIGNvbG9yOiBncmVlbnllbGxvdztcXHJcXG59XFxyXFxuXFxyXFxuLnBsYXlCdG5zOmhvdmVyIHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuI3BsYXlpbmdfZmllbGQge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuI3BsYXllcl9zaWRlIHtcXHJcXG4gIG1hcmdpbi1yaWdodDogNTBweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgd2lkdGg6IDUwMHB4O1xcclxcbiAgaGVpZ2h0OiA1NTBweDtcXHJcXG59XFxyXFxuXFxyXFxuI25hbWVfZGlzcGxheSB7XFxyXFxuICBmb250LXNpemU6IDMwcHg7XFxyXFxuICBjb2xvcjogcmdiKDQ3LCAxNzksIDI1NSk7XFxyXFxufVxcclxcblxcclxcbiNuYW1lX2VudGVyIHtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcclxcbiAgY29sb3I6IGdyZWVueWVsbG93O1xcclxcbiAgcGFkZGluZzogNHB4O1xcclxcbiAgZm9udC1zaXplOiAxcmVtO1xcclxcbn1cXHJcXG5cXHJcXG4jZW5lbXlfZGlzcGxheSB7XFxyXFxuICBmb250LXNpemU6IDMwcHg7XFxyXFxuICBjb2xvcjogcmdiKDI1NSwgMTY1LCA0Nyk7XFxyXFxufVxcclxcblxcclxcbiNnYW1lX2JvYXJkIHtcXHJcXG4gIHdpZHRoOiA1MDBweDtcXHJcXG4gIGhlaWdodDogNTAwcHg7XFxyXFxuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL3NyYy9pbWFnZXMvc2VhX2JrZy5qcGcpO1xcclxcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXHJcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxufVxcclxcblxcclxcbiNlbmVteV9zaWRlIHtcXHJcXG4gIG1hcmdpbi1sZWZ0OiA1MHB4O1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICB3aWR0aDogNTAwcHg7XFxyXFxuICBoZWlnaHQ6IDU1MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jZW5lbXlfYm9hcmQge1xcclxcbiAgd2lkdGg6IDUwMHB4O1xcclxcbiAgaGVpZ2h0OiA1MDBweDtcXHJcXG4gIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvc3JjL2ltYWdlcy9zZWFfYmtnLmpwZyk7XFxyXFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnNxdWFyZXMge1xcclxcbiAgaGVpZ2h0OiA1MHB4O1xcclxcbiAgd2lkdGg6IDUwcHg7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICBmb250LXNpemU6IDQwcHg7XFxyXFxuICBwYWRkaW5nOiAwcHg7XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblxcclxcbi5zcXVhcmVzOmhvdmVyIHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLyogLmltZyB7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcIi4vaW1hZ2VzL2NhcnJpZXIuanBnXFxcIik7XFxyXFxuICBiYWNrZ3JvdW5kLWF0dGFjaG1lbnQ6IGZpeGVkO1xcclxcbiAgYmFja2dyb3VuZC1zaXplOiA1MHB4IDIwMHB4O1xcclxcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG59ICovXFxyXFxuXFxyXFxuI3RleHRfZGlzcGxheSB7XFxyXFxuICBoZWlnaHQ6IDM0cHg7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICB3aWR0aDogNTUwcHg7XFxyXFxuICBjb2xvcjogcmdiKDQsIDE4OSwgNCk7XFxyXFxuICBmb250LXNpemU6IDIwcHg7XFxyXFxufVxcclxcblxcclxcbi8qIE5PVCBNWSBBTklNQVRJT04gKi9cXHJcXG4udGV4dF9kaXNwbGF5IHtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47IC8qIEVuc3VyZXMgdGhlIGNvbnRlbnQgaXMgbm90IHJldmVhbGVkIHVudGlsIHRoZSBhbmltYXRpb24gKi9cXHJcXG4gIGJvcmRlci1yaWdodDogMC4xNWVtIHNvbGlkIG9yYW5nZTsgLyogVGhlIHR5cHdyaXRlciBjdXJzb3IgKi9cXHJcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7IC8qIEtlZXBzIHRoZSBjb250ZW50IG9uIGEgc2luZ2xlIGxpbmUgKi9cXHJcXG4gIGxldHRlci1zcGFjaW5nOiAwLjE1ZW07IC8qIEFkanVzdCBhcyBuZWVkZWQgKi9cXHJcXG4gIGFuaW1hdGlvbjogdHlwaW5nIDFzIHN0ZXBzKDQwLCBlbmQpLCBibGluay1jYXJldCAwLjc1cyBzdGVwLWVuZCBpbmZpbml0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLnRleHRfZGlzcGxheTIge1xcclxcbiAgaGVpZ2h0OiAxNXB4O1xcclxcbiAgd2lkdGg6IDBweDtcXHJcXG59XFxyXFxuXFxyXFxuLyogVGhlIHR5cGluZyBlZmZlY3QgKi9cXHJcXG5Aa2V5ZnJhbWVzIHR5cGluZyB7XFxyXFxuICBmcm9tIHtcXHJcXG4gICAgd2lkdGg6IDAlO1xcclxcbiAgfVxcclxcbiAgdG8ge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuLyogVGhlIHR5cGV3cml0ZXIgY3Vyc29yIGVmZmVjdCAqL1xcclxcbkBrZXlmcmFtZXMgYmxpbmstY2FyZXQge1xcclxcbiAgZnJvbSxcXHJcXG4gIHRvIHtcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gIH1cXHJcXG4gIDUwJSB7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogb3JhbmdlO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1tfaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBtb2R1bGVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2kyXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCJpbXBvcnQgeyBzdGF0ZUNvbnRyb2wgfSBmcm9tIFwiLi9iYXR0bGVzaGlwX2NyZWF0aW9uXCI7XHJcbmltcG9ydCB7IHNoaXBIaXRNZXNzYWdlIH0gZnJvbSBcIi4vZW5lbXlfZmxlZXRfY3JlYXRpb25cIjtcclxuXHJcbmxldCBjaGVja1NoaXBzU2FuayA9ICgpID0+IHtcclxuICBpZiAoc3RhdGVDb250cm9sLmVuZW15U2hpcHNTdW5rID09PSA1KSB7XHJcbiAgICBzdGF0ZUNvbnRyb2wucmVhZHlBaW0gPSBmYWxzZTtcclxuICAgIHN0YXRlQ29udHJvbC5yZWFkeUZpcmUgPSBmYWxzZTtcclxuICAgIHN0YXRlQ29udHJvbC5lbmVteVR1cm4gPSBmYWxzZTtcclxuICAgIHNoaXBIaXRNZXNzYWdlKFxyXG4gICAgICBgQ29uZ3JhdHVsYXRpb25zICR7c3RhdGVDb250cm9sLnBsYXllck5hbWV9LCB5b3UgaGF2ZSBzYW5rIGFsbCBlbmVteSBzaGlwcyFgLFxyXG4gICAgICBcIlBsYXkgYWdhaW4/XCJcclxuICAgICk7XHJcbiAgfSBlbHNlIGlmIChzdGF0ZUNvbnRyb2wucGxheWVyU2hpcHNTdW5rID09PSA1KSB7XHJcbiAgICBzdGF0ZUNvbnRyb2wucmVhZHlBaW0gPSBmYWxzZTtcclxuICAgIHN0YXRlQ29udHJvbC5yZWFkeUZpcmUgPSBmYWxzZTtcclxuICAgIHN0YXRlQ29udHJvbC5lbmVteVR1cm4gPSBmYWxzZTtcclxuICAgIHNoaXBIaXRNZXNzYWdlKFxyXG4gICAgICBgQ29uZ3JhdHVsYXRpb25zICR7c3RhdGVDb250cm9sLnBsYXllck5hbWV9LCB5b3UgbG9zdCBzcGVjdGFjdWxhcmx5IWAsXHJcbiAgICAgIFwiUGxheSBhZ2Fpbj9cIlxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5sZXQgcmVzdGFydCA9ICgpID0+IHtcclxuICBsb2NhdGlvbi5yZWxvYWQoKTtcclxufTtcclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN0YXJ0XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCByZXN0YXJ0KTtcclxuXHJcbmV4cG9ydCB7IGNoZWNrU2hpcHNTYW5rIH07XHJcbiIsImltcG9ydCB7IHN0YXRlQ29udHJvbCB9IGZyb20gXCIuL2JhdHRsZXNoaXBfY3JlYXRpb25cIjtcclxuaW1wb3J0IHsgY2hlY2tTaGlwc1NhbmsgfSBmcm9tIFwiLi9lbmRfZ2FtZVwiO1xyXG5cclxuZnVuY3Rpb24gc2V0Q29sb3JzKHRhcmdldFNxdWFyZSwgY29sb3IpIHtcclxuICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIHRhcmdldFNxdWFyZS50ZXh0Q29udGVudCA9IFwiWFwiO1xyXG4gICAgdGFyZ2V0U3F1YXJlLnN0eWxlLmNvbG9yID0gXCJibGFja1wiO1xyXG4gICAgc3RhdGVDb250cm9sLnBsYXllclN1Y2Nlc3NmdWxTaG90cy5wdXNoKHRhcmdldFNxdWFyZSk7XHJcbiAgICB0YXJnZXRTcXVhcmUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XHJcbiAgfSwgMjUwMCk7XHJcbn1cclxuXHJcbmxldCBhdHRhY2tFbmVteSA9IChlKSA9PiB7XHJcbiAgbGV0IHRhcmdldFNxdWFyZSA9IGUudGFyZ2V0O1xyXG4gIGlmIChcclxuICAgIHN0YXRlQ29udHJvbC5yZWFkeUFpbSA9PT0gdHJ1ZSAmJlxyXG4gICAgc3RhdGVDb250cm9sLnJlYWR5RmlyZSA9PT0gdHJ1ZSAmJlxyXG4gICAgIXN0YXRlQ29udHJvbC5taXNzZWRTaG90cy5pbmNsdWRlcyh0YXJnZXRTcXVhcmUpICYmXHJcbiAgICAhc3RhdGVDb250cm9sLnBsYXllclN1Y2Nlc3NmdWxTaG90cy5pbmNsdWRlcyh0YXJnZXRTcXVhcmUpICYmXHJcbiAgICBzdGF0ZUNvbnRyb2wuZW5lbXlfdGFrZW5fc3F1YXJlcy5pbmNsdWRlcyh0YXJnZXRTcXVhcmUpXHJcbiAgKSB7XHJcbiAgICBzdGF0ZUNvbnRyb2wucmVhZHlBaW0gPSBmYWxzZTtcclxuICAgIHN0YXRlQ29udHJvbC5yZWFkeUZpcmUgPSBmYWxzZTtcclxuICAgIGlmIChzdGF0ZUNvbnRyb2wuZW5lbXlDYXJyaWVyLnBvc2l0aW9uLmluY2x1ZGVzKHRhcmdldFNxdWFyZSkpIHtcclxuICAgICAgc2V0Q29sb3JzKHRhcmdldFNxdWFyZSwgXCJvcmFuZ2VcIik7XHJcbiAgICAgIHN0YXRlQ29udHJvbC5lbmVteUNhcnJpZXIuc2hpcC5oaXQoKTtcclxuICAgIH0gZWxzZSBpZiAoc3RhdGVDb250cm9sLmVuZW15QmF0dGxlc2hpcC5wb3NpdGlvbi5pbmNsdWRlcyh0YXJnZXRTcXVhcmUpKSB7XHJcbiAgICAgIHNldENvbG9ycyh0YXJnZXRTcXVhcmUsIFwicmdiKDQ1LCAxOTIsIDI1MClcIik7XHJcbiAgICAgIHN0YXRlQ29udHJvbC5lbmVteUJhdHRsZXNoaXAuc2hpcC5oaXQoKTtcclxuICAgIH0gZWxzZSBpZiAoc3RhdGVDb250cm9sLmVuZW15Q3J1aXNlci5wb3NpdGlvbi5pbmNsdWRlcyh0YXJnZXRTcXVhcmUpKSB7XHJcbiAgICAgIHNldENvbG9ycyh0YXJnZXRTcXVhcmUsIFwicmdiKDM0LCAyNTAsIDEwNilcIik7XHJcbiAgICAgIHN0YXRlQ29udHJvbC5lbmVteUNydWlzZXIuc2hpcC5oaXQoKTtcclxuICAgIH0gZWxzZSBpZiAoc3RhdGVDb250cm9sLmVuZW15U3VibWFyaW5lLnBvc2l0aW9uLmluY2x1ZGVzKHRhcmdldFNxdWFyZSkpIHtcclxuICAgICAgc2V0Q29sb3JzKHRhcmdldFNxdWFyZSwgXCJyZ2IoMTgyLCAzNCwgMjUwKVwiKTtcclxuICAgICAgc3RhdGVDb250cm9sLmVuZW15U3VibWFyaW5lLnNoaXAuaGl0KCk7XHJcbiAgICB9IGVsc2UgaWYgKHN0YXRlQ29udHJvbC5lbmVteVBhdHJvbGJvYXQucG9zaXRpb24uaW5jbHVkZXModGFyZ2V0U3F1YXJlKSkge1xyXG4gICAgICBzZXRDb2xvcnModGFyZ2V0U3F1YXJlLCBcInJnYigyNTAsIDM0LCAxOTYpXCIpO1xyXG4gICAgICBzdGF0ZUNvbnRyb2wuZW5lbXlQYXRyb2xib2F0LnNoaXAuaGl0KCk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChcclxuICAgIHN0YXRlQ29udHJvbC5yZWFkeUFpbSA9PT0gdHJ1ZSAmJlxyXG4gICAgc3RhdGVDb250cm9sLnJlYWR5RmlyZSA9PT0gdHJ1ZSAmJlxyXG4gICAgIXN0YXRlQ29udHJvbC5wbGF5ZXJTdWNjZXNzZnVsU2hvdHMuaW5jbHVkZXModGFyZ2V0U3F1YXJlKSAmJlxyXG4gICAgIXN0YXRlQ29udHJvbC5taXNzZWRTaG90cy5pbmNsdWRlcyh0YXJnZXRTcXVhcmUpXHJcbiAgKSB7XHJcbiAgICBzdGF0ZUNvbnRyb2wucmVhZHlBaW0gPSBmYWxzZTtcclxuICAgIHN0YXRlQ29udHJvbC5yZWFkeUZpcmUgPSBmYWxzZTtcclxuICAgIHN0YXRlQ29udHJvbC5taXNzZWRTaG90cy5wdXNoKHRhcmdldFNxdWFyZSk7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uIHNldENvbG9yKCkge1xyXG4gICAgICB0YXJnZXRTcXVhcmUudGV4dENvbnRlbnQgPSBcIlhcIjtcclxuICAgIH0sIDI1MDApO1xyXG4gICAgc2hpcEhpdE1lc3NhZ2UoXCJDaGVja2luZy4uLi4uXCIsIFwiV2UgbWlzc2VkIVwiKTtcclxuICAgIHN0YXRlQ29udHJvbC5lbmVteVR1cm4gPSB0cnVlO1xyXG4gICAgc2V0VGltZW91dChlbmVteUF0dGFjaywgNjQwMCk7XHJcbiAgfVxyXG59O1xyXG5cclxubGV0IGVuZW15QXR0YWNrID0gKCkgPT4ge1xyXG4gIGNvbnN0IGdldFRhcmdldElkID0gKCkgPT4ge1xyXG4gICAgbGV0IHJhbmRvbU51bSA9IE1hdGguZmxvb3IoXHJcbiAgICAgIE1hdGgucmFuZG9tKCkgKiBzdGF0ZUNvbnRyb2wuYXZhaWxpYmxlU3F1YXJlcy5sZW5ndGhcclxuICAgICk7XHJcbiAgICBsZXQgcGlja2VkU3F1YXJlID0gc3RhdGVDb250cm9sLmF2YWlsaWJsZVNxdWFyZXNbcmFuZG9tTnVtXTtcclxuICAgIHN0YXRlQ29udHJvbC5hdmFpbGlibGVTcXVhcmVzLnNwbGljZShyYW5kb21OdW0sIDEpO1xyXG4gICAgcmV0dXJuIHBpY2tlZFNxdWFyZTtcclxuICB9O1xyXG5cclxuICBjb25zdCB0YXJnZXRpZCA9IGdldFRhcmdldElkKCk7XHJcbiAgLy8gbGV0IHRhcmdldGlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKTtcclxuICBsZXQgdGFyZ2V0U3F1YXJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke3RhcmdldGlkfWApO1xyXG4gIGlmIChcclxuICAgIHN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzLmluY2x1ZGVzKHRhcmdldFNxdWFyZSkgJiZcclxuICAgICFzdGF0ZUNvbnRyb2wuZW5lbXlTdWNjZXNzZnVsU2hvdHMuaW5jbHVkZXModGFyZ2V0U3F1YXJlKSAmJlxyXG4gICAgIXN0YXRlQ29udHJvbC5taXNzZWRTaG90cy5pbmNsdWRlcyh0YXJnZXRTcXVhcmUpXHJcbiAgKSB7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uIHNldENvbG9yKCkge1xyXG4gICAgICB0YXJnZXRTcXVhcmUudGV4dENvbnRlbnQgPSBcIlhcIjtcclxuICAgICAgdGFyZ2V0U3F1YXJlLnN0eWxlLmNvbG9yID0gXCJibGFja1wiO1xyXG4gICAgICBzdGF0ZUNvbnRyb2wucmVhZHlBaW0gPSB0cnVlO1xyXG4gICAgICBzdGF0ZUNvbnRyb2wucmVhZHlGaXJlID0gdHJ1ZTtcclxuICAgICAgc3RhdGVDb250cm9sLmVuZW15U3VjY2Vzc2Z1bFNob3RzLnB1c2godGFyZ2V0U3F1YXJlKTtcclxuICAgIH0sIDQwMDApO1xyXG4gICAgaWYgKHN0YXRlQ29udHJvbC5wbGF5ZXJDYXJyaWVyLnBvc2l0aW9uLmluY2x1ZGVzKHRhcmdldFNxdWFyZSkpIHtcclxuICAgICAgc3RhdGVDb250cm9sLnBsYXllckNhcnJpZXIuc2hpcC5oaXQoKTtcclxuICAgIH0gZWxzZSBpZiAoc3RhdGVDb250cm9sLnBsYXllckJhdHRsZXNoaXAucG9zaXRpb24uaW5jbHVkZXModGFyZ2V0U3F1YXJlKSkge1xyXG4gICAgICBzdGF0ZUNvbnRyb2wucGxheWVyQmF0dGxlc2hpcC5zaGlwLmhpdCgpO1xyXG4gICAgfSBlbHNlIGlmIChzdGF0ZUNvbnRyb2wucGxheWVyQ3J1aXNlci5wb3NpdGlvbi5pbmNsdWRlcyh0YXJnZXRTcXVhcmUpKSB7XHJcbiAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJDcnVpc2VyLnNoaXAuaGl0KCk7XHJcbiAgICB9IGVsc2UgaWYgKHN0YXRlQ29udHJvbC5wbGF5ZXJTdWJtYXJpbmUucG9zaXRpb24uaW5jbHVkZXModGFyZ2V0U3F1YXJlKSkge1xyXG4gICAgICBzdGF0ZUNvbnRyb2wucGxheWVyU3VibWFyaW5lLnNoaXAuaGl0KCk7XHJcbiAgICB9IGVsc2UgaWYgKHN0YXRlQ29udHJvbC5wbGF5ZXJQYXRyb2xib2F0LnBvc2l0aW9uLmluY2x1ZGVzKHRhcmdldFNxdWFyZSkpIHtcclxuICAgICAgc3RhdGVDb250cm9sLnBsYXllclBhdHJvbGJvYXQuc2hpcC5oaXQoKTtcclxuICAgIH1cclxuICB9IGVsc2UgaWYgKFxyXG4gICAgc3RhdGVDb250cm9sLmVuZW15U3VjY2Vzc2Z1bFNob3RzLmluY2x1ZGVzKHRhcmdldFNxdWFyZSkgfHxcclxuICAgIHN0YXRlQ29udHJvbC5taXNzZWRTaG90cy5pbmNsdWRlcyh0YXJnZXRTcXVhcmUpXHJcbiAgKSB7XHJcbiAgICBlbmVteUF0dGFjaygpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzaGlwSGl0TWVzc2FnZShcIldhaXRpbmcgb24gdGhlIGVuZW15Li4uLi5cIiwgXCJUaGV5IG1pc3NlZCEgRmlyZSBhd2F5IVwiKTtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBzdGF0ZUNvbnRyb2wubWlzc2VkU2hvdHMucHVzaCh0YXJnZXRTcXVhcmUpO1xyXG4gICAgICB0YXJnZXRTcXVhcmUudGV4dENvbnRlbnQgPSBcIlhcIjtcclxuICAgICAgc3RhdGVDb250cm9sLnJlYWR5QWltID0gdHJ1ZTtcclxuICAgICAgc3RhdGVDb250cm9sLnJlYWR5RmlyZSA9IHRydWU7XHJcbiAgICAgIHN0YXRlQ29udHJvbC5lbmVteVR1cm4gPSBmYWxzZTtcclxuICAgIH0sIDE5MDApO1xyXG4gIH1cclxufTtcclxuXHJcbmxldCBhaW1BdEVuZW15ID0gKGUpID0+IHtcclxuICBpZiAoXHJcbiAgICBzdGF0ZUNvbnRyb2wucmVhZHlBaW0gPT09IHRydWUgJiZcclxuICAgICFzdGF0ZUNvbnRyb2wucGxheWVyU3VjY2Vzc2Z1bFNob3RzLmluY2x1ZGVzKGUudGFyZ2V0KSAmJlxyXG4gICAgIXN0YXRlQ29udHJvbC5taXNzZWRTaG90cy5pbmNsdWRlcyhlLnRhcmdldClcclxuICApIHtcclxuICAgIGlmIChcclxuICAgICAgc3RhdGVDb250cm9sLmNsZWFyUGFzc2VkU3F1YXJlID09PSB0cnVlICYmXHJcbiAgICAgICFzdGF0ZUNvbnRyb2wucGxheWVyU3VjY2Vzc2Z1bFNob3RzLmluY2x1ZGVzKHN0YXRlQ29udHJvbC5wYXNzZWRTcXVhcmUpXHJcbiAgICApIHtcclxuICAgICAgc3RhdGVDb250cm9sLnBhc3NlZFNxdWFyZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIlwiO1xyXG4gICAgfVxyXG4gICAgc3RhdGVDb250cm9sLnBhc3NlZFNxdWFyZSA9IGUudGFyZ2V0O1xyXG4gICAgZS50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJvcmFuZ2VcIjtcclxuICAgIHN0YXRlQ29udHJvbC5jbGVhclBhc3NlZFNxdWFyZSA9IHRydWU7XHJcbiAgfVxyXG59O1xyXG5cclxubGV0IHNoaXBIaXRNZXNzYWdlID0gKHNoaXBIYXNCZWVuU2V0TWVzc2FnZSwgbmV4dFNoaXBUb0JlU2V0TWVzc2FnZSkgPT4ge1xyXG4gIHN0YXRlQ29udHJvbC50ZXh0RGlzcGxheS50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LmNsYXNzTGlzdC5yZW1vdmUoXCJ0ZXh0X2Rpc3BsYXlcIik7XHJcbiAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LmNsYXNzTGlzdC5hZGQoXCJ0ZXh0X2Rpc3BsYXkyXCIpO1xyXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LmNsYXNzTGlzdC5yZW1vdmUoXCJ0ZXh0X2Rpc3BsYXkyXCIpO1xyXG4gICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LnRleHRDb250ZW50ID0gc2hpcEhhc0JlZW5TZXRNZXNzYWdlO1xyXG4gICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LmNsYXNzTGlzdC5hZGQoXCJ0ZXh0X2Rpc3BsYXlcIik7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LmNsYXNzTGlzdC5yZW1vdmUoXCJ0ZXh0X2Rpc3BsYXlcIik7XHJcbiAgICAgIHN0YXRlQ29udHJvbC50ZXh0RGlzcGxheS5jbGFzc0xpc3QuYWRkKFwidGV4dF9kaXNwbGF5MlwiKTtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LnRleHRDb250ZW50ID0gbmV4dFNoaXBUb0JlU2V0TWVzc2FnZTtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wudGV4dERpc3BsYXkuY2xhc3NMaXN0LnJlbW92ZShcInRleHRfZGlzcGxheTJcIik7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LmNsYXNzTGlzdC5hZGQoXCJ0ZXh0X2Rpc3BsYXlcIik7XHJcbiAgICAgIH0sIDEwMDApO1xyXG4gICAgfSwgMTYwMCk7XHJcbiAgfSwgNTAwKTtcclxufTtcclxuXHJcbmV4cG9ydCB7IGF0dGFja0VuZW15LCBlbmVteUF0dGFjaywgYWltQXRFbmVteSwgc2hpcEhpdE1lc3NhZ2UgfTtcclxuIiwiaW1wb3J0IHtcclxuICBzaGlwRmFjdG9yeSxcclxuICBzdGF0ZUNvbnRyb2wsXHJcbiAgZmluZFNoYXJlZEVsZW1lbnRzLFxyXG59IGZyb20gXCIuL2JhdHRsZXNoaXBfY3JlYXRpb25cIjtcclxuaW1wb3J0IHtcclxuICBhdHRhY2tFbmVteSxcclxuICBlbmVteUF0dGFjayxcclxuICBhaW1BdEVuZW15LFxyXG4gIHNoaXBIaXRNZXNzYWdlLFxyXG59IGZyb20gXCIuL2F0dGFja2luZ19zeXN0ZW1cIjtcclxuXHJcbmxldCBjcmVhdGVFbmVteUdyaWQgPSAoKSA9PiB7XHJcbiAgc3RhdGVDb250cm9sLmVuZW15Qm9hcmQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGF0dGFja0VuZW15KTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XHJcbiAgICBsZXQgc3F1YXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGlmIChpIDwgMTApIHtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIlhYXCIsIGkpO1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWVlcIiwgOSk7XHJcbiAgICB9IGVsc2UgaWYgKGkgPCAyMCkge1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWFhcIiwgaSAtIDEwKTtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIllZXCIsIDgpO1xyXG4gICAgfSBlbHNlIGlmIChpIDwgMzApIHtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIlhYXCIsIGkgLSAyMCk7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJZXCIsIDcpO1xyXG4gICAgfSBlbHNlIGlmIChpIDwgNDApIHtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIlhYXCIsIGkgLSAzMCk7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJZWVwiLCA2KTtcclxuICAgIH0gZWxzZSBpZiAoaSA8IDUwKSB7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJYWFwiLCBpIC0gNDApO1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWVlcIiwgNSk7XHJcbiAgICB9IGVsc2UgaWYgKGkgPCA2MCkge1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWFhcIiwgaSAtIDUwKTtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIllZXCIsIDQpO1xyXG4gICAgfSBlbHNlIGlmIChpIDwgNzApIHtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIlhYXCIsIGkgLSA2MCk7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJZWVwiLCAzKTtcclxuICAgIH0gZWxzZSBpZiAoaSA8IDgwKSB7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJYWFwiLCBpIC0gNzApO1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWVlcIiwgMik7XHJcbiAgICB9IGVsc2UgaWYgKGkgPCA5MCkge1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWFhcIiwgaSAtIDgwKTtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIllZXCIsIDEpO1xyXG4gICAgfSBlbHNlIGlmIChpIDwgMTAwKSB7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJYWFwiLCBpIC0gOTApO1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWVlcIiwgMCk7XHJcbiAgICB9XHJcbiAgICBzcXVhcmUuaWQgPSBgZW5lbXlTcXVhcmVfJHtpfWA7XHJcbiAgICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBhaW1BdEVuZW15KTtcclxuICAgIHNxdWFyZS5jbGFzc0xpc3QgPSBcInNxdWFyZXNcIjtcclxuICAgIHN0YXRlQ29udHJvbC5lbmVteUJvYXJkLmFwcGVuZENoaWxkKHNxdWFyZSk7XHJcbiAgICBpZiAoaSA9PT0gOTkpIHtcclxuICAgICAgc2hpcEhpdE1lc3NhZ2UoXCJSZWFkeSBmb3IgYmF0dGxlIVwiLCBcIkNvbW1lbmNlIGF0dGFjayFcIik7XHJcbiAgICAgIHNldFRpbWVvdXQoY3JlYXRlRW5lbXlGbGVldCwgMzAwMCk7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxubGV0IGNyZWF0ZUVuZW15RmxlZXQgPSAoKSA9PiB7XHJcbiAgbGV0IGVuZW15Q2FycmllciA9IG5ldyBzaGlwRmFjdG9yeShcIkNhcnJpZXJcIiwgNSwgNSk7XHJcbiAgbGV0IGVuZW15QmF0dGxlc2hpcCA9IG5ldyBzaGlwRmFjdG9yeShcIkJhdHRsZXNoaXBcIiwgNCwgNCk7XHJcbiAgbGV0IGVuZW15Q3J1aXNlciA9IG5ldyBzaGlwRmFjdG9yeShcIkNydWlzZXJcIiwgMywgMyk7XHJcbiAgbGV0IGVuZW15U3VibWFyaW5lID0gbmV3IHNoaXBGYWN0b3J5KFwiU3VibWFyaW5lXCIsIDMsIDMpO1xyXG4gIGxldCBlbmVteVBhdHJvbGJvYXQgPSBuZXcgc2hpcEZhY3RvcnkoXCJQYXRyb2wgQm9hdFwiLCAyLCAyKTtcclxuICBzdGF0ZUNvbnRyb2wuZW5lbXlDYXJyaWVyLnNoaXAgPSBlbmVteUNhcnJpZXI7XHJcbiAgc3RhdGVDb250cm9sLmVuZW15QmF0dGxlc2hpcC5zaGlwID0gZW5lbXlCYXR0bGVzaGlwO1xyXG4gIHN0YXRlQ29udHJvbC5lbmVteUNydWlzZXIuc2hpcCA9IGVuZW15Q3J1aXNlcjtcclxuICBzdGF0ZUNvbnRyb2wuZW5lbXlTdWJtYXJpbmUuc2hpcCA9IGVuZW15U3VibWFyaW5lO1xyXG4gIHN0YXRlQ29udHJvbC5lbmVteVBhdHJvbGJvYXQuc2hpcCA9IGVuZW15UGF0cm9sYm9hdDtcclxuICBwbGFjZUVuZW15Q2FycmllcigpO1xyXG4gIHBsYWNlRW5lbXlCYXR0bGVzaGlwKCk7XHJcbiAgcGxhY2VFbmVteUNydWlzZXIoKTtcclxuICBwbGFjZUVuZW15U3VibWFyaW5lKCk7XHJcbiAgcGxhY2VFbmVteVBhdHJvbGJvYXQoKTtcclxuICBzdGF0ZUNvbnRyb2wucmVhZHlBaW0gPSB0cnVlO1xyXG4gIHN0YXRlQ29udHJvbC5yZWFkeUZpcmUgPSB0cnVlO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gcGxhY2VFbmVteUNhcnJpZXIoKSB7XHJcbiAgbGV0IHNwb3Rfb25fZ3JpZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCk7XHJcbiAgbGV0IGhvcml6b25hbF9vcl92ZXJ0aWNhbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpO1xyXG4gIGlmIChob3Jpem9uYWxfb3JfdmVydGljYWwgPT09IDApIHtcclxuICAgIGxldCBjaGVja19zcG90XzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWR9YCk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCArIDF9YFxyXG4gICAgKTtcclxuICAgIGxldCBjaGVja19zcG90XzMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgYGVuZW15U3F1YXJlXyR7c3BvdF9vbl9ncmlkICsgMn1gXHJcbiAgICApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfNCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWQgKyAzfWBcclxuICAgICk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF81ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCArIDR9YFxyXG4gICAgKTtcclxuICAgIGxldCBjaGVja19zcG90X2FycmF5ID0gW107XHJcbiAgICBjaGVja19zcG90X2FycmF5LnB1c2goXHJcbiAgICAgIGNoZWNrX3Nwb3RfMSxcclxuICAgICAgY2hlY2tfc3BvdF8yLFxyXG4gICAgICBjaGVja19zcG90XzMsXHJcbiAgICAgIGNoZWNrX3Nwb3RfNCxcclxuICAgICAgY2hlY2tfc3BvdF81XHJcbiAgICApO1xyXG4gICAgaWYgKFxyXG4gICAgICAhY2hlY2tfc3BvdF9hcnJheS5pbmNsdWRlcyhudWxsKSAmJlxyXG4gICAgICAhZmluZFNoYXJlZEVsZW1lbnRzKHN0YXRlQ29udHJvbC5lbmVteV90YWtlbl9zcXVhcmVzLCBjaGVja19zcG90X2FycmF5KSAmJlxyXG4gICAgICBjaGVja19zcG90XzEuZ2V0QXR0cmlidXRlKFwiWVlcIikgPT09IGNoZWNrX3Nwb3RfNS5nZXRBdHRyaWJ1dGUoXCJZWVwiKVxyXG4gICAgKSB7XHJcbiAgICAgIGxldCBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uXzEgPSBjaGVja19zcG90XzE7XHJcbiAgICAgIGxldCBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uXzIgPSBjaGVja19zcG90XzI7XHJcbiAgICAgIGxldCBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uXzMgPSBjaGVja19zcG90XzM7XHJcbiAgICAgIGxldCBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uXzQgPSBjaGVja19zcG90XzQ7XHJcbiAgICAgIGxldCBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uXzUgPSBjaGVja19zcG90XzU7XHJcbiAgICAgIGxldCBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uX2FycmF5ID0gW107XHJcbiAgICAgIGVuZW15X2NhcnJpZXJfcG9zaXRpb25fYXJyYXkucHVzaChcclxuICAgICAgICBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uXzEsXHJcbiAgICAgICAgZW5lbXlfY2Fycmllcl9wb3NpdGlvbl8yLFxyXG4gICAgICAgIGVuZW15X2NhcnJpZXJfcG9zaXRpb25fMyxcclxuICAgICAgICBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uXzQsXHJcbiAgICAgICAgZW5lbXlfY2Fycmllcl9wb3NpdGlvbl81XHJcbiAgICAgICk7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hlY2tfc3BvdF9hcnJheS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIC8vIGVuZW15X2NhcnJpZXJfcG9zaXRpb25fYXJyYXlbal0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuZW5lbXlDYXJyaWVyLnBvc2l0aW9uLnB1c2goXHJcbiAgICAgICAgICBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uX2FycmF5W2pdXHJcbiAgICAgICAgKTtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuZW5lbXlfdGFrZW5fc3F1YXJlcy5wdXNoKGVuZW15X2NhcnJpZXJfcG9zaXRpb25fYXJyYXlbal0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwbGFjZUVuZW15Q2FycmllcigpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAoaG9yaXpvbmFsX29yX3ZlcnRpY2FsID09PSAxKSB7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8xID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGVuZW15U3F1YXJlXyR7c3BvdF9vbl9ncmlkfWApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWQgLSAxMH1gXHJcbiAgICApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfMyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWQgLSAyMH1gXHJcbiAgICApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfNCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWQgLSAzMH1gXHJcbiAgICApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfNSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWQgLSA0MH1gXHJcbiAgICApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfYXJyYXkgPSBbXTtcclxuICAgIGNoZWNrX3Nwb3RfYXJyYXkucHVzaChcclxuICAgICAgY2hlY2tfc3BvdF8xLFxyXG4gICAgICBjaGVja19zcG90XzIsXHJcbiAgICAgIGNoZWNrX3Nwb3RfMyxcclxuICAgICAgY2hlY2tfc3BvdF80LFxyXG4gICAgICBjaGVja19zcG90XzVcclxuICAgICk7XHJcbiAgICBpZiAoXHJcbiAgICAgICFjaGVja19zcG90X2FycmF5LmluY2x1ZGVzKG51bGwpICYmXHJcbiAgICAgICFmaW5kU2hhcmVkRWxlbWVudHMoc3RhdGVDb250cm9sLmVuZW15X3Rha2VuX3NxdWFyZXMsIGNoZWNrX3Nwb3RfYXJyYXkpXHJcbiAgICApIHtcclxuICAgICAgbGV0IGVuZW15X2NhcnJpZXJfcG9zaXRpb25fMSA9IGNoZWNrX3Nwb3RfMTtcclxuICAgICAgbGV0IGVuZW15X2NhcnJpZXJfcG9zaXRpb25fMiA9IGNoZWNrX3Nwb3RfMjtcclxuICAgICAgbGV0IGVuZW15X2NhcnJpZXJfcG9zaXRpb25fMyA9IGNoZWNrX3Nwb3RfMztcclxuICAgICAgbGV0IGVuZW15X2NhcnJpZXJfcG9zaXRpb25fNCA9IGNoZWNrX3Nwb3RfNDtcclxuICAgICAgbGV0IGVuZW15X2NhcnJpZXJfcG9zaXRpb25fNSA9IGNoZWNrX3Nwb3RfNTtcclxuICAgICAgbGV0IGVuZW15X2NhcnJpZXJfcG9zaXRpb25fYXJyYXkgPSBbXTtcclxuICAgICAgZW5lbXlfY2Fycmllcl9wb3NpdGlvbl9hcnJheS5wdXNoKFxyXG4gICAgICAgIGVuZW15X2NhcnJpZXJfcG9zaXRpb25fMSxcclxuICAgICAgICBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uXzIsXHJcbiAgICAgICAgZW5lbXlfY2Fycmllcl9wb3NpdGlvbl8zLFxyXG4gICAgICAgIGVuZW15X2NhcnJpZXJfcG9zaXRpb25fNCxcclxuICAgICAgICBlbmVteV9jYXJyaWVyX3Bvc2l0aW9uXzVcclxuICAgICAgKTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGVja19zcG90X2FycmF5Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgLy8gY2hlY2tfc3BvdF9hcnJheVtqXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5lbmVteUNhcnJpZXIucG9zaXRpb24ucHVzaChcclxuICAgICAgICAgIGVuZW15X2NhcnJpZXJfcG9zaXRpb25fYXJyYXlbal1cclxuICAgICAgICApO1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5lbmVteV90YWtlbl9zcXVhcmVzLnB1c2goZW5lbXlfY2Fycmllcl9wb3NpdGlvbl9hcnJheVtqXSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBsYWNlRW5lbXlDYXJyaWVyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwbGFjZUVuZW15QmF0dGxlc2hpcCgpIHtcclxuICBsZXQgc3BvdF9vbl9ncmlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKTtcclxuICBsZXQgaG9yaXpvbmFsX29yX3ZlcnRpY2FsID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMik7XHJcbiAgaWYgKGhvcml6b25hbF9vcl92ZXJ0aWNhbCA9PT0gMCkge1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZH1gKTtcclxuICAgIGxldCBjaGVja19zcG90XzIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgYGVuZW15U3F1YXJlXyR7c3BvdF9vbl9ncmlkICsgMX1gXHJcbiAgICApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfMyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWQgKyAyfWBcclxuICAgICk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF80ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCArIDN9YFxyXG4gICAgKTtcclxuICAgIGxldCBjaGVja19zcG90X2FycmF5ID0gW107XHJcbiAgICBjaGVja19zcG90X2FycmF5LnB1c2goXHJcbiAgICAgIGNoZWNrX3Nwb3RfMSxcclxuICAgICAgY2hlY2tfc3BvdF8yLFxyXG4gICAgICBjaGVja19zcG90XzMsXHJcbiAgICAgIGNoZWNrX3Nwb3RfNFxyXG4gICAgKTtcclxuICAgIGlmIChcclxuICAgICAgIWNoZWNrX3Nwb3RfYXJyYXkuaW5jbHVkZXMobnVsbCkgJiZcclxuICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyhzdGF0ZUNvbnRyb2wuZW5lbXlfdGFrZW5fc3F1YXJlcywgY2hlY2tfc3BvdF9hcnJheSkgJiZcclxuICAgICAgY2hlY2tfc3BvdF8xLmdldEF0dHJpYnV0ZShcIllZXCIpID09PSBjaGVja19zcG90XzQuZ2V0QXR0cmlidXRlKFwiWVlcIilcclxuICAgICkge1xyXG4gICAgICBsZXQgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl8xID0gY2hlY2tfc3BvdF8xO1xyXG4gICAgICBsZXQgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl8yID0gY2hlY2tfc3BvdF8yO1xyXG4gICAgICBsZXQgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl8zID0gY2hlY2tfc3BvdF8zO1xyXG4gICAgICBsZXQgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl80ID0gY2hlY2tfc3BvdF80O1xyXG4gICAgICBsZXQgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl9hcnJheSA9IFtdO1xyXG4gICAgICBlbmVteV9iYXR0bGVzaGlwX3Bvc2l0aW9uX2FycmF5LnB1c2goXHJcbiAgICAgICAgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl8xLFxyXG4gICAgICAgIGVuZW15X2JhdHRsZXNoaXBfcG9zaXRpb25fMixcclxuICAgICAgICBlbmVteV9iYXR0bGVzaGlwX3Bvc2l0aW9uXzMsXHJcbiAgICAgICAgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl80XHJcbiAgICAgICk7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hlY2tfc3BvdF9hcnJheS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIC8vIGNoZWNrX3Nwb3RfYXJyYXlbal0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuZW5lbXlCYXR0bGVzaGlwLnBvc2l0aW9uLnB1c2goXHJcbiAgICAgICAgICBlbmVteV9iYXR0bGVzaGlwX3Bvc2l0aW9uX2FycmF5W2pdXHJcbiAgICAgICAgKTtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuZW5lbXlfdGFrZW5fc3F1YXJlcy5wdXNoKFxyXG4gICAgICAgICAgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl9hcnJheVtqXVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBsYWNlRW5lbXlCYXR0bGVzaGlwKCk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChob3Jpem9uYWxfb3JfdmVydGljYWwgPT09IDEpIHtcclxuICAgIGxldCBjaGVja19zcG90XzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWR9YCk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCAtIDEwfWBcclxuICAgICk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCAtIDIwfWBcclxuICAgICk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF80ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCAtIDMwfWBcclxuICAgICk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF9hcnJheSA9IFtdO1xyXG4gICAgY2hlY2tfc3BvdF9hcnJheS5wdXNoKFxyXG4gICAgICBjaGVja19zcG90XzEsXHJcbiAgICAgIGNoZWNrX3Nwb3RfMixcclxuICAgICAgY2hlY2tfc3BvdF8zLFxyXG4gICAgICBjaGVja19zcG90XzRcclxuICAgICk7XHJcbiAgICBpZiAoXHJcbiAgICAgICFjaGVja19zcG90X2FycmF5LmluY2x1ZGVzKG51bGwpICYmXHJcbiAgICAgICFmaW5kU2hhcmVkRWxlbWVudHMoc3RhdGVDb250cm9sLmVuZW15X3Rha2VuX3NxdWFyZXMsIGNoZWNrX3Nwb3RfYXJyYXkpXHJcbiAgICApIHtcclxuICAgICAgbGV0IGVuZW15X2JhdHRsZXNoaXBfcG9zaXRpb25fMSA9IGNoZWNrX3Nwb3RfMTtcclxuICAgICAgbGV0IGVuZW15X2JhdHRsZXNoaXBfcG9zaXRpb25fMiA9IGNoZWNrX3Nwb3RfMjtcclxuICAgICAgbGV0IGVuZW15X2JhdHRsZXNoaXBfcG9zaXRpb25fMyA9IGNoZWNrX3Nwb3RfMztcclxuICAgICAgbGV0IGVuZW15X2JhdHRsZXNoaXBfcG9zaXRpb25fNCA9IGNoZWNrX3Nwb3RfNDtcclxuICAgICAgbGV0IGVuZW15X2JhdHRsZXNoaXBfcG9zaXRpb25fYXJyYXkgPSBbXTtcclxuICAgICAgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl9hcnJheS5wdXNoKFxyXG4gICAgICAgIGVuZW15X2JhdHRsZXNoaXBfcG9zaXRpb25fMSxcclxuICAgICAgICBlbmVteV9iYXR0bGVzaGlwX3Bvc2l0aW9uXzIsXHJcbiAgICAgICAgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl8zLFxyXG4gICAgICAgIGVuZW15X2JhdHRsZXNoaXBfcG9zaXRpb25fNFxyXG4gICAgICApO1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoZWNrX3Nwb3RfYXJyYXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAvLyBjaGVja19zcG90X2FycmF5W2pdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmVuZW15QmF0dGxlc2hpcC5wb3NpdGlvbi5wdXNoKFxyXG4gICAgICAgICAgZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl9hcnJheVtqXVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmVuZW15X3Rha2VuX3NxdWFyZXMucHVzaChcclxuICAgICAgICAgIGVuZW15X2JhdHRsZXNoaXBfcG9zaXRpb25fYXJyYXlbal1cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwbGFjZUVuZW15QmF0dGxlc2hpcCgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcGxhY2VFbmVteUNydWlzZXIoKSB7XHJcbiAgbGV0IHNwb3Rfb25fZ3JpZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCk7XHJcbiAgbGV0IGhvcml6b25hbF9vcl92ZXJ0aWNhbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpO1xyXG4gIGlmIChob3Jpem9uYWxfb3JfdmVydGljYWwgPT09IDApIHtcclxuICAgIGxldCBjaGVja19zcG90XzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWR9YCk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCArIDF9YFxyXG4gICAgKTtcclxuICAgIGxldCBjaGVja19zcG90XzMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgYGVuZW15U3F1YXJlXyR7c3BvdF9vbl9ncmlkICsgMn1gXHJcbiAgICApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfYXJyYXkgPSBbXTtcclxuICAgIGNoZWNrX3Nwb3RfYXJyYXkucHVzaChjaGVja19zcG90XzEsIGNoZWNrX3Nwb3RfMiwgY2hlY2tfc3BvdF8zKTtcclxuICAgIGlmIChcclxuICAgICAgIWNoZWNrX3Nwb3RfYXJyYXkuaW5jbHVkZXMobnVsbCkgJiZcclxuICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyhzdGF0ZUNvbnRyb2wuZW5lbXlfdGFrZW5fc3F1YXJlcywgY2hlY2tfc3BvdF9hcnJheSkgJiZcclxuICAgICAgY2hlY2tfc3BvdF8xLmdldEF0dHJpYnV0ZShcIllZXCIpID09PSBjaGVja19zcG90XzMuZ2V0QXR0cmlidXRlKFwiWVlcIilcclxuICAgICkge1xyXG4gICAgICBsZXQgZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl8xID0gY2hlY2tfc3BvdF8xO1xyXG4gICAgICBsZXQgZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl8yID0gY2hlY2tfc3BvdF8yO1xyXG4gICAgICBsZXQgZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl8zID0gY2hlY2tfc3BvdF8zO1xyXG4gICAgICBsZXQgZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl9hcnJheSA9IFtdO1xyXG4gICAgICBlbmVteV9jcnVpc2VyX3Bvc2l0aW9uX2FycmF5LnB1c2goXHJcbiAgICAgICAgZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl8xLFxyXG4gICAgICAgIGVuZW15X2NydWlzZXJfcG9zaXRpb25fMixcclxuICAgICAgICBlbmVteV9jcnVpc2VyX3Bvc2l0aW9uXzNcclxuICAgICAgKTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGVja19zcG90X2FycmF5Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgLy8gY2hlY2tfc3BvdF9hcnJheVtqXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5lbmVteUNydWlzZXIucG9zaXRpb24ucHVzaChcclxuICAgICAgICAgIGVuZW15X2NydWlzZXJfcG9zaXRpb25fYXJyYXlbal1cclxuICAgICAgICApO1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5lbmVteV90YWtlbl9zcXVhcmVzLnB1c2goZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl9hcnJheVtqXSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBsYWNlRW5lbXlDcnVpc2VyKCk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChob3Jpem9uYWxfb3JfdmVydGljYWwgPT09IDEpIHtcclxuICAgIGxldCBjaGVja19zcG90XzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWR9YCk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCAtIDEwfWBcclxuICAgICk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCAtIDIwfWBcclxuICAgICk7XHJcblxyXG4gICAgbGV0IGNoZWNrX3Nwb3RfYXJyYXkgPSBbXTtcclxuICAgIGNoZWNrX3Nwb3RfYXJyYXkucHVzaChjaGVja19zcG90XzEsIGNoZWNrX3Nwb3RfMiwgY2hlY2tfc3BvdF8zKTtcclxuICAgIGlmIChcclxuICAgICAgIWNoZWNrX3Nwb3RfYXJyYXkuaW5jbHVkZXMobnVsbCkgJiZcclxuICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyhzdGF0ZUNvbnRyb2wuZW5lbXlfdGFrZW5fc3F1YXJlcywgY2hlY2tfc3BvdF9hcnJheSlcclxuICAgICkge1xyXG4gICAgICBsZXQgZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl8xID0gY2hlY2tfc3BvdF8xO1xyXG4gICAgICBsZXQgZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl8yID0gY2hlY2tfc3BvdF8yO1xyXG4gICAgICBsZXQgZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl8zID0gY2hlY2tfc3BvdF8zO1xyXG4gICAgICBsZXQgZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl9hcnJheSA9IFtdO1xyXG4gICAgICBlbmVteV9jcnVpc2VyX3Bvc2l0aW9uX2FycmF5LnB1c2goXHJcbiAgICAgICAgZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl8xLFxyXG4gICAgICAgIGVuZW15X2NydWlzZXJfcG9zaXRpb25fMixcclxuICAgICAgICBlbmVteV9jcnVpc2VyX3Bvc2l0aW9uXzNcclxuICAgICAgKTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGVja19zcG90X2FycmF5Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgLy8gY2hlY2tfc3BvdF9hcnJheVtqXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5lbmVteUNydWlzZXIucG9zaXRpb24ucHVzaChcclxuICAgICAgICAgIGVuZW15X2NydWlzZXJfcG9zaXRpb25fYXJyYXlbal1cclxuICAgICAgICApO1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5lbmVteV90YWtlbl9zcXVhcmVzLnB1c2goZW5lbXlfY3J1aXNlcl9wb3NpdGlvbl9hcnJheVtqXSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBsYWNlRW5lbXlDcnVpc2VyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwbGFjZUVuZW15U3VibWFyaW5lKCkge1xyXG4gIGxldCBzcG90X29uX2dyaWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApO1xyXG4gIGxldCBob3Jpem9uYWxfb3JfdmVydGljYWwgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKTtcclxuICBpZiAoaG9yaXpvbmFsX29yX3ZlcnRpY2FsID09PSAwKSB7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8xID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGVuZW15U3F1YXJlXyR7c3BvdF9vbl9ncmlkfWApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWQgKyAxfWBcclxuICAgICk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCArIDJ9YFxyXG4gICAgKTtcclxuICAgIGxldCBjaGVja19zcG90X2FycmF5ID0gW107XHJcbiAgICBjaGVja19zcG90X2FycmF5LnB1c2goY2hlY2tfc3BvdF8xLCBjaGVja19zcG90XzIsIGNoZWNrX3Nwb3RfMyk7XHJcbiAgICBpZiAoXHJcbiAgICAgICFjaGVja19zcG90X2FycmF5LmluY2x1ZGVzKG51bGwpICYmXHJcbiAgICAgICFmaW5kU2hhcmVkRWxlbWVudHMoc3RhdGVDb250cm9sLmVuZW15X3Rha2VuX3NxdWFyZXMsIGNoZWNrX3Nwb3RfYXJyYXkpICYmXHJcbiAgICAgIGNoZWNrX3Nwb3RfMS5nZXRBdHRyaWJ1dGUoXCJZWVwiKSA9PT0gY2hlY2tfc3BvdF8zLmdldEF0dHJpYnV0ZShcIllZXCIpXHJcbiAgICApIHtcclxuICAgICAgbGV0IGVuZW15X3N1Ym1hcmluZV9wb3NpdGlvbl8xID0gY2hlY2tfc3BvdF8xO1xyXG4gICAgICBsZXQgZW5lbXlfc3VibWFyaW5lX3Bvc2l0aW9uXzIgPSBjaGVja19zcG90XzI7XHJcbiAgICAgIGxldCBlbmVteV9zdWJtYXJpbmVfcG9zaXRpb25fMyA9IGNoZWNrX3Nwb3RfMztcclxuICAgICAgbGV0IGVuZW15X3N1Ym1hcmluZV9wb3NpdGlvbl9hcnJheSA9IFtdO1xyXG4gICAgICBlbmVteV9zdWJtYXJpbmVfcG9zaXRpb25fYXJyYXkucHVzaChcclxuICAgICAgICBlbmVteV9zdWJtYXJpbmVfcG9zaXRpb25fMSxcclxuICAgICAgICBlbmVteV9zdWJtYXJpbmVfcG9zaXRpb25fMixcclxuICAgICAgICBlbmVteV9zdWJtYXJpbmVfcG9zaXRpb25fM1xyXG4gICAgICApO1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoZWNrX3Nwb3RfYXJyYXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAvLyBjaGVja19zcG90X2FycmF5W2pdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmVuZW15U3VibWFyaW5lLnBvc2l0aW9uLnB1c2goXHJcbiAgICAgICAgICBlbmVteV9zdWJtYXJpbmVfcG9zaXRpb25fYXJyYXlbal1cclxuICAgICAgICApO1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5lbmVteV90YWtlbl9zcXVhcmVzLnB1c2goXHJcbiAgICAgICAgICBlbmVteV9zdWJtYXJpbmVfcG9zaXRpb25fYXJyYXlbal1cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwbGFjZUVuZW15U3VibWFyaW5lKCk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChob3Jpem9uYWxfb3JfdmVydGljYWwgPT09IDEpIHtcclxuICAgIGxldCBjaGVja19zcG90XzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWR9YCk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCAtIDEwfWBcclxuICAgICk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIGBlbmVteVNxdWFyZV8ke3Nwb3Rfb25fZ3JpZCAtIDIwfWBcclxuICAgICk7XHJcblxyXG4gICAgbGV0IGNoZWNrX3Nwb3RfYXJyYXkgPSBbXTtcclxuICAgIGNoZWNrX3Nwb3RfYXJyYXkucHVzaChjaGVja19zcG90XzEsIGNoZWNrX3Nwb3RfMiwgY2hlY2tfc3BvdF8zKTtcclxuICAgIGlmIChcclxuICAgICAgIWNoZWNrX3Nwb3RfYXJyYXkuaW5jbHVkZXMobnVsbCkgJiZcclxuICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyhzdGF0ZUNvbnRyb2wuZW5lbXlfdGFrZW5fc3F1YXJlcywgY2hlY2tfc3BvdF9hcnJheSlcclxuICAgICkge1xyXG4gICAgICBsZXQgZW5lbXlfc3VibWFyaW5lX3Bvc2l0aW9uXzEgPSBjaGVja19zcG90XzE7XHJcbiAgICAgIGxldCBlbmVteV9zdWJtYXJpbmVfcG9zaXRpb25fMiA9IGNoZWNrX3Nwb3RfMjtcclxuICAgICAgbGV0IGVuZW15X3N1Ym1hcmluZV9wb3NpdGlvbl8zID0gY2hlY2tfc3BvdF8zO1xyXG4gICAgICBsZXQgZW5lbXlfc3VibWFyaW5lX3Bvc2l0aW9uX2FycmF5ID0gW107XHJcbiAgICAgIGVuZW15X3N1Ym1hcmluZV9wb3NpdGlvbl9hcnJheS5wdXNoKFxyXG4gICAgICAgIGVuZW15X3N1Ym1hcmluZV9wb3NpdGlvbl8xLFxyXG4gICAgICAgIGVuZW15X3N1Ym1hcmluZV9wb3NpdGlvbl8yLFxyXG4gICAgICAgIGVuZW15X3N1Ym1hcmluZV9wb3NpdGlvbl8zXHJcbiAgICAgICk7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hlY2tfc3BvdF9hcnJheS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIC8vIGNoZWNrX3Nwb3RfYXJyYXlbal0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuZW5lbXlTdWJtYXJpbmUucG9zaXRpb24ucHVzaChcclxuICAgICAgICAgIGVuZW15X3N1Ym1hcmluZV9wb3NpdGlvbl9hcnJheVtqXVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmVuZW15X3Rha2VuX3NxdWFyZXMucHVzaChcclxuICAgICAgICAgIGVuZW15X3N1Ym1hcmluZV9wb3NpdGlvbl9hcnJheVtqXVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBsYWNlRW5lbXlTdWJtYXJpbmUoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBsYWNlRW5lbXlQYXRyb2xib2F0KCkge1xyXG4gIGxldCBzcG90X29uX2dyaWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApO1xyXG4gIGxldCBob3Jpem9uYWxfb3JfdmVydGljYWwgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKTtcclxuICBpZiAoaG9yaXpvbmFsX29yX3ZlcnRpY2FsID09PSAwKSB7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8xID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGVuZW15U3F1YXJlXyR7c3BvdF9vbl9ncmlkfWApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWQgKyAxfWBcclxuICAgICk7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF9hcnJheSA9IFtdO1xyXG4gICAgY2hlY2tfc3BvdF9hcnJheS5wdXNoKGNoZWNrX3Nwb3RfMSwgY2hlY2tfc3BvdF8yKTtcclxuICAgIGlmIChcclxuICAgICAgIWNoZWNrX3Nwb3RfYXJyYXkuaW5jbHVkZXMobnVsbCkgJiZcclxuICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyhzdGF0ZUNvbnRyb2wuZW5lbXlfdGFrZW5fc3F1YXJlcywgY2hlY2tfc3BvdF9hcnJheSkgJiZcclxuICAgICAgY2hlY2tfc3BvdF8xLmdldEF0dHJpYnV0ZShcIllZXCIpID09PSBjaGVja19zcG90XzIuZ2V0QXR0cmlidXRlKFwiWVlcIilcclxuICAgICkge1xyXG4gICAgICBsZXQgZW5lbXlfcGF0cm9sYm9hdF9wb3NpdGlvbl8xID0gY2hlY2tfc3BvdF8xO1xyXG4gICAgICBsZXQgZW5lbXlfcGF0cm9sYm9hdF9wb3NpdGlvbl8yID0gY2hlY2tfc3BvdF8yO1xyXG4gICAgICBsZXQgZW5lbXlfcGF0cm9sYm9hdF9wb3NpdGlvbl9hcnJheSA9IFtdO1xyXG4gICAgICBlbmVteV9wYXRyb2xib2F0X3Bvc2l0aW9uX2FycmF5LnB1c2goXHJcbiAgICAgICAgZW5lbXlfcGF0cm9sYm9hdF9wb3NpdGlvbl8xLFxyXG4gICAgICAgIGVuZW15X3BhdHJvbGJvYXRfcG9zaXRpb25fMlxyXG4gICAgICApO1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoZWNrX3Nwb3RfYXJyYXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAvLyBjaGVja19zcG90X2FycmF5W2pdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmVuZW15UGF0cm9sYm9hdC5wb3NpdGlvbi5wdXNoKFxyXG4gICAgICAgICAgZW5lbXlfcGF0cm9sYm9hdF9wb3NpdGlvbl9hcnJheVtqXVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmVuZW15X3Rha2VuX3NxdWFyZXMucHVzaChcclxuICAgICAgICAgIGVuZW15X3BhdHJvbGJvYXRfcG9zaXRpb25fYXJyYXlbal1cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwbGFjZUVuZW15UGF0cm9sYm9hdCgpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAoaG9yaXpvbmFsX29yX3ZlcnRpY2FsID09PSAxKSB7XHJcbiAgICBsZXQgY2hlY2tfc3BvdF8xID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGVuZW15U3F1YXJlXyR7c3BvdF9vbl9ncmlkfWApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBgZW5lbXlTcXVhcmVfJHtzcG90X29uX2dyaWQgLSAxMH1gXHJcbiAgICApO1xyXG4gICAgbGV0IGNoZWNrX3Nwb3RfYXJyYXkgPSBbXTtcclxuICAgIGNoZWNrX3Nwb3RfYXJyYXkucHVzaChjaGVja19zcG90XzEsIGNoZWNrX3Nwb3RfMik7XHJcbiAgICBpZiAoXHJcbiAgICAgICFjaGVja19zcG90X2FycmF5LmluY2x1ZGVzKG51bGwpICYmXHJcbiAgICAgICFmaW5kU2hhcmVkRWxlbWVudHMoc3RhdGVDb250cm9sLmVuZW15X3Rha2VuX3NxdWFyZXMsIGNoZWNrX3Nwb3RfYXJyYXkpXHJcbiAgICApIHtcclxuICAgICAgbGV0IGVuZW15X3BhdHJvbGJvYXRfcG9zaXRpb25fMSA9IGNoZWNrX3Nwb3RfMTtcclxuICAgICAgbGV0IGVuZW15X3BhdHJvbGJvYXRfcG9zaXRpb25fMiA9IGNoZWNrX3Nwb3RfMjtcclxuICAgICAgbGV0IGVuZW15X3BhdHJvbGJvYXRfcG9zaXRpb25fYXJyYXkgPSBbXTtcclxuICAgICAgZW5lbXlfcGF0cm9sYm9hdF9wb3NpdGlvbl9hcnJheS5wdXNoKFxyXG4gICAgICAgIGVuZW15X3BhdHJvbGJvYXRfcG9zaXRpb25fMSxcclxuICAgICAgICBlbmVteV9wYXRyb2xib2F0X3Bvc2l0aW9uXzJcclxuICAgICAgKTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGVja19zcG90X2FycmF5Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgLy8gY2hlY2tfc3BvdF9hcnJheVtqXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5lbmVteVBhdHJvbGJvYXQucG9zaXRpb24ucHVzaChcclxuICAgICAgICAgIGVuZW15X3BhdHJvbGJvYXRfcG9zaXRpb25fYXJyYXlbal1cclxuICAgICAgICApO1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5lbmVteV90YWtlbl9zcXVhcmVzLnB1c2goXHJcbiAgICAgICAgICBlbmVteV9wYXRyb2xib2F0X3Bvc2l0aW9uX2FycmF5W2pdXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcGxhY2VFbmVteVBhdHJvbGJvYXQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IGNyZWF0ZUVuZW15R3JpZCwgY3JlYXRlRW5lbXlGbGVldCwgc2hpcEhpdE1lc3NhZ2UsIGVuZW15QXR0YWNrIH07XHJcbiIsImltcG9ydCB7IGNyZWF0ZUNhcnJpZXJPbkJvYXJkIH0gZnJvbSBcIi4vYmF0dGxlc2hpcFwiO1xyXG5pbXBvcnQgeyBzaGlwSGl0TWVzc2FnZSwgZW5lbXlBdHRhY2sgfSBmcm9tIFwiLi9lbmVteV9mbGVldF9jcmVhdGlvblwiO1xyXG5pbXBvcnQgeyBjaGVja1NoaXBzU2FuayB9IGZyb20gXCIuL2VuZF9nYW1lXCI7XHJcblxyXG5sZXQgc3RhdGVDb250cm9sID0ge1xyXG4gIGJvYXJkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdhbWVfYm9hcmRcIiksXHJcbiAgdGV4dERpc3BsYXk6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGV4dF9kaXNwbGF5XCIpLFxyXG4gIGN1cnJlbnRGdW5jdGlvbjogXCJUaGlzIGlzIGZpbGxlclwiLFxyXG4gIGhvaXpvbnRhbF9wbGFjZW1lbnQ6IHRydWUsXHJcbiAgYXZhaWxpYmxlU3F1YXJlczogW10sXHJcbiAgdGFrZW5fc3FhdXJlczogW10sXHJcbiAgY2hlY2tBcnJheTogZmFsc2UsXHJcbiAgaG92ZXJBcnJheTogW10sXHJcbiAgcmVhZHlBaW06IGZhbHNlLFxyXG4gIHBhc3NlZFNxdWFyZTogXCJUaGlzIGlzIGZpbGxlclwiLFxyXG4gIGNsZWFyUGFzc2VkU3F1YXJlOiBmYWxzZSxcclxuICByZWFkeUZpcmU6IGZhbHNlLFxyXG4gIGVuZW15VHVybjogZmFsc2UsXHJcbiAgcGxheWVyU3VjY2Vzc2Z1bFNob3RzOiBbXSxcclxuICBlbmVteVN1Y2Nlc3NmdWxTaG90czogW10sXHJcbiAgbWlzc2VkU2hvdHM6IFtdLFxyXG4gIHBsYXllclNoaXBzU3VuazogMCxcclxuICBlbmVteVNoaXBzU3VuazogMCxcclxuICBwbGF5ZXJDYXJyaWVyOiB7XHJcbiAgICBzcGF3bkNhcnJpZXI6IHRydWUsXHJcbiAgICBzaGlwOiB7fSxcclxuICAgIHBvc2l0aW9uOiBbXSxcclxuICB9LFxyXG4gIHBsYXllckJhdHRsZXNoaXA6IHtcclxuICAgIHNwYXduQmF0dGxlc2hpcDogZmFsc2UsXHJcbiAgICBzaGlwOiB7fSxcclxuICAgIHBvc2l0aW9uOiBbXSxcclxuICB9LFxyXG4gIHBsYXllckNydWlzZXI6IHtcclxuICAgIHNwYXduQ3J1aXNlcjogZmFsc2UsXHJcbiAgICBzaGlwOiB7fSxcclxuICAgIHBvc2l0aW9uOiBbXSxcclxuICB9LFxyXG4gIHBsYXllclN1Ym1hcmluZToge1xyXG4gICAgc3Bhd25TdWJtYXJpbmU6IGZhbHNlLFxyXG4gICAgc2hpcDoge30sXHJcbiAgICBwb3NpdGlvbjogW10sXHJcbiAgfSxcclxuICBwbGF5ZXJQYXRyb2xib2F0OiB7XHJcbiAgICBzcGF3blBhdHJvbGJvYXQ6IGZhbHNlLFxyXG4gICAgc2hpcDoge30sXHJcbiAgICBwb3NpdGlvbjogW10sXHJcbiAgfSxcclxuICBlbmVteUJvYXJkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVuZW15X2JvYXJkXCIpLFxyXG4gIGVuZW15X3Rha2VuX3NxdWFyZXM6IFtdLFxyXG4gIGVuZW15Q2Fycmllcjoge1xyXG4gICAgc2hpcDoge30sXHJcbiAgICBwb3NpdGlvbjogW10sXHJcbiAgfSxcclxuICBlbmVteUJhdHRsZXNoaXA6IHtcclxuICAgIHNoaXA6IHt9LFxyXG4gICAgcG9zaXRpb246IFtdLFxyXG4gIH0sXHJcbiAgZW5lbXlDcnVpc2VyOiB7XHJcbiAgICBzaGlwOiB7fSxcclxuICAgIHBvc2l0aW9uOiBbXSxcclxuICB9LFxyXG4gIGVuZW15U3VibWFyaW5lOiB7XHJcbiAgICBzaGlwOiB7fSxcclxuICAgIHBvc2l0aW9uOiBbXSxcclxuICB9LFxyXG4gIGVuZW15UGF0cm9sYm9hdDoge1xyXG4gICAgc2hpcDoge30sXHJcbiAgICBwb3NpdGlvbjogW10sXHJcbiAgfSxcclxuICBwbGF5ZXJOYW1lOiBcIlwiLFxyXG59O1xyXG5cclxuY2xhc3Mgc2hpcEZhY3Rvcnkge1xyXG4gIGNvbnN0cnVjdG9yKG5hbWUsIGhpdF9wb2ludHMsIGxlbmd0aCkge1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuaGl0X3BvaW50cyA9IGhpdF9wb2ludHM7XHJcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcclxuICB9XHJcbiAgaGl0KCkge1xyXG4gICAgdGhpcy5oaXRfcG9pbnRzIC09IDE7XHJcbiAgICBpZiAodGhpcy5oaXRfcG9pbnRzICE9PSAwICYmIHN0YXRlQ29udHJvbC5lbmVteVR1cm4gPT09IGZhbHNlKSB7XHJcbiAgICAgIHNoaXBIaXRNZXNzYWdlKFwiQ2hlY2tpbmcuLi4uLlwiLCBcIkl0J3MgYSBoaXQhXCIpO1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uIG5leHRUdXJuKCkge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5lbmVteVR1cm4gPSB0cnVlO1xyXG4gICAgICAgIGVuZW15QXR0YWNrKCk7XHJcbiAgICAgIH0sIDU1MDApO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmhpdF9wb2ludHMgIT09IDAgJiYgc3RhdGVDb250cm9sLmVuZW15VHVybiA9PT0gdHJ1ZSkge1xyXG4gICAgICBzaGlwSGl0TWVzc2FnZShcclxuICAgICAgICBcIldhaXRpbmcgZm9yIGVuZW15IGZpcmUuLi4uLlwiLFxyXG4gICAgICAgIGBPdXIgJHt0aGlzLm5hbWV9XFwncyBiZWVuIGhpdCEgRmlyZSBiYWNrIWBcclxuICAgICAgKTtcclxuICAgICAgc3RhdGVDb250cm9sLmVuZW15VHVybiA9IGZhbHNlO1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uIG5leHRUdXJuKCkge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5yZWFkeUZpcmUgPSB0cnVlO1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5yZWFkeUFpbSA9IHRydWU7XHJcbiAgICAgIH0sIDMzMDApO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmhpdF9wb2ludHMgPT09IDAgJiYgc3RhdGVDb250cm9sLmVuZW15VHVybiA9PT0gZmFsc2UpIHtcclxuICAgICAgc2hpcEhpdE1lc3NhZ2UoXHJcbiAgICAgICAgXCJDaGVja2luZy4uLi4uXCIsXHJcbiAgICAgICAgYE5pY2Ugc2hvdCEgeW91IHN1bmsgdGhlaXIgJHt0aGlzLm5hbWV9IWBcclxuICAgICAgKTtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiBuZXh0VHVybigpIHtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuZW5lbXlTaGlwc1N1bmsrKztcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyU2hpcHNTdW5rID09PSA1IHx8XHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wuZW5lbXlTaGlwc1N1bmsgPT09IDVcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGNoZWNrU2hpcHNTYW5rKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHN0YXRlQ29udHJvbC5lbmVteVR1cm4gPSB0cnVlO1xyXG4gICAgICAgICAgZW5lbXlBdHRhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIDU1MDApO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmhpdF9wb2ludHMgPT09IDAgJiYgc3RhdGVDb250cm9sLmVuZW15VHVybiA9PT0gdHJ1ZSkge1xyXG4gICAgICBzaGlwSGl0TWVzc2FnZShcclxuICAgICAgICBcIldhaXRpbmcgZm9yIGVuZW15IGZpcmUuLi4uLlwiLFxyXG4gICAgICAgIGBEYW1uISB0aGV5IHN1bmsgb3VyICR7dGhpcy5uYW1lfSEhYFxyXG4gICAgICApO1xyXG4gICAgICBzdGF0ZUNvbnRyb2wuZW5lbXlUdXJuID0gZmFsc2U7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gbmV4dFR1cm4oKSB7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLnBsYXllclNoaXBzU3VuaysrO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJTaGlwc1N1bmsgPT09IDUgfHxcclxuICAgICAgICAgIHN0YXRlQ29udHJvbC5lbmVteVNoaXBzU3VuayA9PT0gNVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgY2hlY2tTaGlwc1NhbmsoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3RhdGVDb250cm9sLnJlYWR5RmlyZSA9IHRydWU7XHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wucmVhZHlBaW0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgMzMwMCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5sZXQgZmluZFNoYXJlZEVsZW1lbnRzID0gKGFycjEsIGFycjIpID0+IHtcclxuICByZXR1cm4gYXJyMVxyXG4gICAgLm1hcCgoZWxtKSA9PiBlbG0uaWQpXHJcbiAgICAuc29tZSgoaWQpID0+IGFycjIubWFwKChlbG0pID0+IGVsbS5pZCkuaW5jbHVkZXMoaWQpKTtcclxufTtcclxuXHJcbmxldCBjaGVjayA9IChlKSA9PiB7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xyXG4gICAgLy9jYXJyaWVyIGhvcml6b25hbCBob3ZlciBlZmZlY3RcclxuICAgIGlmIChcclxuICAgICAgc3RhdGVDb250cm9sLnBsYXllckNhcnJpZXIuc3Bhd25DYXJyaWVyID09PSB0cnVlICYmXHJcbiAgICAgIHN0YXRlQ29udHJvbC5ob2l6b250YWxfcGxhY2VtZW50ID09PSB0cnVlICYmXHJcbiAgICAgIGUudGFyZ2V0LmlkID09PSBgc3F1YXJlXyR7aX1gXHJcbiAgICApIHtcclxuICAgICAgaWYgKHN0YXRlQ29udHJvbC5jaGVja0FycmF5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkuZm9yRWFjaCgoeCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHggIT09IG51bGwpIHguc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJcIjtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBsZXQgaG92ZXJPbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aX1gKTtcclxuICAgICAgbGV0IGhvdmVyVHdvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgKyAxfWApO1xyXG4gICAgICBsZXQgaG92ZXJUaHJlZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpICsgMn1gKTtcclxuICAgICAgbGV0IGhvdmVyRm91ciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpICsgM31gKTtcclxuICAgICAgbGV0IGhvdmVyRml2ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpICsgNH1gKTtcclxuICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkgPSBbXTtcclxuICAgICAgc3RhdGVDb250cm9sLmNoZWNrQXJyYXkgPSB0cnVlO1xyXG4gICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5wdXNoKFxyXG4gICAgICAgIGhvdmVyT25lLFxyXG4gICAgICAgIGhvdmVyVHdvLFxyXG4gICAgICAgIGhvdmVyVGhyZWUsXHJcbiAgICAgICAgaG92ZXJGb3VyLFxyXG4gICAgICAgIGhvdmVyRml2ZVxyXG4gICAgICApO1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgaG92ZXJPbmUuZ2V0QXR0cmlidXRlKFwiWFwiKSA8IDYgJiZcclxuICAgICAgICBob3Zlck9uZS5nZXRBdHRyaWJ1dGUoXCJZXCIpID09PSBob3ZlckZpdmUuZ2V0QXR0cmlidXRlKFwiWVwiKSAmJlxyXG4gICAgICAgICFzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5pbmNsdWRlcyhudWxsKVxyXG4gICAgICApIHtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5mb3JFYWNoKCh4KSA9PiB7XHJcbiAgICAgICAgICB4LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5mb3JFYWNoKCh4KSA9PiB7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHggIT09IG51bGwgJiZcclxuICAgICAgICAgICAgeC5nZXRBdHRyaWJ1dGUoXCJZXCIpID09PVxyXG4gICAgICAgICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5WzBdLmdldEF0dHJpYnV0ZShcIllcIikgJiZcclxuICAgICAgICAgICAgIXN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzLmluY2x1ZGVzKHgpXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgeC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvL2NhcnJpZXIgdmVydGljYWwgaG92ZXIgZWZmZWN0XHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICBzdGF0ZUNvbnRyb2wucGxheWVyQ2Fycmllci5zcGF3bkNhcnJpZXIgPT09IHRydWUgJiZcclxuICAgICAgc3RhdGVDb250cm9sLmhvaXpvbnRhbF9wbGFjZW1lbnQgPT09IGZhbHNlICYmXHJcbiAgICAgIGUudGFyZ2V0LmlkID09PSBgc3F1YXJlXyR7aX1gXHJcbiAgICApIHtcclxuICAgICAgaWYgKHN0YXRlQ29udHJvbC5jaGVja0FycmF5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkuZm9yRWFjaCgoeCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHggIT09IG51bGwpIHguc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJcIjtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBsZXQgaG92ZXJPbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aX1gKTtcclxuICAgICAgbGV0IGhvdmVyVHdvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgLSAxMH1gKTtcclxuICAgICAgbGV0IGhvdmVyVGhyZWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSAtIDIwfWApO1xyXG4gICAgICBsZXQgaG92ZXJGb3VyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgLSAzMH1gKTtcclxuICAgICAgbGV0IGhvdmVyRml2ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gNDB9YCk7XHJcbiAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5ID0gW107XHJcbiAgICAgIHN0YXRlQ29udHJvbC5jaGVja0FycmF5ID0gdHJ1ZTtcclxuICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkucHVzaChcclxuICAgICAgICBob3Zlck9uZSxcclxuICAgICAgICBob3ZlclR3byxcclxuICAgICAgICBob3ZlclRocmVlLFxyXG4gICAgICAgIGhvdmVyRm91cixcclxuICAgICAgICBob3ZlckZpdmVcclxuICAgICAgKTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGhvdmVyT25lLmdldEF0dHJpYnV0ZShcIllcIikgPCA2ICYmXHJcbiAgICAgICAgaG92ZXJPbmUuZ2V0QXR0cmlidXRlKFwiWFwiKSA9PT0gaG92ZXJGaXZlLmdldEF0dHJpYnV0ZShcIlhcIikgJiZcclxuICAgICAgICAhc3RhdGVDb250cm9sLmhvdmVyQXJyYXkuaW5jbHVkZXMobnVsbClcclxuICAgICAgKSB7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkuZm9yRWFjaCgoeSkgPT4ge1xyXG4gICAgICAgICAgeS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkuZm9yRWFjaCgoeCkgPT4ge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB4ICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHguZ2V0QXR0cmlidXRlKFwiWFwiKSA9PT1cclxuICAgICAgICAgICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheVswXS5nZXRBdHRyaWJ1dGUoXCJYXCIpICYmXHJcbiAgICAgICAgICAgICFzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcy5pbmNsdWRlcyh4KVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHguc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vaG92ZXIgYmF0dGxlc2hpcCBob3Jpem9uYWwgZWZmZWN0XHJcbiAgICBlbHNlIGlmIChcclxuICAgICAgc3RhdGVDb250cm9sLnBsYXllckJhdHRsZXNoaXAuc3Bhd25CYXR0bGVzaGlwID09PSB0cnVlICYmXHJcbiAgICAgIHN0YXRlQ29udHJvbC5ob2l6b250YWxfcGxhY2VtZW50ID09PSB0cnVlICYmXHJcbiAgICAgIGUudGFyZ2V0LmlkID09PSBgc3F1YXJlXyR7aX1gXHJcbiAgICApIHtcclxuICAgICAgaWYgKHN0YXRlQ29udHJvbC5jaGVja0FycmF5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkuZm9yRWFjaCgoeCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHggIT09IG51bGwgJiYgIXN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzLmluY2x1ZGVzKHgpKSB7XHJcbiAgICAgICAgICAgIHguc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBsZXQgaG92ZXJPbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aX1gKTtcclxuICAgICAgbGV0IGhvdmVyVHdvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgKyAxfWApO1xyXG4gICAgICBsZXQgaG92ZXJUaHJlZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpICsgMn1gKTtcclxuICAgICAgbGV0IGhvdmVyRm91ciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpICsgM31gKTtcclxuICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkgPSBbXTtcclxuICAgICAgc3RhdGVDb250cm9sLmNoZWNrQXJyYXkgPSB0cnVlO1xyXG4gICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5wdXNoKGhvdmVyT25lLCBob3ZlclR3bywgaG92ZXJUaHJlZSwgaG92ZXJGb3VyKTtcclxuICAgICAgLy9tYXJrIGl0IGdyZWVuXHJcbiAgICAgIGlmIChcclxuICAgICAgICBob3Zlck9uZS5nZXRBdHRyaWJ1dGUoXCJYXCIpIDwgNyAmJlxyXG4gICAgICAgIGhvdmVyT25lLmdldEF0dHJpYnV0ZShcIllcIikgPT09IGhvdmVyRm91ci5nZXRBdHRyaWJ1dGUoXCJZXCIpICYmXHJcbiAgICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyhzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcywgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgIHguc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgeCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB4LmdldEF0dHJpYnV0ZShcIllcIikgPT09XHJcbiAgICAgICAgICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXlbMF0uZ2V0QXR0cmlidXRlKFwiWVwiKSAmJlxyXG4gICAgICAgICAgICAhc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMuaW5jbHVkZXMoeClcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICB4LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL2hvdmVyIGJhdHRsZXNoaXAgdmVydGljYWxseSBlZmZlY3RcclxuICAgIGVsc2UgaWYgKFxyXG4gICAgICBzdGF0ZUNvbnRyb2wucGxheWVyQmF0dGxlc2hpcC5zcGF3bkJhdHRsZXNoaXAgPT09IHRydWUgJiZcclxuICAgICAgc3RhdGVDb250cm9sLmhvaXpvbnRhbF9wbGFjZW1lbnQgPT09IGZhbHNlICYmXHJcbiAgICAgIGUudGFyZ2V0LmlkID09PSBgc3F1YXJlXyR7aX1gXHJcbiAgICApIHtcclxuICAgICAgaWYgKHN0YXRlQ29udHJvbC5jaGVja0FycmF5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkuZm9yRWFjaCgoeCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHggIT09IG51bGwgJiYgIXN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzLmluY2x1ZGVzKHgpKSB7XHJcbiAgICAgICAgICAgIHguc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBsZXQgaG92ZXJPbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aX1gKTtcclxuICAgICAgbGV0IGhvdmVyVHdvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgLSAxMH1gKTtcclxuICAgICAgbGV0IGhvdmVyVGhyZWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSAtIDIwfWApO1xyXG4gICAgICBsZXQgaG92ZXJGb3VyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgLSAzMH1gKTtcclxuICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkgPSBbXTtcclxuICAgICAgc3RhdGVDb250cm9sLmNoZWNrQXJyYXkgPSB0cnVlO1xyXG4gICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5wdXNoKGhvdmVyT25lLCBob3ZlclR3bywgaG92ZXJUaHJlZSwgaG92ZXJGb3VyKTtcclxuICAgICAgLy9tYXJrIGl0IGdyZWVuXHJcbiAgICAgIGlmIChcclxuICAgICAgICBob3Zlck9uZS5nZXRBdHRyaWJ1dGUoXCJZXCIpIDwgNyAmJlxyXG4gICAgICAgIGhvdmVyT25lLmdldEF0dHJpYnV0ZShcIlhcIikgPT09IGhvdmVyRm91ci5nZXRBdHRyaWJ1dGUoXCJYXCIpICYmXHJcbiAgICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyhzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcywgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgIHguc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgeCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB4LmdldEF0dHJpYnV0ZShcIlhcIikgPT09XHJcbiAgICAgICAgICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXlbMF0uZ2V0QXR0cmlidXRlKFwiWFwiKSAmJlxyXG4gICAgICAgICAgICAhc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMuaW5jbHVkZXMoeClcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICB4LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL2hvdmVyIGNydWlzZXIvc3VibWFyaW5lIGhvcml6b25hbCBlZmZlY3RcclxuICAgIGVsc2UgaWYgKFxyXG4gICAgICAoc3RhdGVDb250cm9sLnBsYXllckNydWlzZXIuc3Bhd25DcnVpc2VyID09PSB0cnVlIHx8XHJcbiAgICAgICAgc3RhdGVDb250cm9sLnBsYXllclN1Ym1hcmluZS5zcGF3blN1Ym1hcmluZSA9PT0gdHJ1ZSkgJiZcclxuICAgICAgc3RhdGVDb250cm9sLmhvaXpvbnRhbF9wbGFjZW1lbnQgPT09IHRydWUgJiZcclxuICAgICAgZS50YXJnZXQuaWQgPT09IGBzcXVhcmVfJHtpfWBcclxuICAgICkge1xyXG4gICAgICBpZiAoc3RhdGVDb250cm9sLmNoZWNrQXJyYXkgPT09IHRydWUpIHtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5mb3JFYWNoKCh4KSA9PiB7XHJcbiAgICAgICAgICBpZiAoeCAhPT0gbnVsbCAmJiAhc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMuaW5jbHVkZXMoeCkpIHtcclxuICAgICAgICAgICAgeC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIlwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBob3Zlck9uZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpfWApO1xyXG4gICAgICBsZXQgaG92ZXJUd28gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSArIDF9YCk7XHJcbiAgICAgIGxldCBob3ZlclRocmVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgKyAyfWApO1xyXG4gICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheSA9IFtdO1xyXG4gICAgICBzdGF0ZUNvbnRyb2wuY2hlY2tBcnJheSA9IHRydWU7XHJcbiAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LnB1c2goaG92ZXJPbmUsIGhvdmVyVHdvLCBob3ZlclRocmVlKTtcclxuICAgICAgLy9tYXJrIGl0IGdyZWVuXHJcbiAgICAgIGlmIChcclxuICAgICAgICBob3Zlck9uZS5nZXRBdHRyaWJ1dGUoXCJYXCIpIDwgOCAmJlxyXG4gICAgICAgIGhvdmVyT25lLmdldEF0dHJpYnV0ZShcIllcIikgPT09IGhvdmVyVGhyZWUuZ2V0QXR0cmlidXRlKFwiWVwiKSAmJlxyXG4gICAgICAgICFmaW5kU2hhcmVkRWxlbWVudHMoc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMsIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5KVxyXG4gICAgICApIHtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5mb3JFYWNoKCh4KSA9PiB7XHJcbiAgICAgICAgICB4LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5mb3JFYWNoKCh4KSA9PiB7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHggIT09IG51bGwgJiZcclxuICAgICAgICAgICAgeC5nZXRBdHRyaWJ1dGUoXCJZXCIpID09PVxyXG4gICAgICAgICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5WzBdLmdldEF0dHJpYnV0ZShcIllcIikgJiZcclxuICAgICAgICAgICAgIXN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzLmluY2x1ZGVzKHgpXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgeC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9ob3ZlciBjcnVpc2VyL3N1Ym1hcmluZSBlZmZlY3QgdmVydGljYWxseVxyXG4gICAgZWxzZSBpZiAoXHJcbiAgICAgIChzdGF0ZUNvbnRyb2wucGxheWVyQ3J1aXNlci5zcGF3bkNydWlzZXIgPT09IHRydWUgfHxcclxuICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyU3VibWFyaW5lLnNwYXduU3VibWFyaW5lID09PSB0cnVlKSAmJlxyXG4gICAgICBzdGF0ZUNvbnRyb2wuaG9pem9udGFsX3BsYWNlbWVudCA9PT0gZmFsc2UgJiZcclxuICAgICAgZS50YXJnZXQuaWQgPT09IGBzcXVhcmVfJHtpfWBcclxuICAgICkge1xyXG4gICAgICBpZiAoc3RhdGVDb250cm9sLmNoZWNrQXJyYXkgPT09IHRydWUpIHtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5mb3JFYWNoKCh4KSA9PiB7XHJcbiAgICAgICAgICBpZiAoeCAhPT0gbnVsbCAmJiAhc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMuaW5jbHVkZXMoeCkpIHtcclxuICAgICAgICAgICAgeC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIlwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBob3Zlck9uZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpfWApO1xyXG4gICAgICBsZXQgaG92ZXJUd28gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSAtIDEwfWApO1xyXG4gICAgICBsZXQgaG92ZXJUaHJlZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gMjB9YCk7XHJcbiAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5ID0gW107XHJcbiAgICAgIHN0YXRlQ29udHJvbC5jaGVja0FycmF5ID0gdHJ1ZTtcclxuICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkucHVzaChob3Zlck9uZSwgaG92ZXJUd28sIGhvdmVyVGhyZWUpO1xyXG4gICAgICAvL21hcmsgaXQgZ3JlZW5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIGhvdmVyT25lLmdldEF0dHJpYnV0ZShcIllcIikgPCA4ICYmXHJcbiAgICAgICAgaG92ZXJPbmUuZ2V0QXR0cmlidXRlKFwiWFwiKSA9PT0gaG92ZXJUaHJlZS5nZXRBdHRyaWJ1dGUoXCJYXCIpICYmXHJcbiAgICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyhzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcywgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgIHguc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgeCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB4LmdldEF0dHJpYnV0ZShcIlhcIikgPT09XHJcbiAgICAgICAgICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXlbMF0uZ2V0QXR0cmlidXRlKFwiWFwiKSAmJlxyXG4gICAgICAgICAgICAhc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMuaW5jbHVkZXMoeClcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICB4LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vaG92ZXIgcGF0cm9sIGJvYXQgaG9yaXpvbmFsIGVmZmVjdFxyXG4gICAgZWxzZSBpZiAoXHJcbiAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJQYXRyb2xib2F0LnNwYXduUGF0cm9sYm9hdCA9PT0gdHJ1ZSAmJlxyXG4gICAgICBzdGF0ZUNvbnRyb2wuaG9pem9udGFsX3BsYWNlbWVudCA9PT0gdHJ1ZSAmJlxyXG4gICAgICBlLnRhcmdldC5pZCA9PT0gYHNxdWFyZV8ke2l9YFxyXG4gICAgKSB7XHJcbiAgICAgIGlmIChzdGF0ZUNvbnRyb2wuY2hlY2tBcnJheSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgIGlmICh4ICE9PSBudWxsICYmICFzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcy5pbmNsdWRlcyh4KSkge1xyXG4gICAgICAgICAgICB4LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGhvdmVyT25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2l9YCk7XHJcbiAgICAgIGxldCBob3ZlclR3byA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpICsgMX1gKTtcclxuICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkgPSBbXTtcclxuICAgICAgc3RhdGVDb250cm9sLmNoZWNrQXJyYXkgPSB0cnVlO1xyXG4gICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5wdXNoKGhvdmVyT25lLCBob3ZlclR3byk7XHJcbiAgICAgIC8vbWFyayBpdCBncmVlblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgaG92ZXJPbmUuZ2V0QXR0cmlidXRlKFwiWFwiKSA8IDkgJiZcclxuICAgICAgICBob3Zlck9uZS5nZXRBdHRyaWJ1dGUoXCJZXCIpID09PSBob3ZlclR3by5nZXRBdHRyaWJ1dGUoXCJZXCIpICYmXHJcbiAgICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyhzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcywgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgIHguc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgeCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB4LmdldEF0dHJpYnV0ZShcIllcIikgPT09XHJcbiAgICAgICAgICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXlbMF0uZ2V0QXR0cmlidXRlKFwiWVwiKSAmJlxyXG4gICAgICAgICAgICAhc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMuaW5jbHVkZXMoeClcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICB4LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL2hvdmVyIHBhdHJvbCBib2F0IGVmZmVjdCB2ZXJ0aWNhbGx5XHJcbiAgICBlbHNlIGlmIChcclxuICAgICAgc3RhdGVDb250cm9sLnBsYXllclBhdHJvbGJvYXQuc3Bhd25QYXRyb2xib2F0ID09PSB0cnVlICYmXHJcbiAgICAgIHN0YXRlQ29udHJvbC5ob2l6b250YWxfcGxhY2VtZW50ID09PSBmYWxzZSAmJlxyXG4gICAgICBlLnRhcmdldC5pZCA9PT0gYHNxdWFyZV8ke2l9YFxyXG4gICAgKSB7XHJcbiAgICAgIGlmIChzdGF0ZUNvbnRyb2wuY2hlY2tBcnJheSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5LmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgIGlmICh4ICE9PSBudWxsICYmICFzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcy5pbmNsdWRlcyh4KSkge1xyXG4gICAgICAgICAgICB4LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGhvdmVyT25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2l9YCk7XHJcbiAgICAgIGxldCBob3ZlclR3byA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gMTB9YCk7XHJcbiAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5ID0gW107XHJcbiAgICAgIHN0YXRlQ29udHJvbC5jaGVja0FycmF5ID0gdHJ1ZTtcclxuICAgICAgc3RhdGVDb250cm9sLmhvdmVyQXJyYXkucHVzaChob3Zlck9uZSwgaG92ZXJUd28pO1xyXG4gICAgICAvL21hcmsgaXQgZ3JlZW5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIGhvdmVyT25lLmdldEF0dHJpYnV0ZShcIllcIikgPCA5ICYmXHJcbiAgICAgICAgaG92ZXJPbmUuZ2V0QXR0cmlidXRlKFwiWFwiKSA9PT0gaG92ZXJUd28uZ2V0QXR0cmlidXRlKFwiWFwiKSAmJlxyXG4gICAgICAgICFmaW5kU2hhcmVkRWxlbWVudHMoc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMsIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5KVxyXG4gICAgICApIHtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5mb3JFYWNoKCh4KSA9PiB7XHJcbiAgICAgICAgICB4LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuaG92ZXJBcnJheS5mb3JFYWNoKCh4KSA9PiB7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHggIT09IG51bGwgJiZcclxuICAgICAgICAgICAgeC5nZXRBdHRyaWJ1dGUoXCJYXCIpID09PVxyXG4gICAgICAgICAgICAgIHN0YXRlQ29udHJvbC5ob3ZlckFycmF5WzBdLmdldEF0dHJpYnV0ZShcIlhcIikgJiZcclxuICAgICAgICAgICAgIXN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzLmluY2x1ZGVzKHgpXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgeC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxubGV0IGNyZWF0ZUdhbWVCb2FyZCA9ICgpID0+IHtcclxuICBzdGF0ZUNvbnRyb2wuY3VycmVudEZ1bmN0aW9uID0gY3JlYXRlQ2Fycmllck9uQm9hcmQ7XHJcbiAgc3RhdGVDb250cm9sLmJvYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzdGF0ZUNvbnRyb2wuY3VycmVudEZ1bmN0aW9uKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XHJcbiAgICBsZXQgc3F1YXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGlmIChpIDwgMTApIHtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIlhcIiwgaSk7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJZXCIsIDkpO1xyXG4gICAgfSBlbHNlIGlmIChpIDwgMjApIHtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIlhcIiwgaSAtIDEwKTtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIllcIiwgOCk7XHJcbiAgICB9IGVsc2UgaWYgKGkgPCAzMCkge1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWFwiLCBpIC0gMjApO1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWVwiLCA3KTtcclxuICAgIH0gZWxzZSBpZiAoaSA8IDQwKSB7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJYXCIsIGkgLSAzMCk7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJZXCIsIDYpO1xyXG4gICAgfSBlbHNlIGlmIChpIDwgNTApIHtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIlhcIiwgaSAtIDQwKTtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIllcIiwgNSk7XHJcbiAgICB9IGVsc2UgaWYgKGkgPCA2MCkge1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWFwiLCBpIC0gNTApO1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWVwiLCA0KTtcclxuICAgIH0gZWxzZSBpZiAoaSA8IDcwKSB7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJYXCIsIGkgLSA2MCk7XHJcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJZXCIsIDMpO1xyXG4gICAgfSBlbHNlIGlmIChpIDwgODApIHtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIlhcIiwgaSAtIDcwKTtcclxuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIllcIiwgMik7XHJcbiAgICB9IGVsc2UgaWYgKGkgPCA5MCkge1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWFwiLCBpIC0gODApO1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWVwiLCAxKTtcclxuICAgIH0gZWxzZSBpZiAoaSA8IDEwMCkge1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWFwiLCBpIC0gOTApO1xyXG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwiWVwiLCAwKTtcclxuICAgIH1cclxuICAgIHNxdWFyZS5pZCA9IGBzcXVhcmVfJHtpfWA7XHJcbiAgICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBjaGVjayk7XHJcbiAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZChcInNxdWFyZXNcIik7XHJcbiAgICBzdGF0ZUNvbnRyb2wuYm9hcmQuYXBwZW5kQ2hpbGQoc3F1YXJlKTtcclxuICAgIHN0YXRlQ29udHJvbC5hdmFpbGlibGVTcXVhcmVzLnB1c2goaSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHsgc2hpcEZhY3RvcnksIGNyZWF0ZUdhbWVCb2FyZCwgc3RhdGVDb250cm9sLCBmaW5kU2hhcmVkRWxlbWVudHMgfTtcclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2JhdHRsZXNoaXAuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9iYXR0bGVzaGlwLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7XHJcbiAgc2hpcEZhY3RvcnksXHJcbiAgc3RhdGVDb250cm9sLFxyXG4gIGZpbmRTaGFyZWRFbGVtZW50cyxcclxufSBmcm9tIFwiLi9iYXR0bGVzaGlwX2NyZWF0aW9uXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUVuZW15RmxlZXQsIGNyZWF0ZUVuZW15R3JpZCB9IGZyb20gXCIuL2VuZW15X2ZsZWV0X2NyZWF0aW9uXCI7XHJcbmltcG9ydCB7IGNyZWF0ZU5hbWUgfSBmcm9tIFwiLi9wbGF5ZXJfY3JlYXRpb25cIjtcclxuaW1wb3J0IFwiLi9iYXR0bGVzaGlwLmNzc1wiO1xyXG5cclxuLy9jaGFuZ2UgdmVydGljYWwvaG9yaXpvbnRhbCBwb3NpdG9uIG9mIHRoZSBib2F0c1xyXG5sZXQgY2hhbmdlQXhpcyA9ICgpID0+IHtcclxuICBpZiAoc3RhdGVDb250cm9sLmhvaXpvbnRhbF9wbGFjZW1lbnQgPT09IHRydWUpIHtcclxuICAgIHN0YXRlQ29udHJvbC5ob2l6b250YWxfcGxhY2VtZW50ID0gZmFsc2U7XHJcbiAgfSBlbHNlIHtcclxuICAgIHN0YXRlQ29udHJvbC5ob2l6b250YWxfcGxhY2VtZW50ID0gdHJ1ZTtcclxuICB9XHJcbn07XHJcblxyXG5sZXQgc2hpcFNldHVwVGV4dCA9IChzaGlwSGFzQmVlblNldE1lc3NhZ2UsIG5leHRTaGlwVG9CZVNldE1lc3NhZ2UpID0+IHtcclxuICBzdGF0ZUNvbnRyb2wudGV4dERpc3BsYXkudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gIHN0YXRlQ29udHJvbC50ZXh0RGlzcGxheS5jbGFzc0xpc3QucmVtb3ZlKFwidGV4dF9kaXNwbGF5XCIpO1xyXG4gIHN0YXRlQ29udHJvbC50ZXh0RGlzcGxheS5jbGFzc0xpc3QuYWRkKFwidGV4dF9kaXNwbGF5MlwiKTtcclxuICBzdGF0ZUNvbnRyb2wuYm9hcmQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHN0YXRlQ29udHJvbC5jdXJyZW50RnVuY3Rpb24pO1xyXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LmNsYXNzTGlzdC5yZW1vdmUoXCJ0ZXh0X2Rpc3BsYXkyXCIpO1xyXG4gICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LnRleHRDb250ZW50ID0gc2hpcEhhc0JlZW5TZXRNZXNzYWdlO1xyXG4gICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LmNsYXNzTGlzdC5hZGQoXCJ0ZXh0X2Rpc3BsYXlcIik7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LmNsYXNzTGlzdC5yZW1vdmUoXCJ0ZXh0X2Rpc3BsYXlcIik7XHJcbiAgICAgIHN0YXRlQ29udHJvbC50ZXh0RGlzcGxheS5jbGFzc0xpc3QuYWRkKFwidGV4dF9kaXNwbGF5MlwiKTtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LnRleHRDb250ZW50ID0gbmV4dFNoaXBUb0JlU2V0TWVzc2FnZTtcclxuICAgICAgICBzdGF0ZUNvbnRyb2wudGV4dERpc3BsYXkuY2xhc3NMaXN0LnJlbW92ZShcInRleHRfZGlzcGxheTJcIik7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLnRleHREaXNwbGF5LmNsYXNzTGlzdC5hZGQoXCJ0ZXh0X2Rpc3BsYXlcIik7XHJcbiAgICAgICAgc3RhdGVDb250cm9sLmJvYXJkLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wuY3VycmVudEZ1bmN0aW9uXHJcbiAgICAgICAgKTtcclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9LCAxNjAwKTtcclxuICB9LCA1MDApO1xyXG59O1xyXG5cclxubGV0IGNyZWF0ZVNoaXBzID0gKCkgPT4ge1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hhbmdlX2F4aXNcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNoYW5nZUF4aXMpO1xyXG4gIGxldCBjYXJyaWVyID0gbmV3IHNoaXBGYWN0b3J5KFwiQ2FycmllclwiLCA1LCA1KTtcclxuICBsZXQgYmF0dGxlc2hpcCA9IG5ldyBzaGlwRmFjdG9yeShcIkJhdHRsZXNoaXBcIiwgNCwgNCk7XHJcbiAgbGV0IGNydWlzZXIgPSBuZXcgc2hpcEZhY3RvcnkoXCJDcnVpc2VyXCIsIDMsIDMpO1xyXG4gIGxldCBzdWJtYXJpbmUgPSBuZXcgc2hpcEZhY3RvcnkoXCJTdWJtYXJpbmVcIiwgMywgMyk7XHJcbiAgbGV0IHBhdHJvbGJvYXQgPSBuZXcgc2hpcEZhY3RvcnkoXCJQYXRyb2wgQm9hdFwiLCAyLCAyKTtcclxuICBzdGF0ZUNvbnRyb2wucGxheWVyQ2Fycmllci5zaGlwID0gY2FycmllcjtcclxuICBzdGF0ZUNvbnRyb2wucGxheWVyQmF0dGxlc2hpcC5zaGlwID0gYmF0dGxlc2hpcDtcclxuICBzdGF0ZUNvbnRyb2wucGxheWVyQ3J1aXNlci5zaGlwID0gY3J1aXNlcjtcclxuICBzdGF0ZUNvbnRyb2wucGxheWVyU3VibWFyaW5lLnNoaXAgPSBzdWJtYXJpbmU7XHJcbiAgc3RhdGVDb250cm9sLnBsYXllclBhdHJvbGJvYXQuc2hpcCA9IHBhdHJvbGJvYXQ7XHJcbn07XHJcblxyXG5sZXQgY3JlYXRlQ2Fycmllck9uQm9hcmQgPSAoZSkgPT4ge1xyXG4gIGlmIChzdGF0ZUNvbnRyb2wucGxheWVyQ2Fycmllci5zcGF3bkNhcnJpZXIgPT09IHRydWUpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcclxuICAgICAgaWYgKGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcIlhcIikgPiA1KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChcclxuICAgICAgICBlLnRhcmdldC5pZCA9PT0gYHNxdWFyZV8ke2l9YCAmJlxyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob2l6b250YWxfcGxhY2VtZW50ID09PSB0cnVlXHJcbiAgICAgICkge1xyXG4gICAgICAgIGxldCBjYXJyaWVyX3Bvc2l0aW9uXzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aX1gKTtcclxuICAgICAgICBsZXQgY2Fycmllcl9wb3NpdGlvbl8yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgKyAxfWApO1xyXG4gICAgICAgIGxldCBjYXJyaWVyX3Bvc2l0aW9uXzMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSArIDJ9YCk7XHJcbiAgICAgICAgbGV0IGNhcnJpZXJfcG9zaXRpb25fNCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpICsgM31gKTtcclxuICAgICAgICBsZXQgY2Fycmllcl9wb3NpdGlvbl81ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgKyA0fWApO1xyXG4gICAgICAgIGxldCB0ZW1wQ2FycmllckFycmF5ID0gW107XHJcbiAgICAgICAgdGVtcENhcnJpZXJBcnJheS5wdXNoKFxyXG4gICAgICAgICAgY2Fycmllcl9wb3NpdGlvbl8xLFxyXG4gICAgICAgICAgY2Fycmllcl9wb3NpdGlvbl8yLFxyXG4gICAgICAgICAgY2Fycmllcl9wb3NpdGlvbl8zLFxyXG4gICAgICAgICAgY2Fycmllcl9wb3NpdGlvbl80LFxyXG4gICAgICAgICAgY2Fycmllcl9wb3NpdGlvbl81XHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAhdGVtcENhcnJpZXJBcnJheS5pbmNsdWRlcyhudWxsKSAmJlxyXG4gICAgICAgICAgY2Fycmllcl9wb3NpdGlvbl8xLmdldEF0dHJpYnV0ZShcIllcIikgPT09XHJcbiAgICAgICAgICAgIGNhcnJpZXJfcG9zaXRpb25fNS5nZXRBdHRyaWJ1dGUoXCJZXCIpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRlbXBDYXJyaWVyQXJyYXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgdGVtcENhcnJpZXJBcnJheVtqXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIm9yYW5nZVwiO1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcy5wdXNoKHRlbXBDYXJyaWVyQXJyYXlbal0pO1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyQ2Fycmllci5wb3NpdGlvbi5wdXNoKHRlbXBDYXJyaWVyQXJyYXlbal0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3RhdGVDb250cm9sLnBsYXllckNhcnJpZXIuc3Bhd25DYXJyaWVyID0gZmFsc2U7XHJcbiAgICAgICAgICBzaGlwU2V0dXBUZXh0KFxyXG4gICAgICAgICAgICBcIkNhcnJpZXIgaGFzIGJlZW4gc2V0IVwiLFxyXG4gICAgICAgICAgICBcIlBsZWFzZSBzZXQgZG93biB5b3VyIGJhdHRsZXNoaXAhXCJcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wuY3VycmVudEZ1bmN0aW9uID0gY3JlYXRlQmF0dGxlc2hpcE9uQm9hcmQ7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgc3RhdGVDb250cm9sLnBsYXllckJhdHRsZXNoaXAuc3Bhd25CYXR0bGVzaGlwID0gdHJ1ZTtcclxuICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIGUudGFyZ2V0LmlkID09PSBgc3F1YXJlXyR7aX1gICYmXHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvaXpvbnRhbF9wbGFjZW1lbnQgPT09IGZhbHNlXHJcbiAgICAgICkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJZXCIpID4gNSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY2Fycmllcl9wb3NpdGlvbl8xID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2l9YCk7XHJcbiAgICAgICAgbGV0IGNhcnJpZXJfcG9zaXRpb25fMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gMTB9YCk7XHJcbiAgICAgICAgbGV0IGNhcnJpZXJfcG9zaXRpb25fMyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gMjB9YCk7XHJcbiAgICAgICAgbGV0IGNhcnJpZXJfcG9zaXRpb25fNCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gMzB9YCk7XHJcbiAgICAgICAgbGV0IGNhcnJpZXJfcG9zaXRpb25fNSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gNDB9YCk7XHJcbiAgICAgICAgbGV0IHRlbXBDYXJyaWVyQXJyYXkgPSBbXTtcclxuICAgICAgICB0ZW1wQ2FycmllckFycmF5LnB1c2goXHJcbiAgICAgICAgICBjYXJyaWVyX3Bvc2l0aW9uXzEsXHJcbiAgICAgICAgICBjYXJyaWVyX3Bvc2l0aW9uXzIsXHJcbiAgICAgICAgICBjYXJyaWVyX3Bvc2l0aW9uXzMsXHJcbiAgICAgICAgICBjYXJyaWVyX3Bvc2l0aW9uXzQsXHJcbiAgICAgICAgICBjYXJyaWVyX3Bvc2l0aW9uXzVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICF0ZW1wQ2FycmllckFycmF5LmluY2x1ZGVzKG51bGwpICYmXHJcbiAgICAgICAgICBjYXJyaWVyX3Bvc2l0aW9uXzEuZ2V0QXR0cmlidXRlKFwiWFwiKSA9PT1cclxuICAgICAgICAgICAgY2Fycmllcl9wb3NpdGlvbl81LmdldEF0dHJpYnV0ZShcIlhcIilcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGVtcENhcnJpZXJBcnJheS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICB0ZW1wQ2FycmllckFycmF5W2pdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwib3JhbmdlXCI7XHJcbiAgICAgICAgICAgIHN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzLnB1c2godGVtcENhcnJpZXJBcnJheVtqXSk7XHJcbiAgICAgICAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJDYXJyaWVyLnBvc2l0aW9uLnB1c2godGVtcENhcnJpZXJBcnJheVtqXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyQ2Fycmllci5zcGF3bkNhcnJpZXIgPSBmYWxzZTtcclxuICAgICAgICAgIHNoaXBTZXR1cFRleHQoXHJcbiAgICAgICAgICAgIFwiQ2FycmllciBoYXMgYmVlbiBzZXQhXCIsXHJcbiAgICAgICAgICAgIFwiUGxlYXNlIHNldCBkb3duIHlvdXIgYmF0dGxlc2hpcCFcIlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHN0YXRlQ29udHJvbC5jdXJyZW50RnVuY3Rpb24gPSBjcmVhdGVCYXR0bGVzaGlwT25Cb2FyZDtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyQmF0dGxlc2hpcC5zcGF3bkJhdHRsZXNoaXAgPSB0cnVlO1xyXG4gICAgICAgICAgfSwgMzAwMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5sZXQgY3JlYXRlQmF0dGxlc2hpcE9uQm9hcmQgPSAoZSkgPT4ge1xyXG4gIGlmIChzdGF0ZUNvbnRyb2wucGxheWVyQmF0dGxlc2hpcC5zcGF3bkJhdHRsZXNoaXAgPT09IHRydWUpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGUudGFyZ2V0LmlkID09PSBgc3F1YXJlXyR7aX1gICYmXHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvaXpvbnRhbF9wbGFjZW1lbnQgPT09IHRydWVcclxuICAgICAgKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcIlhcIikgPiA2KSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBiYXR0bGVTaGlwX3Bvc2l0aW9uXzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aX1gKTtcclxuICAgICAgICBsZXQgYmF0dGxlU2hpcF9wb3NpdGlvbl8yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgKyAxfWApO1xyXG4gICAgICAgIGxldCBiYXR0bGVTaGlwX3Bvc2l0aW9uXzMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSArIDJ9YCk7XHJcbiAgICAgICAgbGV0IGJhdHRsZVNoaXBfcG9zaXRpb25fNCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpICsgM31gKTtcclxuICAgICAgICBsZXQgdGVtcEJhdHRsZVNoaXBBcnJheSA9IFtdO1xyXG4gICAgICAgIHRlbXBCYXR0bGVTaGlwQXJyYXkucHVzaChcclxuICAgICAgICAgIGJhdHRsZVNoaXBfcG9zaXRpb25fMSxcclxuICAgICAgICAgIGJhdHRsZVNoaXBfcG9zaXRpb25fMixcclxuICAgICAgICAgIGJhdHRsZVNoaXBfcG9zaXRpb25fMyxcclxuICAgICAgICAgIGJhdHRsZVNoaXBfcG9zaXRpb25fNFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgYmF0dGxlU2hpcF9wb3NpdGlvbl8xLmdldEF0dHJpYnV0ZShcIllcIikgPT09XHJcbiAgICAgICAgICAgIGJhdHRsZVNoaXBfcG9zaXRpb25fNC5nZXRBdHRyaWJ1dGUoXCJZXCIpICYmXHJcbiAgICAgICAgICAhZmluZFNoYXJlZEVsZW1lbnRzKHRlbXBCYXR0bGVTaGlwQXJyYXksIHN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0ZW1wQmF0dGxlU2hpcEFycmF5Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIHRlbXBCYXR0bGVTaGlwQXJyYXlbal0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2IoNDUsIDE5MiwgMjUwKVwiO1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcy5wdXNoKHRlbXBCYXR0bGVTaGlwQXJyYXlbal0pO1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyQmF0dGxlc2hpcC5wb3NpdGlvbi5wdXNoKHRlbXBCYXR0bGVTaGlwQXJyYXlbal0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3RhdGVDb250cm9sLnBsYXllckJhdHRsZXNoaXAuc3Bhd25CYXR0bGVzaGlwID0gZmFsc2U7XHJcbiAgICAgICAgICBzaGlwU2V0dXBUZXh0KFxyXG4gICAgICAgICAgICBcIkJhdHRsZXNoaXAgaGFzIGJlZW4gcGxhY2VkIVwiLFxyXG4gICAgICAgICAgICBcIlBsZWFzZSBzZXQgdXAgeW91ciBDcnVpc2VyLi4uXCJcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wuY3VycmVudEZ1bmN0aW9uID0gY3JlYXRlQ3J1aXNlck9uQm9hcmQ7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgc3RhdGVDb250cm9sLnBsYXllckNydWlzZXIuc3Bhd25DcnVpc2VyID0gdHJ1ZTtcclxuICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIGUudGFyZ2V0LmlkID09PSBgc3F1YXJlXyR7aX1gICYmXHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvaXpvbnRhbF9wbGFjZW1lbnQgPT09IGZhbHNlXHJcbiAgICAgICkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJZXCIpID4gNikge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYmF0dGxlU2hpcF9wb3NpdGlvbl8xID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2l9YCk7XHJcbiAgICAgICAgbGV0IGJhdHRsZVNoaXBfcG9zaXRpb25fMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gMTB9YCk7XHJcbiAgICAgICAgbGV0IGJhdHRsZVNoaXBfcG9zaXRpb25fMyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gMjB9YCk7XHJcbiAgICAgICAgbGV0IGJhdHRsZVNoaXBfcG9zaXRpb25fNCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gMzB9YCk7XHJcbiAgICAgICAgbGV0IHRlbXBCYXR0bGVTaGlwQXJyYXkgPSBbXTtcclxuICAgICAgICB0ZW1wQmF0dGxlU2hpcEFycmF5LnB1c2goXHJcbiAgICAgICAgICBiYXR0bGVTaGlwX3Bvc2l0aW9uXzEsXHJcbiAgICAgICAgICBiYXR0bGVTaGlwX3Bvc2l0aW9uXzIsXHJcbiAgICAgICAgICBiYXR0bGVTaGlwX3Bvc2l0aW9uXzMsXHJcbiAgICAgICAgICBiYXR0bGVTaGlwX3Bvc2l0aW9uXzRcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGJhdHRsZVNoaXBfcG9zaXRpb25fMS5nZXRBdHRyaWJ1dGUoXCJYXCIpID09PVxyXG4gICAgICAgICAgICBiYXR0bGVTaGlwX3Bvc2l0aW9uXzQuZ2V0QXR0cmlidXRlKFwiWFwiKSAmJlxyXG4gICAgICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyh0ZW1wQmF0dGxlU2hpcEFycmF5LCBzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcylcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGVtcEJhdHRsZVNoaXBBcnJheS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICB0ZW1wQmF0dGxlU2hpcEFycmF5W2pdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDQ1LCAxOTIsIDI1MClcIjtcclxuICAgICAgICAgICAgc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMucHVzaCh0ZW1wQmF0dGxlU2hpcEFycmF5W2pdKTtcclxuICAgICAgICAgICAgc3RhdGVDb250cm9sLnBsYXllckJhdHRsZXNoaXAucG9zaXRpb24ucHVzaCh0ZW1wQmF0dGxlU2hpcEFycmF5W2pdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJCYXR0bGVzaGlwLnNwYXduQmF0dGxlc2hpcCA9IGZhbHNlO1xyXG4gICAgICAgICAgc2hpcFNldHVwVGV4dChcclxuICAgICAgICAgICAgXCJCYXR0bGVzaGlwIGhhcyBiZWVuIHBsYWNlZCFcIixcclxuICAgICAgICAgICAgXCJQbGVhc2Ugc2V0IHVwIHlvdXIgQ3J1aXNlci4uLlwiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgc3RhdGVDb250cm9sLmN1cnJlbnRGdW5jdGlvbiA9IGNyZWF0ZUNydWlzZXJPbkJvYXJkO1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJDcnVpc2VyLnNwYXduQ3J1aXNlciA9IHRydWU7XHJcbiAgICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmxldCBjcmVhdGVDcnVpc2VyT25Cb2FyZCA9IChlKSA9PiB7XHJcbiAgaWYgKHN0YXRlQ29udHJvbC5wbGF5ZXJDcnVpc2VyLnNwYXduQ3J1aXNlciA9PT0gdHJ1ZSkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgZS50YXJnZXQuaWQgPT09IGBzcXVhcmVfJHtpfWAgJiZcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuaG9pem9udGFsX3BsYWNlbWVudCA9PT0gdHJ1ZVxyXG4gICAgICApIHtcclxuICAgICAgICBpZiAoZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiWFwiKSA+IDcpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNydWlzZXJfcG9zaXRpb25fMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpfWApO1xyXG4gICAgICAgIGxldCBjcnVpc2VyX3Bvc2l0aW9uXzIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSArIDF9YCk7XHJcbiAgICAgICAgbGV0IGNydWlzZXJfcG9zaXRpb25fMyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpICsgMn1gKTtcclxuICAgICAgICBsZXQgdGVtcENydWlzZXJBcnJheSA9IFtdO1xyXG4gICAgICAgIHRlbXBDcnVpc2VyQXJyYXkucHVzaChcclxuICAgICAgICAgIGNydWlzZXJfcG9zaXRpb25fMSxcclxuICAgICAgICAgIGNydWlzZXJfcG9zaXRpb25fMixcclxuICAgICAgICAgIGNydWlzZXJfcG9zaXRpb25fM1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgY3J1aXNlcl9wb3NpdGlvbl8xLmdldEF0dHJpYnV0ZShcIllcIikgPT09XHJcbiAgICAgICAgICAgIGNydWlzZXJfcG9zaXRpb25fMy5nZXRBdHRyaWJ1dGUoXCJZXCIpICYmXHJcbiAgICAgICAgICAhZmluZFNoYXJlZEVsZW1lbnRzKHRlbXBDcnVpc2VyQXJyYXksIHN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0ZW1wQ3J1aXNlckFycmF5Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIHRlbXBDcnVpc2VyQXJyYXlbal0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2IoMzQsIDI1MCwgMTA2KVwiO1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcy5wdXNoKHRlbXBDcnVpc2VyQXJyYXlbal0pO1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyQ3J1aXNlci5wb3NpdGlvbi5wdXNoKHRlbXBDcnVpc2VyQXJyYXlbal0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3RhdGVDb250cm9sLnBsYXllckNydWlzZXIuc3Bhd25DcnVpc2VyID0gZmFsc2U7XHJcbiAgICAgICAgICBzaGlwU2V0dXBUZXh0KFwiQ3J1aXNlciBpcyBzZXQhXCIsIFwiUGxlYXNlIHN1Ym1lcmdlIHlvdXIgc3VibWFyaW5lLi4uXCIpO1xyXG4gICAgICAgICAgc3RhdGVDb250cm9sLmN1cnJlbnRGdW5jdGlvbiA9IGNyZWF0ZVN1Ym1hcmluZU9uQm9hcmQ7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgc3RhdGVDb250cm9sLnBsYXllclN1Ym1hcmluZS5zcGF3blN1Ym1hcmluZSA9IHRydWU7XHJcbiAgICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICBlLnRhcmdldC5pZCA9PT0gYHNxdWFyZV8ke2l9YCAmJlxyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob2l6b250YWxfcGxhY2VtZW50ID09PSBmYWxzZVxyXG4gICAgICApIHtcclxuICAgICAgICBpZiAoZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiWVwiKSA+IDcpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNydWlzZXJfcG9zaXRpb25fMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpfWApO1xyXG4gICAgICAgIGxldCBjcnVpc2VyX3Bvc2l0aW9uXzIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSAtIDEwfWApO1xyXG4gICAgICAgIGxldCBjcnVpc2VyX3Bvc2l0aW9uXzMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSAtIDIwfWApO1xyXG4gICAgICAgIGxldCB0ZW1wQ3J1aXNlckFycmF5ID0gW107XHJcbiAgICAgICAgdGVtcENydWlzZXJBcnJheS5wdXNoKFxyXG4gICAgICAgICAgY3J1aXNlcl9wb3NpdGlvbl8xLFxyXG4gICAgICAgICAgY3J1aXNlcl9wb3NpdGlvbl8yLFxyXG4gICAgICAgICAgY3J1aXNlcl9wb3NpdGlvbl8zXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBjcnVpc2VyX3Bvc2l0aW9uXzEuZ2V0QXR0cmlidXRlKFwiWFwiKSA9PT1cclxuICAgICAgICAgICAgY3J1aXNlcl9wb3NpdGlvbl8zLmdldEF0dHJpYnV0ZShcIlhcIikgJiZcclxuICAgICAgICAgICFmaW5kU2hhcmVkRWxlbWVudHModGVtcENydWlzZXJBcnJheSwgc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRlbXBDcnVpc2VyQXJyYXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgdGVtcENydWlzZXJBcnJheVtqXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJnYigzNCwgMjUwLCAxMDYpXCI7XHJcbiAgICAgICAgICAgIHN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzLnB1c2godGVtcENydWlzZXJBcnJheVtqXSk7XHJcbiAgICAgICAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJDcnVpc2VyLnBvc2l0aW9uLnB1c2godGVtcENydWlzZXJBcnJheVtqXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyQ3J1aXNlci5zcGF3bkNydWlzZXIgPSBmYWxzZTtcclxuICAgICAgICAgIHNoaXBTZXR1cFRleHQoXCJDcnVpc2VyIGlzIHNldCFcIiwgXCJQbGVhc2Ugc3VibWVyZ2UgeW91ciBzdWJtYXJpbmUuLi5cIik7XHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wuY3VycmVudEZ1bmN0aW9uID0gY3JlYXRlU3VibWFyaW5lT25Cb2FyZDtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyU3VibWFyaW5lLnNwYXduU3VibWFyaW5lID0gdHJ1ZTtcclxuICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxubGV0IGNyZWF0ZVN1Ym1hcmluZU9uQm9hcmQgPSAoZSkgPT4ge1xyXG4gIGlmIChzdGF0ZUNvbnRyb2wucGxheWVyU3VibWFyaW5lLnNwYXduU3VibWFyaW5lID09PSB0cnVlKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBlLnRhcmdldC5pZCA9PT0gYHNxdWFyZV8ke2l9YCAmJlxyXG4gICAgICAgIHN0YXRlQ29udHJvbC5ob2l6b250YWxfcGxhY2VtZW50ID09PSB0cnVlXHJcbiAgICAgICkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJYXCIpID4gNykge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3VibWFyaW5lX3Bvc2l0aW9uXzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aX1gKTtcclxuICAgICAgICBsZXQgc3VibWFyaW5lX3Bvc2l0aW9uXzIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSArIDF9YCk7XHJcbiAgICAgICAgbGV0IHN1Ym1hcmluZV9wb3NpdGlvbl8zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgKyAyfWApO1xyXG4gICAgICAgIGxldCB0ZW1wU3VibWFyaW5lQXJyYXkgPSBbXTtcclxuICAgICAgICB0ZW1wU3VibWFyaW5lQXJyYXkucHVzaChcclxuICAgICAgICAgIHN1Ym1hcmluZV9wb3NpdGlvbl8xLFxyXG4gICAgICAgICAgc3VibWFyaW5lX3Bvc2l0aW9uXzIsXHJcbiAgICAgICAgICBzdWJtYXJpbmVfcG9zaXRpb25fM1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgc3VibWFyaW5lX3Bvc2l0aW9uXzEuZ2V0QXR0cmlidXRlKFwiWVwiKSA9PT1cclxuICAgICAgICAgICAgc3VibWFyaW5lX3Bvc2l0aW9uXzMuZ2V0QXR0cmlidXRlKFwiWVwiKSAmJlxyXG4gICAgICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyh0ZW1wU3VibWFyaW5lQXJyYXksIHN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0ZW1wU3VibWFyaW5lQXJyYXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgdGVtcFN1Ym1hcmluZUFycmF5W2pdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDE4MiwgMzQsIDI1MClcIjtcclxuICAgICAgICAgICAgc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMucHVzaCh0ZW1wU3VibWFyaW5lQXJyYXlbal0pO1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyU3VibWFyaW5lLnBvc2l0aW9uLnB1c2godGVtcFN1Ym1hcmluZUFycmF5W2pdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJTdWJtYXJpbmUuc3Bhd25TdWJtYXJpbmUgPSBmYWxzZTtcclxuICAgICAgICAgIHNoaXBTZXR1cFRleHQoXHJcbiAgICAgICAgICAgIFwiU3VibWFyaW5lIGlzIHN1Ym1lcmdlZCFcIixcclxuICAgICAgICAgICAgXCJQbGVhc2Ugc2VuZCBvdXQgeW91ciBwYXRyb2wgYm9hdC4uXCJcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wuY3VycmVudEZ1bmN0aW9uID0gY3JlYXRlUGF0cm9sYm9hdE9uQm9hcmQ7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgc3RhdGVDb250cm9sLnBsYXllclBhdHJvbGJvYXQuc3Bhd25QYXRyb2xib2F0ID0gdHJ1ZTtcclxuICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIGUudGFyZ2V0LmlkID09PSBgc3F1YXJlXyR7aX1gICYmXHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvaXpvbnRhbF9wbGFjZW1lbnQgPT09IGZhbHNlXHJcbiAgICAgICkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJZXCIpID4gNykge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3VibWFyaW5lX3Bvc2l0aW9uXzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aX1gKTtcclxuICAgICAgICBsZXQgc3VibWFyaW5lX3Bvc2l0aW9uXzIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aSAtIDEwfWApO1xyXG4gICAgICAgIGxldCBzdWJtYXJpbmVfcG9zaXRpb25fMyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzcXVhcmVfJHtpIC0gMjB9YCk7XHJcbiAgICAgICAgbGV0IHRlbXBTdWJtYXJpbmVBcnJheSA9IFtdO1xyXG4gICAgICAgIHRlbXBTdWJtYXJpbmVBcnJheS5wdXNoKFxyXG4gICAgICAgICAgc3VibWFyaW5lX3Bvc2l0aW9uXzEsXHJcbiAgICAgICAgICBzdWJtYXJpbmVfcG9zaXRpb25fMixcclxuICAgICAgICAgIHN1Ym1hcmluZV9wb3NpdGlvbl8zXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBzdWJtYXJpbmVfcG9zaXRpb25fMS5nZXRBdHRyaWJ1dGUoXCJYXCIpID09PVxyXG4gICAgICAgICAgICBzdWJtYXJpbmVfcG9zaXRpb25fMy5nZXRBdHRyaWJ1dGUoXCJYXCIpICYmXHJcbiAgICAgICAgICAhZmluZFNoYXJlZEVsZW1lbnRzKHRlbXBTdWJtYXJpbmVBcnJheSwgc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRlbXBTdWJtYXJpbmVBcnJheS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICB0ZW1wU3VibWFyaW5lQXJyYXlbal0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2IoMTgyLCAzNCwgMjUwKVwiO1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcy5wdXNoKHRlbXBTdWJtYXJpbmVBcnJheVtqXSk7XHJcbiAgICAgICAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJTdWJtYXJpbmUucG9zaXRpb24ucHVzaCh0ZW1wU3VibWFyaW5lQXJyYXlbal0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3RhdGVDb250cm9sLnBsYXllclN1Ym1hcmluZS5zcGF3blN1Ym1hcmluZSA9IGZhbHNlO1xyXG4gICAgICAgICAgc2hpcFNldHVwVGV4dChcclxuICAgICAgICAgICAgXCJTdWJtYXJpbmUgaXMgc3VibWVyZ2VkIVwiLFxyXG4gICAgICAgICAgICBcIlBsZWFzZSBzZW5kIG91dCB5b3VyIHBhdHJvbCBib2F0Li5cIlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHN0YXRlQ29udHJvbC5jdXJyZW50RnVuY3Rpb24gPSBjcmVhdGVQYXRyb2xib2F0T25Cb2FyZDtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyUGF0cm9sYm9hdC5zcGF3blBhdHJvbGJvYXQgPSB0cnVlO1xyXG4gICAgICAgICAgfSwgMzAwMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5sZXQgY3JlYXRlUGF0cm9sYm9hdE9uQm9hcmQgPSAoZSkgPT4ge1xyXG4gIGlmIChzdGF0ZUNvbnRyb2wucGxheWVyUGF0cm9sYm9hdC5zcGF3blBhdHJvbGJvYXQgPT09IHRydWUpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGUudGFyZ2V0LmlkID09PSBgc3F1YXJlXyR7aX1gICYmXHJcbiAgICAgICAgc3RhdGVDb250cm9sLmhvaXpvbnRhbF9wbGFjZW1lbnQgPT09IHRydWVcclxuICAgICAgKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcIlhcIikgPiA4KSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwYXRyb2xCb2F0X3Bvc2l0aW9uXzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aX1gKTtcclxuICAgICAgICBsZXQgcGF0cm9sQm9hdF9wb3NpdGlvbl8yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgKyAxfWApO1xyXG4gICAgICAgIGxldCB0ZW1wUGF0cm9sYm9hdEFycmF5ID0gW107XHJcbiAgICAgICAgdGVtcFBhdHJvbGJvYXRBcnJheS5wdXNoKHBhdHJvbEJvYXRfcG9zaXRpb25fMSwgcGF0cm9sQm9hdF9wb3NpdGlvbl8yKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBwYXRyb2xCb2F0X3Bvc2l0aW9uXzEuZ2V0QXR0cmlidXRlKFwiWVwiKSA9PT1cclxuICAgICAgICAgICAgcGF0cm9sQm9hdF9wb3NpdGlvbl8yLmdldEF0dHJpYnV0ZShcIllcIikgJiZcclxuICAgICAgICAgICFmaW5kU2hhcmVkRWxlbWVudHModGVtcFBhdHJvbGJvYXRBcnJheSwgc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRlbXBQYXRyb2xib2F0QXJyYXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgdGVtcFBhdHJvbGJvYXRBcnJheVtqXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJnYigyNTAsIDM0LCAxOTYpXCI7XHJcbiAgICAgICAgICAgIHN0YXRlQ29udHJvbC50YWtlbl9zcWF1cmVzLnB1c2godGVtcFBhdHJvbGJvYXRBcnJheVtqXSk7XHJcbiAgICAgICAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJQYXRyb2xib2F0LnBvc2l0aW9uLnB1c2godGVtcFBhdHJvbGJvYXRBcnJheVtqXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzdGF0ZUNvbnRyb2wucGxheWVyUGF0cm9sYm9hdC5zcGF3blBhdHJvbGJvYXQgPSBmYWxzZTtcclxuICAgICAgICAgIHNoaXBTZXR1cFRleHQoXHJcbiAgICAgICAgICAgIFwiUGF0cm9sYm9hdCBpcyBzdWJtZXJnZWQhXCIsXHJcbiAgICAgICAgICAgIFwiUHJlcGFyZSB0byBlbmdhZ2UgZW5lbXkgZmxlZXQuLi5cIlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHN0YXRlQ29udHJvbC5jdXJyZW50RnVuY3Rpb24gPSBjcmVhdGVFbmVteUZsZWV0O1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNyZWF0ZUVuZW15R3JpZCgpO1xyXG4gICAgICAgICAgfSwgNTAwMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgZS50YXJnZXQuaWQgPT09IGBzcXVhcmVfJHtpfWAgJiZcclxuICAgICAgICBzdGF0ZUNvbnRyb2wuaG9pem9udGFsX3BsYWNlbWVudCA9PT0gZmFsc2VcclxuICAgICAgKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcIllcIikgPiA4KSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwYXRyb2xCb2F0X3Bvc2l0aW9uXzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlXyR7aX1gKTtcclxuICAgICAgICBsZXQgcGF0cm9sQm9hdF9wb3NpdGlvbl8yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNxdWFyZV8ke2kgLSAxMH1gKTtcclxuICAgICAgICBsZXQgdGVtcFBhdHJvbGJvYXRBcnJheSA9IFtdO1xyXG4gICAgICAgIHRlbXBQYXRyb2xib2F0QXJyYXkucHVzaChwYXRyb2xCb2F0X3Bvc2l0aW9uXzEsIHBhdHJvbEJvYXRfcG9zaXRpb25fMik7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHBhdHJvbEJvYXRfcG9zaXRpb25fMS5nZXRBdHRyaWJ1dGUoXCJYXCIpID09PVxyXG4gICAgICAgICAgICBwYXRyb2xCb2F0X3Bvc2l0aW9uXzIuZ2V0QXR0cmlidXRlKFwiWFwiKSAmJlxyXG4gICAgICAgICAgIWZpbmRTaGFyZWRFbGVtZW50cyh0ZW1wUGF0cm9sYm9hdEFycmF5LCBzdGF0ZUNvbnRyb2wudGFrZW5fc3FhdXJlcylcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGVtcFBhdHJvbGJvYXRBcnJheS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICB0ZW1wUGF0cm9sYm9hdEFycmF5W2pdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDI1MCwgMzQsIDE5NilcIjtcclxuICAgICAgICAgICAgc3RhdGVDb250cm9sLnRha2VuX3NxYXVyZXMucHVzaCh0ZW1wUGF0cm9sYm9hdEFycmF5W2pdKTtcclxuICAgICAgICAgICAgc3RhdGVDb250cm9sLnBsYXllclBhdHJvbGJvYXQucG9zaXRpb24ucHVzaCh0ZW1wUGF0cm9sYm9hdEFycmF5W2pdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJQYXRyb2xib2F0LnNwYXduUGF0cm9sYm9hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgc2hpcFNldHVwVGV4dChcclxuICAgICAgICAgICAgXCJQYXRyb2xib2F0IGlzIHN1Ym1lcmdlZCFcIixcclxuICAgICAgICAgICAgXCJQcmVwYXJlIHRvIGVuZ2FnZSBlbmVteSBmbGVldC4uLlwiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgc3RhdGVDb250cm9sLmN1cnJlbnRGdW5jdGlvbiA9IGNyZWF0ZUVuZW15RmxlZXQ7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgY3JlYXRlRW5lbXlHcmlkKCk7XHJcbiAgICAgICAgICB9LCA1MDAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7IGNyZWF0ZUNhcnJpZXJPbkJvYXJkLCBjcmVhdGVTaGlwcyB9O1xyXG5cclxuY3JlYXRlTmFtZSgpO1xyXG4iLCJpbXBvcnQgeyBzdGF0ZUNvbnRyb2wsIGNyZWF0ZUdhbWVCb2FyZCB9IGZyb20gXCIuL2JhdHRsZXNoaXBfY3JlYXRpb25cIjtcclxuaW1wb3J0IHsgY3JlYXRlU2hpcHMgfSBmcm9tIFwiLi9iYXR0bGVzaGlwXCI7XHJcbmltcG9ydCB7IHNoaXBIaXRNZXNzYWdlIH0gZnJvbSBcIi4vYXR0YWNraW5nX3N5c3RlbVwiO1xyXG5cclxubGV0IHN0YXJ0R2FtZSA9IChlKSA9PiB7XHJcbiAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIgfHwgZS50YXJnZXQgPT09IHN0YXRlQ29udHJvbC5lbnRlckluZm8pIHtcclxuICAgIGxldCBwbGF5ZXJTY3JlZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXllcl9jcmVhdGlvblwiKTtcclxuICAgIGxldCBwbGF5ZXJUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lX2VudGVyXCIpO1xyXG4gICAgc3RhdGVDb250cm9sLnBsYXllck5hbWUgPSBwbGF5ZXJUZXh0LnZhbHVlO1xyXG4gICAgaWYgKHN0YXRlQ29udHJvbC5wbGF5ZXJOYW1lID09PSBcIlwiKSB7XHJcbiAgICAgIHN0YXRlQ29udHJvbC5wbGF5ZXJOYW1lID0gXCJQbGF5ZXIgMVwiO1xyXG4gICAgfVxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lX2Rpc3BsYXlcIikudGV4dENvbnRlbnQgPVxyXG4gICAgICBzdGF0ZUNvbnRyb2wucGxheWVyTmFtZTtcclxuICAgIHBsYXllclNjcmVlbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICBjcmVhdGVTaGlwcygpO1xyXG4gICAgY3JlYXRlR2FtZUJvYXJkKCk7XHJcbiAgICBzaGlwSGl0TWVzc2FnZShcclxuICAgICAgXCJXZWxjb21lIHRvIGJhdHRsZXNoaXAhXCIsXHJcbiAgICAgIFwiQmVnaW4gYnkgcGxhY2luZyBkb3duIHlvdXIgY2FycmllclwiXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU5hbWUoKSB7XHJcbiAgLy8gc3RhdGVDb250cm9sLmVudGVySW5mbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3VibWl0X25hbWVcIik7XHJcbiAgLy8gc3RhdGVDb250cm9sLmVudGVySW5mby5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgc3RhcnRHYW1lKTtcclxuICBsZXQgZW50ZXJJbmZvS2V5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lX2VudGVyXCIpO1xyXG4gIGVudGVySW5mb0tleS5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwgc3RhcnRHYW1lKTtcclxufVxyXG5cclxuZXhwb3J0IHsgY3JlYXRlTmFtZSB9O1xyXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfaSIsIl9pMiIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsImNoZWNrU2hpcHNTYW5rIiwic3RhdGVDb250cm9sIiwiZW5lbXlTaGlwc1N1bmsiLCJyZWFkeUFpbSIsInJlYWR5RmlyZSIsImVuZW15VHVybiIsInNoaXBIaXRNZXNzYWdlIiwicGxheWVyTmFtZSIsInBsYXllclNoaXBzU3VuayIsInNldENvbG9ycyIsInRhcmdldFNxdWFyZSIsImNvbG9yIiwic2V0VGltZW91dCIsInRleHRDb250ZW50IiwicGxheWVyU3VjY2Vzc2Z1bFNob3RzIiwiYmFja2dyb3VuZENvbG9yIiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVsb2FkIiwiYXR0YWNrRW5lbXkiLCJtaXNzZWRTaG90cyIsImluY2x1ZGVzIiwiZW5lbXlfdGFrZW5fc3F1YXJlcyIsImVuZW15QXR0YWNrIiwiZW5lbXlDYXJyaWVyIiwicG9zaXRpb24iLCJzaGlwIiwiaGl0IiwiZW5lbXlCYXR0bGVzaGlwIiwiZW5lbXlDcnVpc2VyIiwiZW5lbXlTdWJtYXJpbmUiLCJlbmVteVBhdHJvbGJvYXQiLCJ0YXJnZXRpZCIsInJhbmRvbU51bSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImF2YWlsaWJsZVNxdWFyZXMiLCJwaWNrZWRTcXVhcmUiLCJnZXRUYXJnZXRJZCIsInRha2VuX3NxYXVyZXMiLCJlbmVteVN1Y2Nlc3NmdWxTaG90cyIsInBsYXllckNhcnJpZXIiLCJwbGF5ZXJCYXR0bGVzaGlwIiwicGxheWVyQ3J1aXNlciIsInBsYXllclN1Ym1hcmluZSIsInBsYXllclBhdHJvbGJvYXQiLCJhaW1BdEVuZW15IiwiY2xlYXJQYXNzZWRTcXVhcmUiLCJwYXNzZWRTcXVhcmUiLCJzaGlwSGFzQmVlblNldE1lc3NhZ2UiLCJuZXh0U2hpcFRvQmVTZXRNZXNzYWdlIiwidGV4dERpc3BsYXkiLCJjbGFzc0xpc3QiLCJhZGQiLCJjcmVhdGVFbmVteUdyaWQiLCJlbmVteUJvYXJkIiwic3F1YXJlIiwiY3JlYXRlRW5lbXlGbGVldCIsInNoaXBGYWN0b3J5IiwicGxhY2VFbmVteUNhcnJpZXIiLCJwbGFjZUVuZW15QmF0dGxlc2hpcCIsInBsYWNlRW5lbXlDcnVpc2VyIiwicGxhY2VFbmVteVN1Ym1hcmluZSIsInBsYWNlRW5lbXlQYXRyb2xib2F0Iiwic3BvdF9vbl9ncmlkIiwiaG9yaXpvbmFsX29yX3ZlcnRpY2FsIiwiY2hlY2tfc3BvdF8xIiwiY2hlY2tfc3BvdF8yIiwiY2hlY2tfc3BvdF8zIiwiY2hlY2tfc3BvdF80IiwiY2hlY2tfc3BvdF81IiwiY2hlY2tfc3BvdF9hcnJheSIsImZpbmRTaGFyZWRFbGVtZW50cyIsImdldEF0dHJpYnV0ZSIsImVuZW15X2NhcnJpZXJfcG9zaXRpb25fMSIsImVuZW15X2NhcnJpZXJfcG9zaXRpb25fMiIsImVuZW15X2NhcnJpZXJfcG9zaXRpb25fMyIsImVuZW15X2NhcnJpZXJfcG9zaXRpb25fNCIsImVuZW15X2NhcnJpZXJfcG9zaXRpb25fNSIsImVuZW15X2NhcnJpZXJfcG9zaXRpb25fYXJyYXkiLCJqIiwiZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl8xIiwiZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl8yIiwiZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl8zIiwiZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl80IiwiZW5lbXlfYmF0dGxlc2hpcF9wb3NpdGlvbl9hcnJheSIsImVuZW15X2NydWlzZXJfcG9zaXRpb25fMSIsImVuZW15X2NydWlzZXJfcG9zaXRpb25fMiIsImVuZW15X2NydWlzZXJfcG9zaXRpb25fMyIsImVuZW15X2NydWlzZXJfcG9zaXRpb25fYXJyYXkiLCJlbmVteV9zdWJtYXJpbmVfcG9zaXRpb25fMSIsImVuZW15X3N1Ym1hcmluZV9wb3NpdGlvbl8yIiwiZW5lbXlfc3VibWFyaW5lX3Bvc2l0aW9uXzMiLCJlbmVteV9zdWJtYXJpbmVfcG9zaXRpb25fYXJyYXkiLCJlbmVteV9wYXRyb2xib2F0X3Bvc2l0aW9uXzEiLCJlbmVteV9wYXRyb2xib2F0X3Bvc2l0aW9uXzIiLCJlbmVteV9wYXRyb2xib2F0X3Bvc2l0aW9uX2FycmF5IiwiYm9hcmQiLCJjdXJyZW50RnVuY3Rpb24iLCJob2l6b250YWxfcGxhY2VtZW50IiwiY2hlY2tBcnJheSIsImhvdmVyQXJyYXkiLCJzcGF3bkNhcnJpZXIiLCJzcGF3bkJhdHRsZXNoaXAiLCJzcGF3bkNydWlzZXIiLCJzcGF3blN1Ym1hcmluZSIsInNwYXduUGF0cm9sYm9hdCIsImNvbnN0cnVjdG9yIiwibmFtZSIsImhpdF9wb2ludHMiLCJhcnIxIiwiYXJyMiIsImVsbSIsInNvbWUiLCJjaGVjayIsImZvckVhY2giLCJ4IiwiaG92ZXJPbmUiLCJob3ZlclR3byIsImhvdmVyVGhyZWUiLCJob3ZlckZvdXIiLCJob3ZlckZpdmUiLCJ5IiwiY2hhbmdlQXhpcyIsInNoaXBTZXR1cFRleHQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY3JlYXRlU2hpcHMiLCJjYXJyaWVyIiwiYmF0dGxlc2hpcCIsImNydWlzZXIiLCJzdWJtYXJpbmUiLCJwYXRyb2xib2F0IiwiY3JlYXRlQ2Fycmllck9uQm9hcmQiLCJjYXJyaWVyX3Bvc2l0aW9uXzEiLCJjYXJyaWVyX3Bvc2l0aW9uXzIiLCJjYXJyaWVyX3Bvc2l0aW9uXzMiLCJjYXJyaWVyX3Bvc2l0aW9uXzQiLCJjYXJyaWVyX3Bvc2l0aW9uXzUiLCJ0ZW1wQ2FycmllckFycmF5IiwiY3JlYXRlQmF0dGxlc2hpcE9uQm9hcmQiLCJiYXR0bGVTaGlwX3Bvc2l0aW9uXzEiLCJiYXR0bGVTaGlwX3Bvc2l0aW9uXzIiLCJiYXR0bGVTaGlwX3Bvc2l0aW9uXzMiLCJiYXR0bGVTaGlwX3Bvc2l0aW9uXzQiLCJ0ZW1wQmF0dGxlU2hpcEFycmF5IiwiY3JlYXRlQ3J1aXNlck9uQm9hcmQiLCJjcnVpc2VyX3Bvc2l0aW9uXzEiLCJjcnVpc2VyX3Bvc2l0aW9uXzIiLCJjcnVpc2VyX3Bvc2l0aW9uXzMiLCJ0ZW1wQ3J1aXNlckFycmF5IiwiY3JlYXRlU3VibWFyaW5lT25Cb2FyZCIsInN1Ym1hcmluZV9wb3NpdGlvbl8xIiwic3VibWFyaW5lX3Bvc2l0aW9uXzIiLCJzdWJtYXJpbmVfcG9zaXRpb25fMyIsInRlbXBTdWJtYXJpbmVBcnJheSIsImNyZWF0ZVBhdHJvbGJvYXRPbkJvYXJkIiwicGF0cm9sQm9hdF9wb3NpdGlvbl8xIiwicGF0cm9sQm9hdF9wb3NpdGlvbl8yIiwidGVtcFBhdHJvbGJvYXRBcnJheSIsImVudGVySW5mbyIsInBsYXllclNjcmVlbiIsInBsYXllclRleHQiLCJ2YWx1ZSIsImRpc3BsYXkiLCJjcmVhdGVHYW1lQm9hcmQiXSwic291cmNlUm9vdCI6IiJ9