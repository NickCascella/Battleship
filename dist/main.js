(()=>{"use strict";var e={299:(e,t,r)=>{r.d(t,{Z:()=>h});var n=r(15),a=r.n(n),s=r(645),i=r.n(s),o=r(667),u=r.n(o),l=new URL(r(270),r.b),c=new URL(r(473),r.b),d=new URL(r(192),r.b),A=i()(a());A.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap);"]);var p=u()(l),y=u()(c),m=u()(d);A.push([e.id,"html {\r\n  background-image: url("+p+');\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  font-family: "Roboto Mono", monospace;\r\n}\r\n\r\n#player_creation {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#player_info {\r\n  height: 400px;\r\n  width: 600px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: url('+y+");\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n#text_div {\r\n  margin-top: 70px;\r\n  width: 550px;\r\n  height: 150px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  color: greenyellow;\r\n}\r\n\r\n#button_div {\r\n  padding-top: 50px;\r\n  width: 400px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n.playBtns {\r\n  width: 100px;\r\n  border: none;\r\n  background: none;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: greenyellow;\r\n}\r\n\r\n.playBtns:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n#playing_field {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n}\r\n\r\n#player_side {\r\n  margin-right: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#name_display {\r\n  font-size: 30px;\r\n  color: greenyellow;\r\n}\r\n\r\n#name_enter {\r\n  text-align: center;\r\n  background-color: black;\r\n  color: greenyellow;\r\n}\r\n\r\n#enemy_display {\r\n  font-size: 30px;\r\n  color: greenyellow;\r\n}\r\n\r\n#game_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url("+m+");\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n#enemy_side {\r\n  margin-left: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#enemy_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url("+m+');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.squares {\r\n  height: 50px;\r\n  width: 50px;\r\n  border: 1px solid black;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  font-size: 40px;\r\n  padding: 0px;\r\n  color: white;\r\n}\r\n\r\n.squares:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n/* .img {\r\n  background-image: url("./images/carrier.jpg");\r\n  background-attachment: fixed;\r\n  background-size: 50px 200px;\r\n  background-repeat: no-repeat;\r\n} */\r\n\r\n#text_display {\r\n  height: 34px;\r\n  margin: 0;\r\n  width: 550px;\r\n  color: rgb(4, 189, 4);\r\n  font-size: 20px;\r\n}\r\n\r\n/* NOT MY ANIMATION */\r\n.text_display {\r\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\r\n  border-right: 0.15em solid orange; /* The typwriter cursor */\r\n  white-space: nowrap; /* Keeps the content on a single line */\r\n  letter-spacing: 0.15em; /* Adjust as needed */\r\n  animation: typing 1s steps(40, end), blink-caret 0.75s step-end infinite;\r\n}\r\n\r\n.text_display2 {\r\n  height: 15px;\r\n  width: 0px;\r\n}\r\n\r\n/* The typing effect */\r\n@keyframes typing {\r\n  from {\r\n    width: 0%;\r\n  }\r\n  to {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n/* The typewriter cursor effect */\r\n@keyframes blink-caret {\r\n  from,\r\n  to {\r\n    border-color: transparent;\r\n  }\r\n  50% {\r\n    border-color: orange;\r\n  }\r\n}\r\n',"",{version:3,sources:["webpack://./src/battleship.css"],names:[],mappings:"AAEA;EACE,yDAAgD;EAChD,eAAe;EACf,gBAAgB;EAChB,qCAAqC;AACvC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,oCAAoC;EACpC,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,yDAAqD;EACrD,4BAA4B;EAC5B,sBAAsB;EACtB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,YAAY;EACZ,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,yDAA8C;EAC9C,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,yDAA8C;EAC9C,4BAA4B;EAC5B,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;EACvB,sBAAsB;EACtB,kBAAkB;EAClB,eAAe;EACf,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;;;;;GAKG;;AAEH;EACE,YAAY;EACZ,SAAS;EACT,YAAY;EACZ,qBAAqB;EACrB,eAAe;AACjB;;AAEA,qBAAqB;AACrB;EACE,gBAAgB,EAAE,4DAA4D;EAC9E,iCAAiC,EAAE,yBAAyB;EAC5D,mBAAmB,EAAE,uCAAuC;EAC5D,sBAAsB,EAAE,qBAAqB;EAC7C,wEAAwE;AAC1E;;AAEA;EACE,YAAY;EACZ,UAAU;AACZ;;AAEA,sBAAsB;AACtB;EACE;IACE,SAAS;EACX;EACA;IACE,WAAW;EACb;AACF;;AAEA,iCAAiC;AACjC;EACE;;IAEE,yBAAyB;EAC3B;EACA;IACE,oBAAoB;EACtB;AACF",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap");\r\n\r\nhtml {\r\n  background-image: url(/src/images/metal_bkg.jpg);\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  font-family: "Roboto Mono", monospace;\r\n}\r\n\r\n#player_creation {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#player_info {\r\n  height: 400px;\r\n  width: 600px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: url(/src/images/battleship_bkg.jpg);\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n#text_div {\r\n  margin-top: 70px;\r\n  width: 550px;\r\n  height: 150px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  color: greenyellow;\r\n}\r\n\r\n#button_div {\r\n  padding-top: 50px;\r\n  width: 400px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n.playBtns {\r\n  width: 100px;\r\n  border: none;\r\n  background: none;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: greenyellow;\r\n}\r\n\r\n.playBtns:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n#playing_field {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n}\r\n\r\n#player_side {\r\n  margin-right: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#name_display {\r\n  font-size: 30px;\r\n  color: greenyellow;\r\n}\r\n\r\n#name_enter {\r\n  text-align: center;\r\n  background-color: black;\r\n  color: greenyellow;\r\n}\r\n\r\n#enemy_display {\r\n  font-size: 30px;\r\n  color: greenyellow;\r\n}\r\n\r\n#game_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url(/src/images/sea_bkg.jpg);\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n#enemy_side {\r\n  margin-left: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 550px;\r\n}\r\n\r\n#enemy_board {\r\n  width: 500px;\r\n  height: 500px;\r\n  border: 2px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-image: url(/src/images/sea_bkg.jpg);\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.squares {\r\n  height: 50px;\r\n  width: 50px;\r\n  border: 1px solid black;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  font-size: 40px;\r\n  padding: 0px;\r\n  color: white;\r\n}\r\n\r\n.squares:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n/* .img {\r\n  background-image: url("./images/carrier.jpg");\r\n  background-attachment: fixed;\r\n  background-size: 50px 200px;\r\n  background-repeat: no-repeat;\r\n} */\r\n\r\n#text_display {\r\n  height: 34px;\r\n  margin: 0;\r\n  width: 550px;\r\n  color: rgb(4, 189, 4);\r\n  font-size: 20px;\r\n}\r\n\r\n/* NOT MY ANIMATION */\r\n.text_display {\r\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\r\n  border-right: 0.15em solid orange; /* The typwriter cursor */\r\n  white-space: nowrap; /* Keeps the content on a single line */\r\n  letter-spacing: 0.15em; /* Adjust as needed */\r\n  animation: typing 1s steps(40, end), blink-caret 0.75s step-end infinite;\r\n}\r\n\r\n.text_display2 {\r\n  height: 15px;\r\n  width: 0px;\r\n}\r\n\r\n/* The typing effect */\r\n@keyframes typing {\r\n  from {\r\n    width: 0%;\r\n  }\r\n  to {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n/* The typewriter cursor effect */\r\n@keyframes blink-caret {\r\n  from,\r\n  to {\r\n    border-color: transparent;\r\n  }\r\n  50% {\r\n    border-color: orange;\r\n  }\r\n}\r\n'],sourceRoot:""}]);const h=A},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=e(t);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(n)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(a[i]=!0)}for(var o=0;o<e.length;o++){var u=[].concat(e[o]);n&&a[u[0]]||(r&&(u[2]?u[2]="".concat(r," and ").concat(u[2]):u[2]=r),t.push(u))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}e.exports=function(e){var r,n,a=(n=4,function(e){if(Array.isArray(e))return e}(r=e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,s=[],i=!0,o=!1;try{for(r=r.call(e);!(i=(n=r.next()).done)&&(s.push(n.value),!t||s.length!==t);i=!0);}catch(e){o=!0,a=e}finally{try{i||null==r.return||r.return()}finally{if(o)throw a}}return s}}(r,n)||function(e,r){if(e){if("string"==typeof e)return t(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,r):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=a[1],i=a[3];if(!i)return s;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),l="/*# ".concat(u," */"),c=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[s].concat(c).concat([l]).join("\n")}return[s].join("\n")}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var s={},i=[],o=0;o<e.length;o++){var u=e[o],l=n.base?u[0]+n.base:u[0],c=s[l]||0,d="".concat(l," ").concat(c);s[l]=c+1;var A=r(d),p={css:u[1],media:u[2],sourceMap:u[3]};-1!==A?(t[A].references++,t[A].updater(p)):t.push({identifier:d,updater:a(p,n),references:1}),i.push(d)}return i}function a(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r.update(e=t)}else r.remove()}}e.exports=function(e,a){var s=n(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<s.length;i++){var o=r(s[i]);t[o].references--}for(var u=n(e,a),l=0;l<s.length;l++){var c=r(s[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}s=u}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n=r.css,a=r.media,s=r.sourceMap;a?e.setAttribute("media",a):e.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(n,e)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},473:(e,t,r)=>{e.exports=r.p+"a4543c6f1253d78ceab6.jpg"},270:(e,t,r)=>{e.exports=r.p+"0e2ef141a708e1bffb31.jpg"},192:(e,t,r)=>{e.exports=r.p+"e7039b1b15e4e94404f5.jpg"}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var s=t[n]={id:n,exports:{}};return e[n](s,s.exports,r),s.exports}r.m=e,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.b=document.baseURI||self.location.href;var n={};(()=>{r.d(n,{G:()=>j,c:()=>P});let e=()=>{5===m.enemyShipsSunk?(m.readyAim=!1,m.readyFire=!1,m.enemyTurn=!1,o(`Congratulations ${m.playerName}, you have sank all enemy ships!`,"Play again?")):5===m.playerShipsSunk&&(m.readyAim=!1,m.readyFire=!1,m.enemyTurn=!1,o(`Congratulations ${m.playerName}, you lost spectacularly!`,"Play again?"))};function t(e,t){setTimeout((()=>{e.textContent="X",e.style.color="black",m.playerSuccessfulShots.push(e),e.style.backgroundColor=t}),2500)}document.getElementById("restart").addEventListener("click",(()=>{location.reload()}));let a=e=>{let r=e.target;!0!==m.readyAim||!0!==m.readyFire||m.missedShots.includes(r)||m.playerSuccessfulShots.includes(r)||!m.enemy_taken_squares.includes(r)?!0!==m.readyAim||!0!==m.readyFire||m.playerSuccessfulShots.includes(r)||m.missedShots.includes(r)||(m.readyAim=!1,m.readyFire=!1,m.missedShots.push(r),setTimeout((function(){r.textContent="X"}),2500),o("Checking.....","We missed!"),m.enemyTurn=!0,setTimeout(s,6400)):(m.readyAim=!1,m.readyFire=!1,m.enemyCarrier.position.includes(r)?(t(r,"orange"),m.enemyCarrier.ship.hit()):m.enemyBattleship.position.includes(r)?(t(r,"rgb(45, 192, 250)"),m.enemyBattleship.ship.hit()):m.enemyCruiser.position.includes(r)?(t(r,"rgb(34, 250, 106)"),m.enemyCruiser.ship.hit()):m.enemySubmarine.position.includes(r)?(t(r,"rgb(182, 34, 250)"),m.enemySubmarine.ship.hit()):m.enemyPatrolboat.position.includes(r)&&(t(r,"rgb(250, 34, 196)"),m.enemyPatrolboat.ship.hit()))},s=()=>{let e=Math.floor(100*Math.random()),t=document.getElementById(`square_${e}`);!m.taken_sqaures.includes(t)||m.enemySuccessfulShots.includes(t)||m.missedShots.includes(t)?m.enemySuccessfulShots.includes(t)||m.missedShots.includes(t)?s():(o("Waiting on the enemy.....","They missed! Fire away!"),setTimeout((function(){m.missedShots.push(t),t.textContent="X",m.readyAim=!0,m.readyFire=!0,m.enemyTurn=!1}),1900)):(setTimeout((function(){t.textContent="X",t.style.color="black",m.readyAim=!0,m.readyFire=!0,m.enemySuccessfulShots.push(t)}),4e3),m.playerCarrier.position.includes(t)?m.playerCarrier.ship.hit():m.playerBattleship.position.includes(t)?m.playerBattleship.ship.hit():m.playerCruiser.position.includes(t)?m.playerCruiser.ship.hit():m.playerSubmarine.position.includes(t)?m.playerSubmarine.ship.hit():m.playerPatrolboat.position.includes(t)&&m.playerPatrolboat.ship.hit())},i=e=>{!0!==m.readyAim||m.playerSuccessfulShots.includes(e.target)||m.missedShots.includes(e.target)||(!0!==m.clearPassedSquare||m.playerSuccessfulShots.includes(m.passedSquare)||(m.passedSquare.style.backgroundColor=""),m.passedSquare=e.target,e.target.style.backgroundColor="orange",m.clearPassedSquare=!0)},o=(e,t)=>{m.textDisplay.textContent="",m.textDisplay.classList.remove("text_display"),m.textDisplay.classList.add("text_display2"),setTimeout((()=>{m.textDisplay.classList.remove("text_display2"),m.textDisplay.textContent=e,m.textDisplay.classList.add("text_display"),setTimeout((()=>{m.textDisplay.textContent="",m.textDisplay.classList.remove("text_display"),m.textDisplay.classList.add("text_display2"),setTimeout((()=>{m.textDisplay.textContent=t,m.textDisplay.classList.remove("text_display2"),m.textDisplay.classList.add("text_display")}),1e3)}),1600)}),500)},u=()=>{m.enemyBoard.addEventListener("click",a);for(let e=0;e<100;e++){let t=document.createElement("div");e<10?(t.setAttribute("XX",e),t.setAttribute("YY",9)):e<20?(t.setAttribute("XX",e-10),t.setAttribute("YY",8)):e<30?(t.setAttribute("XX",e-20),t.setAttribute("Y",7)):e<40?(t.setAttribute("XX",e-30),t.setAttribute("YY",6)):e<50?(t.setAttribute("XX",e-40),t.setAttribute("YY",5)):e<60?(t.setAttribute("XX",e-50),t.setAttribute("YY",4)):e<70?(t.setAttribute("XX",e-60),t.setAttribute("YY",3)):e<80?(t.setAttribute("XX",e-70),t.setAttribute("YY",2)):e<90?(t.setAttribute("XX",e-80),t.setAttribute("YY",1)):e<100&&(t.setAttribute("XX",e-90),t.setAttribute("YY",0)),t.id=`enemySquare_${e}`,t.addEventListener("mouseover",i),t.classList="squares",m.enemyBoard.appendChild(t),99===e&&(o("Ready for battle!","Commence attack!"),setTimeout(l,3e3))}},l=()=>{let e=new h("Carrier",5,5),t=new h("Battleship",4,4),r=new h("Cruiser",3,3),n=new h("Submarine",3,3),a=new h("Patrol Boat",2,2);m.enemyCarrier.ship=e,m.enemyBattleship.ship=t,m.enemyCruiser.ship=r,m.enemySubmarine.ship=n,m.enemyPatrolboat.ship=a,c(),d(),A(),p(),y(),m.readyAim=!0,m.readyFire=!0};function c(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=document.getElementById(`enemySquare_${e+3}`),s=document.getElementById(`enemySquare_${e+4}`),i=[];if(i.push(t,r,n,a,s),i.includes(null)||g(m.enemy_taken_squares,i)||t.getAttribute("YY")!==s.getAttribute("YY"))c();else{let e=t,o=r,u=n,l=a,c=s,d=[];d.push(e,o,u,l,c);for(let e=0;e<i.length;e++)m.enemyCarrier.position.push(d[e]),m.enemy_taken_squares.push(d[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=document.getElementById("enemySquare_"+(e-30)),s=document.getElementById("enemySquare_"+(e-40)),i=[];if(i.push(t,r,n,a,s),i.includes(null)||g(m.enemy_taken_squares,i))c();else{let e=t,o=r,u=n,l=a,c=s,d=[];d.push(e,o,u,l,c);for(let e=0;e<i.length;e++)m.enemyCarrier.position.push(d[e]),m.enemy_taken_squares.push(d[e])}}}function d(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=document.getElementById(`enemySquare_${e+3}`),s=[];if(s.push(t,r,n,a),s.includes(null)||g(m.enemy_taken_squares,s)||t.getAttribute("YY")!==a.getAttribute("YY"))d();else{let e=t,i=r,o=n,u=a,l=[];l.push(e,i,o,u);for(let e=0;e<s.length;e++)m.enemyBattleship.position.push(l[e]),m.enemy_taken_squares.push(l[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=document.getElementById("enemySquare_"+(e-30)),s=[];if(s.push(t,r,n,a),s.includes(null)||g(m.enemy_taken_squares,s))d();else{let e=t,i=r,o=n,u=a,l=[];l.push(e,i,o,u);for(let e=0;e<s.length;e++)m.enemyBattleship.position.push(l[e]),m.enemy_taken_squares.push(l[e])}}}function A(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=[];if(a.push(t,r,n),a.includes(null)||g(m.enemy_taken_squares,a)||t.getAttribute("YY")!==n.getAttribute("YY"))A();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)m.enemyCruiser.position.push(o[e]),m.enemy_taken_squares.push(o[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=[];if(a.push(t,r,n),a.includes(null)||g(m.enemy_taken_squares,a))A();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)m.enemyCruiser.position.push(o[e]),m.enemy_taken_squares.push(o[e])}}}function p(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=document.getElementById(`enemySquare_${e+2}`),a=[];if(a.push(t,r,n),a.includes(null)||g(m.enemy_taken_squares,a)||t.getAttribute("YY")!==n.getAttribute("YY"))p();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)m.enemySubmarine.position.push(o[e]),m.enemy_taken_squares.push(o[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=document.getElementById("enemySquare_"+(e-20)),a=[];if(a.push(t,r,n),a.includes(null)||g(m.enemy_taken_squares,a))p();else{let e=t,s=r,i=n,o=[];o.push(e,s,i);for(let e=0;e<a.length;e++)m.enemySubmarine.position.push(o[e]),m.enemy_taken_squares.push(o[e])}}}function y(){let e=Math.floor(100*Math.random()),t=Math.floor(2*Math.random());if(0===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById(`enemySquare_${e+1}`),n=[];if(n.push(t,r),n.includes(null)||g(m.enemy_taken_squares,n)||t.getAttribute("YY")!==r.getAttribute("YY"))y();else{let e=t,a=r,s=[];s.push(e,a);for(let e=0;e<n.length;e++)m.enemyPatrolboat.position.push(s[e]),m.enemy_taken_squares.push(s[e])}}else if(1===t){let t=document.getElementById(`enemySquare_${e}`),r=document.getElementById("enemySquare_"+(e-10)),n=[];if(n.push(t,r),n.includes(null)||g(m.enemy_taken_squares,n))y();else{let e=t,a=r,s=[];s.push(e,a);for(let e=0;e<n.length;e++)m.enemyPatrolboat.position.push(s[e]),m.enemy_taken_squares.push(s[e])}}}let m={board:document.getElementById("game_board"),textDisplay:document.getElementById("text_display"),currentFunction:"This is filler",hoizontal_placement:!0,taken_sqaures:[],checkArray:!1,hoverArray:[],readyAim:!1,passedSquare:"This is filler",clearPassedSquare:!1,readyFire:!1,enemyTurn:!1,playerSuccessfulShots:[],enemySuccessfulShots:[],missedShots:[],playerShipsSunk:0,enemyShipsSunk:0,playerCarrier:{spawnCarrier:!0,ship:{},position:[]},playerBattleship:{spawnBattleship:!1,ship:{},position:[]},playerCruiser:{spawnCruiser:!1,ship:{},position:[]},playerSubmarine:{spawnSubmarine:!1,ship:{},position:[]},playerPatrolboat:{spawnPatrolboat:!1,ship:{},position:[]},enemyBoard:document.getElementById("enemy_board"),enemy_taken_squares:[],enemyCarrier:{ship:{},position:[]},enemyBattleship:{ship:{},position:[]},enemyCruiser:{ship:{},position:[]},enemySubmarine:{ship:{},position:[]},enemyPatrolboat:{ship:{},position:[]},playerName:""};class h{constructor(e,t,r){this.name=e,this.hit_points=t,this.length=r}hit(){this.hit_points-=1,0!==this.hit_points&&!1===m.enemyTurn?(o("Checking.....","It's a hit!"),setTimeout((function(){m.enemyTurn=!0,s()}),5500)):0!==this.hit_points&&!0===m.enemyTurn?(o("Waiting for enemy fire.....",`Our ${this.name}'s been hit! Fire back!`),m.enemyTurn=!1,setTimeout((function(){m.readyFire=!0,m.readyAim=!0}),3300)):0===this.hit_points&&!1===m.enemyTurn?(o("Checking.....",`Nice shot! you sunk their ${this.name}!`),setTimeout((function(){m.enemyShipsSunk++,5===m.playerShipsSunk||5===m.enemyShipsSunk?e():(m.enemyTurn=!0,s())}),5500)):0===this.hit_points&&!0===m.enemyTurn&&(o("Waiting for enemy fire.....",`Damn! they sunk our ${this.name}!!`),m.enemyTurn=!1,setTimeout((function(){m.playerShipsSunk++,5===m.playerShipsSunk||5===m.enemyShipsSunk?e():(m.readyFire=!0,m.readyAim=!0)}),3300))}}let g=(e,t)=>e.map((e=>e.id)).some((e=>t.map((e=>e.id)).includes(e))),b=e=>{for(let t=0;t<100;t++)if(!0===m.playerCarrier.spawnCarrier&&!0===m.hoizontal_placement&&e.target.id===`square_${t}`){!0===m.checkArray&&m.hoverArray.forEach((e=>{null!==e&&(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`),a=document.getElementById(`square_${t+3}`),s=document.getElementById(`square_${t+4}`);m.hoverArray=[],m.checkArray=!0,m.hoverArray.push(e,r,n,a,s),e.getAttribute("X")<6&&e.getAttribute("Y")===s.getAttribute("Y")&&!m.hoverArray.includes(null)?m.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):m.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==m.hoverArray[0].getAttribute("Y")||m.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===m.playerCarrier.spawnCarrier&&!1===m.hoizontal_placement&&e.target.id===`square_${t}`){!0===m.checkArray&&m.hoverArray.forEach((e=>{null!==e&&(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10)),n=document.getElementById("square_"+(t-20)),a=document.getElementById("square_"+(t-30)),s=document.getElementById("square_"+(t-40));m.hoverArray=[],m.checkArray=!0,m.hoverArray.push(e,r,n,a,s),e.getAttribute("Y")<6&&e.getAttribute("X")===s.getAttribute("X")&&!m.hoverArray.includes(null)?m.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):m.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==m.hoverArray[0].getAttribute("X")||m.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===m.playerBattleship.spawnBattleship&&!0===m.hoizontal_placement&&e.target.id===`square_${t}`){!0===m.checkArray&&m.hoverArray.forEach((e=>{null===e||m.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`),a=document.getElementById(`square_${t+3}`);m.hoverArray=[],m.checkArray=!0,m.hoverArray.push(e,r,n,a),e.getAttribute("X")<7&&e.getAttribute("Y")===a.getAttribute("Y")&&!g(m.taken_sqaures,m.hoverArray)?m.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):m.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==m.hoverArray[0].getAttribute("Y")||m.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===m.playerBattleship.spawnBattleship&&!1===m.hoizontal_placement&&e.target.id===`square_${t}`){!0===m.checkArray&&m.hoverArray.forEach((e=>{null===e||m.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10)),n=document.getElementById("square_"+(t-20)),a=document.getElementById("square_"+(t-30));m.hoverArray=[],m.checkArray=!0,m.hoverArray.push(e,r,n,a),e.getAttribute("Y")<7&&e.getAttribute("X")===a.getAttribute("X")&&!g(m.taken_sqaures,m.hoverArray)?m.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):m.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==m.hoverArray[0].getAttribute("X")||m.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0!==m.playerCruiser.spawnCruiser&&!0!==m.playerSubmarine.spawnSubmarine||!0!==m.hoizontal_placement||e.target.id!==`square_${t}`)if(!0!==m.playerCruiser.spawnCruiser&&!0!==m.playerSubmarine.spawnSubmarine||!1!==m.hoizontal_placement||e.target.id!==`square_${t}`){if(!0===m.playerPatrolboat.spawnPatrolboat&&!0===m.hoizontal_placement&&e.target.id===`square_${t}`){!0===m.checkArray&&m.hoverArray.forEach((e=>{null===e||m.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`);m.hoverArray=[],m.checkArray=!0,m.hoverArray.push(e,r),e.getAttribute("X")<9&&e.getAttribute("Y")===r.getAttribute("Y")&&!g(m.taken_sqaures,m.hoverArray)?m.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):m.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==m.hoverArray[0].getAttribute("Y")||m.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else if(!0===m.playerPatrolboat.spawnPatrolboat&&!1===m.hoizontal_placement&&e.target.id===`square_${t}`){!0===m.checkArray&&m.hoverArray.forEach((e=>{null===e||m.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10));m.hoverArray=[],m.checkArray=!0,m.hoverArray.push(e,r),e.getAttribute("Y")<9&&e.getAttribute("X")===r.getAttribute("X")&&!g(m.taken_sqaures,m.hoverArray)?m.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):m.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==m.hoverArray[0].getAttribute("X")||m.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}}else{!0===m.checkArray&&m.hoverArray.forEach((e=>{null===e||m.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById("square_"+(t-10)),n=document.getElementById("square_"+(t-20));m.hoverArray=[],m.checkArray=!0,m.hoverArray.push(e,r,n),e.getAttribute("Y")<8&&e.getAttribute("X")===n.getAttribute("X")&&!g(m.taken_sqaures,m.hoverArray)?m.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):m.hoverArray.forEach((e=>{null===e||e.getAttribute("X")!==m.hoverArray[0].getAttribute("X")||m.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}else{!0===m.checkArray&&m.hoverArray.forEach((e=>{null===e||m.taken_sqaures.includes(e)||(e.style.backgroundColor="")}));let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`);m.hoverArray=[],m.checkArray=!0,m.hoverArray.push(e,r,n),e.getAttribute("X")<8&&e.getAttribute("Y")===n.getAttribute("Y")&&!g(m.taken_sqaures,m.hoverArray)?m.hoverArray.forEach((e=>{e.style.backgroundColor="green"})):m.hoverArray.forEach((e=>{null===e||e.getAttribute("Y")!==m.hoverArray[0].getAttribute("Y")||m.taken_sqaures.includes(e)||(e.style.backgroundColor="red")}))}};var f=r(379),E=r.n(f),B=r(795),_=r.n(B),C=r(569),k=r.n(C),x=r(565),q=r.n(x),v=r(216),w=r.n(v),S=r(589),I=r.n(S),Y=r(299),$={};$.styleTagTransform=I(),$.setAttributes=q(),$.insert=k().bind(null,"head"),$.domAPI=_(),$.insertStyleElement=w(),E()(Y.Z,$),Y.Z&&Y.Z.locals&&Y.Z.locals;let X=()=>{!0===m.hoizontal_placement?m.hoizontal_placement=!1:m.hoizontal_placement=!0},T=(e,t)=>{m.textDisplay.textContent="",m.textDisplay.classList.remove("text_display"),m.textDisplay.classList.add("text_display2"),m.board.removeEventListener("click",m.currentFunction),setTimeout((()=>{m.textDisplay.classList.remove("text_display2"),m.textDisplay.textContent=e,m.textDisplay.classList.add("text_display"),setTimeout((()=>{m.textDisplay.textContent="",m.textDisplay.classList.remove("text_display"),m.textDisplay.classList.add("text_display2"),setTimeout((()=>{m.textDisplay.textContent=t,m.textDisplay.classList.remove("text_display2"),m.textDisplay.classList.add("text_display"),m.board.addEventListener("click",m.currentFunction)}),1e3)}),1600)}),500)},P=()=>{document.getElementById("change_axis").addEventListener("click",X);let e=new h("Carrier",5,5),t=new h("Battleship",4,4),r=new h("Cruiser",3,3),n=new h("Submarine",3,3),a=new h("Patrol Boat",2,2);m.playerCarrier.ship=e,m.playerBattleship.ship=t,m.playerCruiser.ship=r,m.playerSubmarine.ship=n,m.playerPatrolboat.ship=a},j=e=>{if(!0===m.playerCarrier.spawnCarrier)for(let t=0;t<100;t++){if(e.target.getAttribute("X")>5)return;if(e.target.id===`square_${t}`&&!0===m.hoizontal_placement){let e=document.getElementById(`square_${t}`),r=document.getElementById(`square_${t+1}`),n=document.getElementById(`square_${t+2}`),a=document.getElementById(`square_${t+3}`),s=document.getElementById(`square_${t+4}`),i=[];if(i.push(e,r,n,a,s),i.includes(null)||e.getAttribute("Y")!==s.getAttribute("Y"))return;for(let e=0;e<i.length;e++)i[e].style.backgroundColor="orange",m.taken_sqaures.push(i[e]),m.playerCarrier.position.push(i[e]);m.playerCarrier.spawnCarrier=!1,T("Carrier has been set!","Please set down your battleship!"),m.currentFunction=M,setTimeout((()=>{m.playerBattleship.spawnBattleship=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===m.hoizontal_placement){if(e.target.getAttribute("Y")>5)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=document.getElementById("square_"+(t-30)),i=document.getElementById("square_"+(t-40)),o=[];if(o.push(r,n,a,s,i),o.includes(null)||r.getAttribute("X")!==i.getAttribute("X"))return;for(let e=0;e<o.length;e++)o[e].style.backgroundColor="orange",m.taken_sqaures.push(o[e]),m.playerCarrier.position.push(o[e]);m.playerCarrier.spawnCarrier=!1,T("Carrier has been set!","Please set down your battleship!"),m.currentFunction=M,setTimeout((()=>{m.playerBattleship.spawnBattleship=!0}),3e3)}}},M=e=>{if(!0===m.playerBattleship.spawnBattleship)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===m.hoizontal_placement){if(e.target.getAttribute("X")>6)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=document.getElementById(`square_${t+2}`),s=document.getElementById(`square_${t+3}`),i=[];if(i.push(r,n,a,s),r.getAttribute("Y")!==s.getAttribute("Y")||g(i,m.taken_sqaures))return;for(let e=0;e<i.length;e++)i[e].style.backgroundColor="rgb(45, 192, 250)",m.taken_sqaures.push(i[e]),m.playerBattleship.position.push(i[e]);m.playerBattleship.spawnBattleship=!1,T("Battleship has been placed!","Please set up your Cruiser..."),m.currentFunction=z,setTimeout((()=>{m.playerCruiser.spawnCruiser=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===m.hoizontal_placement){if(e.target.getAttribute("Y")>6)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=document.getElementById("square_"+(t-30)),i=[];if(i.push(r,n,a,s),r.getAttribute("X")!==s.getAttribute("X")||g(i,m.taken_sqaures))return;for(let e=0;e<i.length;e++)i[e].style.backgroundColor="rgb(45, 192, 250)",m.taken_sqaures.push(i[e]),m.playerBattleship.position.push(i[e]);m.playerBattleship.spawnBattleship=!1,T("Battleship has been placed!","Please set up your Cruiser..."),m.currentFunction=z,setTimeout((()=>{m.playerCruiser.spawnCruiser=!0}),3e3)}},z=e=>{if(!0===m.playerCruiser.spawnCruiser)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===m.hoizontal_placement){if(e.target.getAttribute("X")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=document.getElementById(`square_${t+2}`),s=[];if(s.push(r,n,a),r.getAttribute("Y")!==a.getAttribute("Y")||g(s,m.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(34, 250, 106)",m.taken_sqaures.push(s[e]),m.playerCruiser.position.push(s[e]);m.playerCruiser.spawnCruiser=!1,T("Cruiser is set!","Please submerge your submarine..."),m.currentFunction=D,setTimeout((()=>{m.playerSubmarine.spawnSubmarine=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===m.hoizontal_placement){if(e.target.getAttribute("Y")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=[];if(s.push(r,n,a),r.getAttribute("X")!==a.getAttribute("X")||g(s,m.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(34, 250, 106)",m.taken_sqaures.push(s[e]),m.playerCruiser.position.push(s[e]);m.playerCruiser.spawnCruiser=!1,T("Cruiser is set!","Please submerge your submarine..."),m.currentFunction=D,setTimeout((()=>{m.playerSubmarine.spawnSubmarine=!0}),3e3)}},D=e=>{if(!0===m.playerSubmarine.spawnSubmarine)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===m.hoizontal_placement){if(e.target.getAttribute("X")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=document.getElementById(`square_${t+2}`),s=[];if(s.push(r,n,a),r.getAttribute("Y")!==a.getAttribute("Y")||g(s,m.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(182, 34, 250)",m.taken_sqaures.push(s[e]),m.playerSubmarine.position.push(s[e]);m.playerSubmarine.spawnSubmarine=!1,T("Submarine is submerged!","Please send out your patrol boat.."),m.currentFunction=L,setTimeout((()=>{m.playerPatrolboat.spawnPatrolboat=!0}),3e3)}else if(e.target.id===`square_${t}`&&!1===m.hoizontal_placement){if(e.target.getAttribute("Y")>7)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=document.getElementById("square_"+(t-20)),s=[];if(s.push(r,n,a),r.getAttribute("X")!==a.getAttribute("X")||g(s,m.taken_sqaures))return;for(let e=0;e<s.length;e++)s[e].style.backgroundColor="rgb(182, 34, 250)",m.taken_sqaures.push(s[e]),m.playerSubmarine.position.push(s[e]);m.playerSubmarine.spawnSubmarine=!1,T("Submarine is submerged!","Please send out your patrol boat.."),m.currentFunction=L,setTimeout((()=>{m.playerPatrolboat.spawnPatrolboat=!0}),3e3)}},L=e=>{if(!0===m.playerPatrolboat.spawnPatrolboat)for(let t=0;t<100;t++)if(e.target.id===`square_${t}`&&!0===m.hoizontal_placement){if(e.target.getAttribute("X")>8)return;let r=document.getElementById(`square_${t}`),n=document.getElementById(`square_${t+1}`),a=[];if(a.push(r,n),r.getAttribute("Y")!==n.getAttribute("Y")||g(a,m.taken_sqaures))return;for(let e=0;e<a.length;e++)a[e].style.backgroundColor="rgb(250, 34, 196)",m.taken_sqaures.push(a[e]),m.playerPatrolboat.position.push(a[e]);m.playerPatrolboat.spawnPatrolboat=!1,T("Patrolboat is submerged!","Prepare to engage enemy fleet..."),m.currentFunction=l,setTimeout((()=>{u()}),5e3)}else if(e.target.id===`square_${t}`&&!1===m.hoizontal_placement){if(e.target.getAttribute("Y")>8)return;let r=document.getElementById(`square_${t}`),n=document.getElementById("square_"+(t-10)),a=[];if(a.push(r,n),r.getAttribute("X")!==n.getAttribute("X")||g(a,m.taken_sqaures))return;for(let e=0;e<a.length;e++)a[e].style.backgroundColor="rgb(250, 34, 196)",m.taken_sqaures.push(a[e]),m.playerPatrolboat.position.push(a[e]);m.playerPatrolboat.spawnPatrolboat=!1,T("Patrolboat is submerged!","Prepare to engage enemy fleet..."),m.currentFunction=l,setTimeout((()=>{u()}),5e3)}};document.getElementById("name_enter").addEventListener("keypress",(e=>{if("Enter"===e.key||e.target===m.enterInfo){let e=document.getElementById("player_creation"),t=document.getElementById("name_enter");m.playerName=t.value,""===m.playerName&&(m.playerName="Player 1"),document.getElementById("name_display").textContent=m.playerName,e.style.display="none",P(),(()=>{m.currentFunction=j,m.board.addEventListener("click",m.currentFunction);for(let e=0;e<100;e++){let t=document.createElement("div");e<10?(t.setAttribute("X",e),t.setAttribute("Y",9)):e<20?(t.setAttribute("X",e-10),t.setAttribute("Y",8)):e<30?(t.setAttribute("X",e-20),t.setAttribute("Y",7)):e<40?(t.setAttribute("X",e-30),t.setAttribute("Y",6)):e<50?(t.setAttribute("X",e-40),t.setAttribute("Y",5)):e<60?(t.setAttribute("X",e-50),t.setAttribute("Y",4)):e<70?(t.setAttribute("X",e-60),t.setAttribute("Y",3)):e<80?(t.setAttribute("X",e-70),t.setAttribute("Y",2)):e<90?(t.setAttribute("X",e-80),t.setAttribute("Y",1)):e<100&&(t.setAttribute("X",e-90),t.setAttribute("Y",0)),t.id=`square_${e}`,t.addEventListener("mouseover",b),t.classList.add("squares"),m.board.appendChild(t)}})(),o("Welcome to battleship!","Begin by placing down your carrier")}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,